<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Old Guy, New Trick]]></title>
  <link href="http://hogihung.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://hogihung.github.io/"/>
  <updated>2015-09-29T15:04:18-04:00</updated>
  <id>http://hogihung.github.io/</id>
  <author>
    <name><![CDATA[Ho Gi Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hammer, N(R)ails, and some Java(Script)]]></title>
    <link href="http://hogihung.github.io/blog/2015/09/25/hammer-nails-and-java/"/>
    <updated>2015-09-25T13:45:14-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/09/25/hammer-nails-and-java</id>
    <content type="html"><![CDATA[<p>Although at times I feel like taking a hammer and some nails to bang some sense into my code, what I actually will be discussing today is related to a feature I was working on that required some updates to our Ruby/Rails code and JavaScript.  I typically find myself using pry to help me work through issues with the ruby code.  But for this feature, I needed to grab my hammer, make that Chromes' Developer tools, to assist in my debugging.</p>

<p>A little background first &ndash; assume we have a view that has a form on it.  A new requirement has been requested for us to add an upload file feature to that same view.  No problem, I can use form_tag to accomplish this task.  After making some changes, I was able to confirm that the view in question displayed the original form with a submit button, and a form to handle choosing a file to upload and its' corresponding upload button.  Below is an example of the first form_tag, and the second new form_tag:</p>

<p>```
ORIGINAL
  = form_tag({action: &lsquo;update&rsquo;}, id: &ldquo;original-form&rdquo;) do</p>

<pre><code>= button_tag 'Submit', id: 'confirm-button', type: 'button', disabled: @nurny.disable_submit_button?
</code></pre>

<p>ADDITIONAL
  = form_tag({action: :upload}, multipart: :true, id: &ldquo;upload-file&rdquo;) do</p>

<pre><code>= file_field_tag 'upload_file'
= button_tag 'Upload', id: "upload-button", class: "good", type: 'button', disabled: false
</code></pre>

<p>```</p>

<p>Something to keep in mind, when you have multiple forms on the same page, is to be sure you have a way to uniquely identify each form.  With the code updated, I went to test the forms.  To my surprise, when clicking either the Submit button or the Update button, nothing seemed to happen.  For the submit button, I could see Rails going through the motions of hitting the controller and associated update action, but the page didn&rsquo;t refresh with the data as I was expecting.</p>

<p>Well, this would be interesting.  I couldn&rsquo;t pry my way into seeing what was happening.  So I viewed my problem page in Chrome and pulled up the Developer Tools.  After a little digging, and cursing, I saw that my new form, &lsquo;upload-file&rsquo;, was nested under the original form.  This was causing my issue with neither form being able to properly set their data.  What makes this new request a bit of a challenge is that we are building a view by using partials.  So I didn&rsquo;t initially catch that I was nesting my new form inside the original one.</p>

<p>How did I notice the new form was nested?  Using the Developer Tools, View Source, I observed something like the following:</p>

<p>```
{&mdash;SNIP&mdash;}</p>

<div class='original'>
  <form id="original-form" action="/CONTROLLER/update" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="SOMERANDOMESTUFFHERE" />

{--SNIP--}

    <div class='upload'>
      <form id="upload-file" enctype="multipart/form-data" action="/CONTROLLER/upload" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="SOMERANDOMOTHERSTUFFHERE==" />
        <input type="file" name="upload_file" id="upload_file"/>
        <button name="button" type="button" id="upload-button" class="good">Upload</button>
      </form>

{--SNIP--}

    </div>
  </form>
</div>


<p>{&mdash;SNIP&mdash;}
```</p>

<p>I snipped out all of the surrounding HTML so we can focus on the problem &ndash; my new form, &lsquo;upload-file&rsquo;, was nested inside the &lsquo;original&rsquo; form.</p>

<p>NOTE: You may notice that I take the liberty to substitute actual syntax with filler syntax &ndash; just look for the all capitalized words.  I also like to use nurny and bobots as a substitute when needed.</p>

<p>With the nested forms issue resolved, my original form was now working. But my second form still had an issue. I could click on the Choose File button, select and file, and then click on the Upload button.  However, nothing happened.  At this point I need to grab my cup of JavaScript.</p>

<p>For my initial attack, let&rsquo;s write just enough javascript to get things working &ndash; no validation:</p>

<p>```
app/assets/javascript/nurny/validation.js
function uploadFile() {
  $(&lsquo;#upload-button&rsquo;).click(function() {</p>

<pre><code>var $form = $('#upload-file');

$form.submit();
return true;
</code></pre>

<p>  });
}
```</p>

<p><code>
app/assets/javascript/nurny/bobots.js
$(document).ready(function() {
  nurnyBobotter();
  setUnsubmit();
  uploadFile();
)};
</code></p>

<p>With the above code in place, I was successful in choosing a file to upload, and by clicking the upload button, getting my data processed as planned.  In my ruby code I am validating that the user actually choose a file, else I present an error.  However, we would like to catch the &lsquo;no file chosen&rsquo; issue before being processed by our controller.  Yup, you guessed it &ndash; we need some more javascript.</p>

<p>I updated my previously created function, uploadFile() with the following:</p>

<p>```
app/assets/javascript/nurny/validation.js
function uploadFile() {
  $(&lsquo;#upload-button&rsquo;).click(function() {</p>

<pre><code>var $form = $('#upload-file');
var $uploadedFiles = $('#upload_file');

if ($uploadedFiles.length &lt;= 0) {
  displayFlashError("You have not chosen a file.");
  return false;
}

$form.submit();
return true;
</code></pre>

<p>  });
}
```</p>

<p>To my surprise, nothing happened.  In fact, now my Upload File form wouldn&rsquo;t work at all.  Argh!  Back to Chrome and the Developer Tools.  Using the console feature, I tried out a few things to see what going on:</p>

<p>```
[no file chosen]
var $uploadedFiles = $(&lsquo;#upload_file&rsquo;);
undefined
$uploadedFiles
[<input type=​"file" name=​"upload_file" id=​"upload_file" tabindex=​"3017">​]
$uploadedFiles.length
1</p>

<p>[a file was chosen]
var $uploadedFiles = $(&lsquo;#upload_file&rsquo;);
undefined
[<input type=​"file" name=​"upload_file" id=​"upload_file" tabindex=​"3017">​]
$uploadedFiles.length
1
```</p>

<p>Hmmm, whether a file has been selected or not, I am getting a length of 1.  Obviously I&rsquo;m doing something wrong.  Off to the net to search for possible solutions.  I like to give credit to the following Stack Overflow <a href="http://stackoverflow.com/questions/833012/how-to-validate-a-file-upload-field-using-javascript-jquery">entry</a></p>

<p>Using what I learned from the above link, and first testing it in Chromes' Developer Tools, I updated my code as illustrated below:</p>

<p><code>
[console - Development Tools]
var $uploadedFiles = $('#upload_file').val();
undefined
$uploadedFiles
"C:\fakepath\sample_file_good-info.csv"
$uploadedFiles.length
44
</code></p>

<p>```
app/assets/javascript/nurny/validation.js
function uploadFile() {
  $(&lsquo;#upload-button&rsquo;).click(function() {</p>

<pre><code>var $form = $('#upload-file');
var $uploadedFiles = $('#upload_file').val();

if ($uploadedFiles.length &lt;= 0) {
  displayFlashError("You have not chosen a file.");
  return false;
}

$form.submit();
return true;
</code></pre>

<p>  });
}
```</p>

<p>This wraps up today&rsquo;s post, but hopefully you will find it useful.  I have spent a lot time recently, debugging using pry, that I had to dust off another very valuable tool in my tool box.  No, not my hammer, but the handy Developer Tools in Chrome.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Unexcused Absence]]></title>
    <link href="http://hogihung.github.io/blog/2015/05/05/unexcused-absence/"/>
    <updated>2015-05-05T10:15:14-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/05/05/unexcused-absence</id>
    <content type="html"><![CDATA[<p>The dedicated and faithful reader of this old guy, would have noticed an extended
silence in this corner of the web.  I have, as the automated voice message of my
sons school would say, &ldquo;an unexcused absence.&rdquo;  While I won&rsquo;t make any excuses, I
would like to share what has kept me away from my writing.</p>

<p>Back in March I started to learn Swift by attending the Udacity iOS online program.
Udacity has partnered with the company I work at.  After successful completion of
the course, my company will reimburse me for the tuition.  About two weeks into
my training, the family and I went on a cruise.  Though I brought my laptop and
study material, I didn&rsquo;t spend much time Swift.</p>

<p>After our trip, and a hop-skip-jump over a week, it was time for Ancient City Ruby.
I enjoyed this years ACR conference, though I would have preferred a bit more
technical meat and less of the social fluffy stuff.  However, the most significant
part of ACR for me was meeting with another Ruby developer and getting accepted to
work part-time on a neat project.</p>

<p>The part-time project is my first &ldquo;real-world&rdquo; Ruby app that I&rsquo;ve been a part of.
Though I&rsquo;ve worked on some training apps or personal Rails apps, they have all been
small in scale compared to this new gig.  Being new to the project, and not knowing
much outside my experience with smaller apps, I&rsquo;ve been spending a lot of time
looking around and trying to get familiar with the applications structure.</p>

<p>And then came Rails Conference!  This year the conference was held in Atlanta, GA
which is not too bad a drive from Jacksonville, FL.  I hadn&rsquo;t yet been to a Rails
Conference, so of course I had to go.  Overall I enjoyed the time in Atlanta.  I
ran into a guy, David, who I had meet in Miami at Ruby Conf 2013.  Also, I got to
spend time with another developer that is working on the same project that I mentioned
above.</p>

<p>After the conference, I have been spending most of my evenings working on the
part-time project.  There is a lot to learn, but I am enjoying every minute of it.
The best part of my day is seeing my tests go green and being able to merge and
push my changes.</p>

<p>And that is my excuse, uh I mean my reasons, for not being active here for a while.
I had set a personal goal to publish a new post each month, and I&rsquo;m working to
raise the bar and publish twice a month.  Keep me honest &ndash; smack me via Twitter
if you feel I&rsquo;m slacking.  :)</p>

<p>Ok, now I&rsquo;d like to share a little snippet of code that illustrates something neat
I have learned while working on the part-time gig.  A great benefit of working on
a project with a mentor.  The first example is my original code before refactoring
to make it better and look a lot more &lsquo;Ruby-ish&rsquo;.</p>

<p>```
def is_valid?(product)
  return true if @errors.nil?
  @errors.each do |error|</p>

<pre><code>if error.has_key?(product)
  return false
end
</code></pre>

<p>  end
  return true
end</p>

<p>def errored_price(product)
  return nil if @errors.nil?
  @errors.each do |error|</p>

<pre><code>if error.has_key?(product)
  return error[product]
end
</code></pre>

<p>  end
  return nil
end
```</p>

<p>And now the reveal &ndash; the pretty version which accomplishes the same thing.  Note
that during the refactor we re-named a few things, but the overall result was the
same.</p>

<p>```
def is_valid?(product)
  return true if @errors.nil?
  return false if @errors.include?(product)
  return true
end</p>

<p>def clock_price(product, eor_price)
  return price if @new_prices.nil?
  return @new_prices[product]
end
```</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Form, Simply Confused]]></title>
    <link href="http://hogihung.github.io/blog/2015/03/31/simple-form-simply-confused/"/>
    <updated>2015-03-31T08:45:15-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/03/31/simple-form-simply-confused</id>
    <content type="html"><![CDATA[<p>While working on the Flex Blogger project, and studying the Bourbon website, in particular the <a href="http://refills.bourbon.io/">refills</a> side of the house, I liked the way their navigation bar looked.  In particular, I wanted to implement the search box feature.</p>

<p>So I grabbed their sample code and added it to the Flex Blogger project.  At first, I just brought over the raw html and eventually broke the code up into partials.  To keep things simple, I will focus on the syntax directly related to the search function, as seen below:</p>

<p>```
  <div class="navigation-tools"></p>

<pre><code>  &lt;div class="search-bar"&gt;
    &lt;form role="search"&gt;
      &lt;input type="search" placeholder="Enter Search" /&gt;
      &lt;button type="submit"&gt;
        &lt;img src="https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/search-icon.png" alt="Search Icon"&gt;
      &lt;/button&gt;
    &lt;/form&gt;
  &lt;/div&gt;
  &lt;a href="javascript:void(0)" class="sign-up"&gt;Sign Up&lt;/a&gt;
&lt;/div&gt;
</code></pre>

<p>  </div>
```</p>

<p>In the Flex Blogger project, as with most of the Rails projects I have worked on, I&rsquo;ve used <a href="https://github.com/plataformatec/simple_form">simple form</a>.  I use simple form simply because it was used in all the tutorials and learning material that I have digested.  So my mind focuses on simple form and I try to address any scenario that needs a form, by using <em>Simple Form</em>.</p>

<p>To help me work through my nav-bar search code, I refereneced some existing code in the Flex project, the category form partial:</p>

<p>```
// _form.html.erb</p>

<div id="category-form">
  <%= simple_form_for(@category) do |f| %>
    <%= f.error_notification %>

    <div class="form-inputs">
      <%= f.input :description %>
    </div>

    <div class="form-actions">
      <%= f.button :submit %>
    </div>
  <% end %>
  <br>
</div>


<p>```</p>

<p>I struggled a bit trying to get the search in the nav bar to work with Simple Form.  After trying different things I reached out to a buddy, Shaun, who has helped me in the past.  We paired for a bit and after listening to what I was trying to do, and what I had tried, he asked me a <em>simple</em> question: &ldquo;Why aren&rsquo;t you using a form_tag?&rdquo;</p>

<p>Huh?  I thought that because I was using Simple Form that I needed to work within the boundaries of it.  I didn&rsquo;t realize that I could mix things when needed.  So off we went to the <a href="http://api.rubyonrails.org/">rails api</a> and searched for &lsquo;form_tag&rsquo;.</p>

<p>You should be able to find form_tag under the ActionView::Helpers::FormTagHelper section.  From the documentation:</p>

<h4>form_tag(url_for_options = {}, options = {}, &amp;block) <BR></h4>

<blockquote><p>Starts a form tag that points the action to an url configured with url_for_options just like ActionController::Base#url_for. The method for the form defaults to POST.</p></blockquote>

<p>After the lesson, and referring to the api docs, the solution we used was as follows:</p>

<p>```
// _search_bar.html.erb</p>

<div class="navigation-tools">
  <div class="search-bar">
    <%= form_tag("/search") do %>
      <%= text_field_tag :query, nil, placeholder: "Enter Search", type: "search" %>
      <%= button_tag type: "submit", id: "search-query" do %>
        <img src="https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/search-icon.png", alt: "Search Icon" >
      <% end %>
    <% end %>
  </div>
</div>


<p>```</p>

<p>I am <em>simply</em> amazed at how there is something new to learn just about everyday.  Just when I thought I was really comfortable with working things out with Rails/Ruby, I come across an opportunity to expand my ole grey matter.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[At Sea Without The Net]]></title>
    <link href="http://hogihung.github.io/blog/2015/03/29/at-sea-without-the-net/"/>
    <updated>2015-03-29T20:49:35-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/03/29/at-sea-without-the-net</id>
    <content type="html"><![CDATA[<p>Two weeks ago from today, at about this time I was kicked back in the main show room of the <strong>ms Nieuw Amsterdam</strong> waiting for the opening act to begin.  With a full stomach from an awesome meal, and a refreshing drink in hand, I was in full relax mode.  The last thing I was thinking about was code.</p>

<p>When I woke up, Monday morning, I had an itching to crack open the laptop and work on some things I had left hanging from two days prior.  But first, a quick stop for breakfast, then I headed to the ships library.  I was knocking out tasks one by one, committing away locally on my laptop.  Then instinctively, my muscle memory kicked in and before I could catch what I was doing, I typed:</p>

<p><code>
git push origin master
</code></p>

<p>Duh!  You are on a ship, in the Caribbean, without a connection to the net.  No big deal, I can push my stuff to github when I return home.</p>

<p>I continued working on different things until I found myself stuck &ndash; I needed to refer to the api docs or some type of reference.  I was on vacation &ndash; the smart thing to do would have been to shut down my laptop and go relax.  Can you guess what I did?</p>

<p>Perhaps the thick-headed Irish blood in me, I decided to find a solution.  After a little digging, I found some gold nuggets in the following path:  ~/.gem/ruby/2.1.5/gems/rails-4.1.7/guides/source/</p>

<p>Reviewing some of the files in the above directory, I was able to get an answer for what I was looking for.  Saved my work, closed the laptop and headed to the gangway to catch a tender to a beautiful private island.</p>

<p>Later that day, while chatting with my dad, he let me know that he purchased a block of 200 minutes of internet time.  Satellite internet is not very fast, but good enough for quick browsing or checking of email.</p>

<p>I knew that I&rsquo;d be cracking open the laptop from time-to-time, and working on Flex Blogger as well as an app for my day job.  But I didn&rsquo;t want to burn through those sacred internet minutes when I needed to review either the Ruby or Rails APIs.  Surely there had to be a better way.  Of course there is, and I found the following site:</p>

<p><a href="https://rubydocs.org/">https://rubydocs.org/</a></p>

<p>One can visit the above site and download a local copy of the Ruby and/or Rails APIs.  The neat thing is, you can choose which version or Ruby or Rails that you want to download the documentation for.  Neat!</p>

<p>With a local copy of the documentation I was needing, I pushed my committed changes from the previous day, then logged out &ndash; only used about 15 minutes of our satellite internet.  :)</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning From Test Suite Aggravation]]></title>
    <link href="http://hogihung.github.io/blog/2015/02/17/learning-from-test-suite-aggrevation/"/>
    <updated>2015-02-17T07:55:00-05:00</updated>
    <id>http://hogihung.github.io/blog/2015/02/17/learning-from-test-suite-aggrevation</id>
    <content type="html"><![CDATA[<p>In my previous <a href="http://oldguynewtrick.com/blog/2015/02/03/gathering-of-some-newbs/">post</a> I spoke about the Flex Blogger project.  Josh introduced us to a new component called ckeditor.  Ckeditor is a javascript based gui text editor.  After using ckeditor I thought it would be beneficial to add it to another application I created for my day job &ndash; HarePD.</p>

<p>Before starting on new features, I will fire off my test suite to make sure everything is still green.  For me I just type:  rspec</p>

<p>I love seeing all that green!  Next, I created a branch to work on this new feature, and updated my Gemfile:</p>

<p>```
git checkout -b add_ckeditor
vim Gemfile</p>

<p>{added}
gem &lsquo;ckeditor&rsquo;
```</p>

<p>You can get more information regarding how to setup ckeditor in your rails application by visiting <a href="https://github.com/galetahub/ckeditor">here</a></p>

<p>With the new gem added, and minor updates made in the appropriate view file, _form.html.slim, it was time to re-run my test suite.  Things were looking good as I saw green, green, green.  Then, as my tests executed on the scenarios that used ckeditor, I started to see red.  No big deal I thought, probably a simple change.  Below is an example of one of my tests that was failing:</p>

<p>```
spec/support/issues_helper.rb</p>

<p>def create_issue
  click_link &lsquo;Add Issue&rsquo;
  fill_in &lsquo;Title&rsquo;, with: &lsquo;Cert Expiration&rsquo;
  fill_in &lsquo;Description&rsquo;, with: &lsquo;SSL Cert Expiration&rsquo;
  select(&lsquo;2&rsquo;, :from => &lsquo;User level&rsquo;)
  select(&lsquo;Linux&rsquo;, :from => &lsquo;Os&rsquo;)
  click_button &lsquo;Submit&rsquo;
end
```</p>

<p>Ok, this should be an easy fix.  I inspected the ckeditor element on my webpage using the Chrome Dev Tools, and got the new name &ndash; issue_description.  So I updated the tests that were using &lsquo;Description&rsquo; and replaced with &lsquo;issue_description.&rsquo;  I ran a focused test, on just one scenario and it went green.  Next, I ran all the tests in that particular spec file and again I had a combination of green and red.  Argh!  I took notice of all the failed tests and ran them each one-by-one.  They all passed &ndash; they were all green when executed on their own.  Argh f#@% damnit!</p>

<p>Many hours passed as well as changes here and there to try and get things working.  To keep this post fairly short, I&rsquo;m going to jump to the solution.  After some research and trying different solutions, I stumbled upon the following:</p>

<p>```
Create a new file:
spec/support/ckeditor_helper.rb</p>

<p>def fill_in_ckeditor(locator, params = {})
  locator = find(&lsquo;label&rsquo;, text: locator)[:for] if page.has_css?(&lsquo;label&rsquo;, text: locator)
  page.execute_script &lt;&lt;-SCRIPT</p>

<pre><code>  var ckeditor = CKEDITOR.instances.#{locator}
  ckeditor.setData('#{params[:with]}')
  ckeditor.focus()
  ckeditor.updateElement()
</code></pre>

<p>  SCRIPT
end
```</p>

<p>With the above in place, I refactored my create_issue method from above to read as follows:</p>

<p><code>
def create_issue
  click_link 'Add Issue'
  fill_in 'Title', with: 'Cert Expiration'
  fill_in_ckeditor 'Description', with: 'SSL Cert Expiration'
  select('2', :from =&gt; 'User level')
  select('Linux', :from =&gt; 'Os')
  click_button 'Submit'
end
</code></p>

<p>After making the above changes, I ran my tests for the single spec file and to my delight, everything was green.  Now the real moment of truth &ndash; run the entire test suite.  A smile slowly expanded on my face as all the green scrolled by without a single pixel of red!</p>

<p>Although this issue aggravated me for a bit, the end result was much happiness and joy.  Not to mention I learned a few cool new things here and there in the process.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
</feed>
