<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Old Guy, New Trick]]></title>
  <link href="http://hogihung.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://hogihung.github.io/"/>
  <updated>2015-05-05T08:34:49-04:00</updated>
  <id>http://hogihung.github.io/</id>
  <author>
    <name><![CDATA[Ho Gi Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[An Unexused Absence]]></title>
    <link href="http://hogihung.github.io/blog/2015/05/05/unexcused-absence/"/>
    <updated>2015-05-05T09:34:14-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/05/05/unexcused-absence</id>
    <content type="html"><![CDATA[<p>The dedicated and faithful reader of this old guy, would have noticed an extended
silence in this corner of the web.  I have, as the automated voice message of my
sons school would say, &ldquo;an unexcused absence.&rdquo;  While I won&rsquo;t make any excuses, I
would like to share what has kept me away from my writing.</p>

<p>Back in March I started to learn Swift by attending the Udacity iOS online program.
Udacity has partnered with the company I work at.  After successful completion of
the course, my company will re-imburse me for the tuition.  About two weeks into
my training, the family and I went on a cruise.  Though I brought my laptop and
study material, I didn&rsquo;t spend much time Swift.</p>

<p>After our trip, and a hop-skip-jump over a week, it was time for Ancient City Ruby.
I enjoyed this years ACR conference, though I would have preferred a bit more
technical meat and less of the social fluffy stuff.  However, the most signficant
part of ACR for me was meeting with another Ruby developer and getting accepted to
work part-time on a neat project.</p>

<p>The part-time project is my first &ldquo;real-world&rdquo; Ruby app that I&rsquo;ve been a part of.
Though I&rsquo;ve worked on some training apps or personal Rails apps, they have all been
small in scale compared to this new gig.  Being new to the project, and not knowing
much outside my experience with smaller apps, I&rsquo;ve been spending a lot of time
looking around and trying to get familiar with the applications structure.</p>

<p>And then came Rails Conference!  This year the conference was held in Atlanta, GA
which is not too bad a drive from Jacksonville, FL.  I hadn&rsquo;t yet been to a Rails
Conference, so of course I had to go.  Overall I enjoyed the time in Atlanta.  I
ran into a guy, David, who I had meet in Miami at Ruby Conf 2013.  Also, I got to
spend time with another developer that is working on the same project that I mentioned
above.</p>

<p>After the conference, I have been spending most of my evenings working on the
part-time project.  There is a lot to learn, but I am enjoying every minute of it.
The best part of my day is seeing my tests go green and being able to merge and
push my changes.</p>

<p>And that is my excuse, uh I mean my reasons, for not being active here for a while.
I had set a personal goal to publish a new post each month, and I&rsquo;m working to
raise the bar and publish twice a month.  Keep me honest &ndash; smack me via Twitter
if you feel I&rsquo;m slacking.  :)</p>

<p>Ok, now I&rsquo;d like to share a little snippet of code that illustrates something neat
I have learned while working on the part-time gig.  A great benefit of working on
a project with a mentor.  The first example is my original code before refactoring
to make it better and look a lot more &lsquo;Rubyish&rsquo;.</p>

<p>```
def is_valid?(product)
  return true if @errors.nil?
  @errors.each do |error|</p>

<pre><code>if error.has_key?(product)
  return false
end
</code></pre>

<p>  end
  return true
end</p>

<p>def errored_price(product)
  return nil if @errors.nil?
  @errors.each do |error|</p>

<pre><code>if error.has_key?(product)
  return error[product]
end
</code></pre>

<p>  end
  return nil
end
```</p>

<p>And now the reveal &ndash; the pretty version which accomplishes the same thing.  Note
that during the refactor we re-named a few things, but the overall result was the
same.</p>

<p>```
def is_valid?(product)
  return true if @errors.nil?
  return false if @errors.include?(product)
  return true
end</p>

<p>def clock_price(product, eor_price)
  return price if @new_prices.nil?
  return @new_prices[product]
end
```</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Form, Simply Confused]]></title>
    <link href="http://hogihung.github.io/blog/2015/03/31/simple-form-simply-confused/"/>
    <updated>2015-03-31T08:45:15-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/03/31/simple-form-simply-confused</id>
    <content type="html"><![CDATA[<p>While working on the Flex Blogger project, and studying the Bourbon website, in particular the <a href="http://refills.bourbon.io/">refills</a> side of the house, I liked the way their navigation bar looked.  In particular, I wanted to implement the search box feature.</p>

<p>So I grabbed their sample code and added it to the Flex Blogger project.  At first, I just brought over the raw html and eventually broke the code up into partials.  To keep things simple, I will focus on the syntax directly related to the search function, as seen below:</p>

<p>```
  <div class="navigation-tools"></p>

<pre><code>  &lt;div class="search-bar"&gt;
    &lt;form role="search"&gt;
      &lt;input type="search" placeholder="Enter Search" /&gt;
      &lt;button type="submit"&gt;
        &lt;img src="https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/search-icon.png" alt="Search Icon"&gt;
      &lt;/button&gt;
    &lt;/form&gt;
  &lt;/div&gt;
  &lt;a href="javascript:void(0)" class="sign-up"&gt;Sign Up&lt;/a&gt;
&lt;/div&gt;
</code></pre>

<p>  </div>
```</p>

<p>In the Flex Blogger project, as with most of the Rails projects I have worked on, I&rsquo;ve used <a href="https://github.com/plataformatec/simple_form">simple form</a>.  I use simple form simply because it was used in all the tutorials and learning material that I have digested.  So my mind focuses on simple form and I try to address any scenario that needs a form, by using <em>Simple Form</em>.</p>

<p>To help me work through my nav-bar search code, I refereneced some existing code in the Flex project, the category form partial:</p>

<p>```
// _form.html.erb</p>

<div id="category-form">
  <%= simple_form_for(@category) do |f| %>
    <%= f.error_notification %>

    <div class="form-inputs">
      <%= f.input :description %>
    </div>

    <div class="form-actions">
      <%= f.button :submit %>
    </div>
  <% end %>
  <br>
</div>


<p>```</p>

<p>I struggled a bit trying to get the search in the nav bar to work with Simple Form.  After trying different things I reached out to a buddy, Shaun, who has helped me in the past.  We paired for a bit and after listening to what I was trying to do, and what I had tried, he asked me a <em>simple</em> question: &ldquo;Why aren&rsquo;t you using a form_tag?&rdquo;</p>

<p>Huh?  I thought that because I was using Simple Form that I needed to work within the boundaries of it.  I didn&rsquo;t realize that I could mix things when needed.  So off we went to the <a href="http://api.rubyonrails.org/">rails api</a> and searched for &lsquo;form_tag&rsquo;.</p>

<p>You should be able to find form_tag under the ActionView::Helpers::FormTagHelper section.  From the documentation:</p>

<h4>form_tag(url_for_options = {}, options = {}, &amp;block) <BR></h4>

<blockquote><p>Starts a form tag that points the action to an url configured with url_for_options just like ActionController::Base#url_for. The method for the form defaults to POST.</p></blockquote>

<p>After the lesson, and referring to the api docs, the solution we used was as follows:</p>

<p>```
// _search_bar.html.erb</p>

<div class="navigation-tools">
  <div class="search-bar">
    <%= form_tag("/search") do %>
      <%= text_field_tag :query, nil, placeholder: "Enter Search", type: "search" %>
      <%= button_tag type: "submit", id: "search-query" do %>
        <img src="https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/search-icon.png", alt: "Search Icon" >
      <% end %>
    <% end %>
  </div>
</div>


<p>```</p>

<p>I am <em>simply</em> amazed at how there is something new to learn just about everyday.  Just when I thought I was really comfortable with working things out with Rails/Ruby, I come across an opportunity to expand my ole grey matter.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[At Sea Without The Net]]></title>
    <link href="http://hogihung.github.io/blog/2015/03/29/at-sea-without-the-net/"/>
    <updated>2015-03-29T20:49:35-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/03/29/at-sea-without-the-net</id>
    <content type="html"><![CDATA[<p>Two weeks ago from today, at about this time I was kicked back in the main show room of the <strong>ms Nieuw Amsterdam</strong> waiting for the opening act to begin.  With a full stomach from an awesome meal, and a refreshing drink in hand, I was in full relax mode.  The last thing I was thinking about was code.</p>

<p>When I woke up, Monday morning, I had an itching to crack open the laptop and work on some things I had left hanging from two days prior.  But first, a quick stop for breakfast, then I headed to the ships library.  I was knocking out tasks one by one, committing away locally on my laptop.  Then instinctively, my muscle memory kicked in and before I could catch what I was doing, I typed:</p>

<p><code>
git push origin master
</code></p>

<p>Duh!  You are on a ship, in the Caribbean, without a connection to the net.  No big deal, I can push my stuff to github when I return home.</p>

<p>I continued working on different things until I found myself stuck &ndash; I needed to refer to the api docs or some type of reference.  I was on vacation &ndash; the smart thing to do would have been to shut down my laptop and go relax.  Can you guess what I did?</p>

<p>Perhaps the thick-headed Irish blood in me, I decided to find a solution.  After a little digging, I found some gold nuggets in the following path:  ~/.gem/ruby/2.1.5/gems/rails-4.1.7/guides/source/</p>

<p>Reviewing some of the files in the above directory, I was able to get an answer for what I was looking for.  Saved my work, closed the laptop and headed to the gangway to catch a tender to a beautiful private island.</p>

<p>Later that day, while chatting with my dad, he let me know that he purchased a block of 200 minutes of internet time.  Satellite internet is not very fast, but good enough for quick browsing or checking of email.</p>

<p>I knew that I&rsquo;d be cracking open the laptop from time-to-time, and working on Flex Blogger as well as an app for my day job.  But I didn&rsquo;t want to burn through those sacred internet minutes when I needed to review either the Ruby or Rails APIs.  Surely there had to be a better way.  Of course there is, and I found the following site:</p>

<p><a href="https://rubydocs.org/">https://rubydocs.org/</a></p>

<p>One can visit the above site and download a local copy of the Ruby and/or Rails APIs.  The neat thing is, you can choose which version or Ruby or Rails that you want to download the documentation for.  Neat!</p>

<p>With a local copy of the documentation I was needing, I pushed my committed changes from the previous day, then logged out &ndash; only used about 15 minutes of our satellite internet.  :)</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning From Test Suite Aggravation]]></title>
    <link href="http://hogihung.github.io/blog/2015/02/17/learning-from-test-suite-aggrevation/"/>
    <updated>2015-02-17T07:55:00-05:00</updated>
    <id>http://hogihung.github.io/blog/2015/02/17/learning-from-test-suite-aggrevation</id>
    <content type="html"><![CDATA[<p>In my previous <a href="http://oldguynewtrick.com/blog/2015/02/03/gathering-of-some-newbs/">post</a> I spoke about the Flex Blogger project.  Josh introduced us to a new component called ckeditor.  Ckeditor is a javascript based gui text editor.  After using ckeditor I thought it would be beneficial to add it to another application I created for my day job &ndash; HarePD.</p>

<p>Before starting on new features, I will fire off my test suite to make sure everything is still green.  For me I just type:  rspec</p>

<p>I love seeing all that green!  Next, I created a branch to work on this new feature, and updated my Gemfile:</p>

<p>```
git checkout -b add_ckeditor
vim Gemfile</p>

<p>{added}
gem &lsquo;ckeditor&rsquo;
```</p>

<p>You can get more information regarding how to setup ckeditor in your rails application by visiting <a href="https://github.com/galetahub/ckeditor">here</a></p>

<p>With the new gem added, and minor updates made in the appropriate view file, _form.html.slim, it was time to re-run my test suite.  Things were looking good as I saw green, green, green.  Then, as my tests executed on the scenarios that used ckeditor, I started to see red.  No big deal I thought, probably a simple change.  Below is an example of one of my tests that was failing:</p>

<p>```
spec/support/issues_helper.rb</p>

<p>def create_issue
  click_link &lsquo;Add Issue&rsquo;
  fill_in &lsquo;Title&rsquo;, with: &lsquo;Cert Expiration&rsquo;
  fill_in &lsquo;Description&rsquo;, with: &lsquo;SSL Cert Expiration&rsquo;
  select(&lsquo;2&rsquo;, :from => &lsquo;User level&rsquo;)
  select(&lsquo;Linux&rsquo;, :from => &lsquo;Os&rsquo;)
  click_button &lsquo;Submit&rsquo;
end
```</p>

<p>Ok, this should be an easy fix.  I inspected the ckeditor element on my webpage using the Chrome Dev Tools, and got the new name &ndash; issue_description.  So I updated the tests that were using &lsquo;Description&rsquo; and replaced with &lsquo;issue_description.&rsquo;  I ran a focused test, on just one scenario and it went green.  Next, I ran all the tests in that particular spec file and again I had a combination of green and red.  Argh!  I took notice of all the failed tests and ran them each one-by-one.  They all passed &ndash; they were all green when executed on their own.  Argh f#@% damnit!</p>

<p>Many hours passed as well as changes here and there to try and get things working.  To keep this post fairly short, I&rsquo;m going to jump to the solution.  After some research and trying different solutions, I stumbled upon the following:</p>

<p>```
Create a new file:
spec/support/ckeditor_helper.rb</p>

<p>def fill_in_ckeditor(locator, params = {})
  locator = find(&lsquo;label&rsquo;, text: locator)[:for] if page.has_css?(&lsquo;label&rsquo;, text: locator)
  page.execute_script &lt;&lt;-SCRIPT</p>

<pre><code>  var ckeditor = CKEDITOR.instances.#{locator}
  ckeditor.setData('#{params[:with]}')
  ckeditor.focus()
  ckeditor.updateElement()
</code></pre>

<p>  SCRIPT
end
```</p>

<p>With the above in place, I refactored my create_issue method from above to read as follows:</p>

<p><code>
def create_issue
  click_link 'Add Issue'
  fill_in 'Title', with: 'Cert Expiration'
  fill_in_ckeditor 'Description', with: 'SSL Cert Expiration'
  select('2', :from =&gt; 'User level')
  select('Linux', :from =&gt; 'Os')
  click_button 'Submit'
end
</code></p>

<p>After making the above changes, I ran my tests for the single spec file and to my delight, everything was green.  Now the real moment of truth &ndash; run the entire test suite.  A smile slowly expanded on my face as all the green scrolled by without a single pixel of red!</p>

<p>Although this issue aggravated me for a bit, the end result was much happiness and joy.  Not to mention I learned a few cool new things here and there in the process.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Error Deploying to Production on Heroku]]></title>
    <link href="http://hogihung.github.io/blog/2014/12/30/deploy-error-heroku/"/>
    <updated>2014-12-30T08:00:25-05:00</updated>
    <id>http://hogihung.github.io/blog/2014/12/30/deploy-error-heroku</id>
    <content type="html"><![CDATA[<p>I have been making progress with a personal application that I am working on.  In the early days of development, I had deployed a version of the application to Heroku &ndash; and it worked fine at that time.  Fast forward 6 months or so and lots of changes.  I deployed to Heroku and received an error when trying to view the website:</p>

<p>```
heroku logs</p>

<p>2014-12-25T01:17:54.017424+00:00 heroku[web.1]: State changed from starting to crashed
2014-12-25T01:17:55.195360+00:00 heroku[router]: at=error code=H10 desc=&ldquo;App crashed&rdquo; method=GET path=&ldquo;/&rdquo; host=example.herokuapp.com request_id=0c587d48-ac93-4bce-91bc-9d2de62e6a86 fwd=&ldquo;73.53.247.100&rdquo; dyno= connect= service= status=503 bytes=
2014-12-25T01:17:55.719076+00:00 heroku[router]: at=error code=H10 desc=&ldquo;App crashed&rdquo; method=GET path=&ldquo;/favicon.ico&rdquo; host=example.herokuapp.com request_id=d586d82a-8c27-4f57-b5f1-cf2b55c155d7 fwd=&ldquo;73.53.247.100&rdquo; dyno= connect= service= status=503 bytes=
```</p>

<p>That error made no sense to me.  What the heck, I know the favicon.ico file exists, and why can&rsquo;t I get to the root path?  So I went to the rails console via heroku:</p>

<p>```
heroku run rails console</p>

<p>Running <code>rails console</code> attached to terminal&hellip; up, run.9397
/app/app/models/connexion.rb:1:in <code>&lt;top (required)&gt;': superclass mismatch for class Nurny (TypeError)
  from /app/vendor/bundle/ruby/2.1.0/gems/activesupport-4.1.7/lib/active_support/dependencies.rb:247:in</code>require'
  from /app/vendor/bundle/ruby/2.1.0/gems/activesupport-4.1.7/lib/active_support/dependencies.rb:247:in `block in require'
```</p>

<p>Note that I am substituting my real class name with a bogus one, &lsquo;Nurny&rsquo;, for this example.</p>

<p>Ok, now I get an error that looks like a real error, though I didn&rsquo;t understand it.  Luckily this all occurred the night before our weekly morning Code and Coffee.  So I brought the issue up and Micah gave me a hand for a while, having me try different things.</p>

<p>The conflict only shows when trying to run in a production environment.  I had a model for &lsquo;Nurny&rsquo; that had a class defined of Nurny.  However, I also have a model concern, for queries, with a class of &lsquo;Nurny&rsquo; which was the cause of the issue.</p>

<p>So, now how can I fix this?  I tried a simple rename of the concern, changing the line:</p>

<p>```
BEFORE
class Nurny</p>

<p>AFTER
class NurnyQry
```</p>

<p>But that spurred a flurry of new problems.  Luckily I found another solution while thinking through this issue.  Why did the app work fine in a development rails environment, but not in production.  Now I must confess I&rsquo;m not sure if my solution will have a profound negative effect, but so far I have not encountered any issues.  The solution lies in the config/environments/production.rb file:</p>

<p>```
BEFORE:
config.eager_load = true</p>

<p>AFTER:
config.eager_load = false
```</p>

<p>And that simple configuration change fixed my issue!</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
</feed>
