<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Old Guy, New Trick]]></title>
  <link href="http://hogihung.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://hogihung.github.io/"/>
  <updated>2015-01-07T20:56:54-05:00</updated>
  <id>http://hogihung.github.io/</id>
  <author>
    <name><![CDATA[Ho Gi Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Error Deploying to Production on Heroku]]></title>
    <link href="http://hogihung.github.io/blog/2014/12/30/deploy-error-heroku/"/>
    <updated>2014-12-30T08:00:25-05:00</updated>
    <id>http://hogihung.github.io/blog/2014/12/30/deploy-error-heroku</id>
    <content type="html"><![CDATA[<p>I have been making progress with a personal application that I am working on.  In the early days of development, I had deployed a version of the application to Heroku &ndash; and it worked fine at that time.  Fast forward 6 months or so and lots of changes.  I deployed to Heroku and received an error when trying to view the website:</p>

<p>```
heroku logs</p>

<p>2014-12-25T01:17:54.017424+00:00 heroku[web.1]: State changed from starting to crashed
2014-12-25T01:17:55.195360+00:00 heroku[router]: at=error code=H10 desc=&ldquo;App crashed&rdquo; method=GET path=&ldquo;/&rdquo; host=example.herokuapp.com request_id=0c587d48-ac93-4bce-91bc-9d2de62e6a86 fwd=&ldquo;73.53.247.100&rdquo; dyno= connect= service= status=503 bytes=
2014-12-25T01:17:55.719076+00:00 heroku[router]: at=error code=H10 desc=&ldquo;App crashed&rdquo; method=GET path=&ldquo;/favicon.ico&rdquo; host=example.herokuapp.com request_id=d586d82a-8c27-4f57-b5f1-cf2b55c155d7 fwd=&ldquo;73.53.247.100&rdquo; dyno= connect= service= status=503 bytes=
```</p>

<p>That error made no sense to me.  What the heck, I know the favicon.ico file exists, and why can&rsquo;t I get to the root path?  So I went to the rails console via heroku:</p>

<p>```
heroku run rails console</p>

<p>Running <code>rails console</code> attached to terminal&hellip; up, run.9397
/app/app/models/connexion.rb:1:in <code>&lt;top (required)&gt;': superclass mismatch for class Nurny (TypeError)
  from /app/vendor/bundle/ruby/2.1.0/gems/activesupport-4.1.7/lib/active_support/dependencies.rb:247:in</code>require'
  from /app/vendor/bundle/ruby/2.1.0/gems/activesupport-4.1.7/lib/active_support/dependencies.rb:247:in `block in require'
```</p>

<p>Note that I am substituting my real class name with a bogus one, &lsquo;Nurny&rsquo;, for this example.</p>

<p>Ok, now I get an error that looks like a real error, though I didn&rsquo;t understand it.  Luckily this all occurred the night before our weekly morning Code and Coffee.  So I brought the issue up and Micah gave me a hand for a while, having me try different things.</p>

<p>The conflict only shows when trying to run in a production environment.  I had a model for &lsquo;Nurny&rsquo; that had a class defined of Nurny.  However, I also have a model concern, for queries, with a class of &lsquo;Nurny&rsquo; which was the cause of the issue.</p>

<p>So, now how can I fix this?  I tried a simple rename of the concern, changing the line:</p>

<p>```
BEFORE
class Nurny</p>

<p>AFTER
class NurnyQry
```</p>

<p>But that spurred a flurry of new problems.  Luckily I found another solution while thinking through this issue.  Why did the app work fine in a development rails environment, but not in production.  Now I must confess I&rsquo;m not sure if my solution will have a profound negative effect, but so far I have not encountered any issues.  The solution lies in the config/environments/production.rb file:</p>

<p>```
BEFORE:
config.eager_load = true</p>

<p>AFTER:
config.eager_load = false
```</p>

<p>And that simple configuration change fixed my issue!</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL Issue on Mac OSX]]></title>
    <link href="http://hogihung.github.io/blog/2014/10/27/mysql-issue-osx/"/>
    <updated>2014-10-27T18:40:45-04:00</updated>
    <id>http://hogihung.github.io/blog/2014/10/27/mysql-issue-osx</id>
    <content type="html"><![CDATA[<p>Most of my Rails projects, for personal use and education, have been using Postgresql or SQLite for the datbase backend.  At work our primary database is Oracle with a dash of MySQL.  Recently we decided to use MySQL with all future development, and migrate our tools/applications that use Oracle to use MySQL.</p>

<p>I downloaded and installed MySQL by grabbing the installer from the MySQL website:  <a href="http://dev.mysql.com/downloads/mysql/">http://dev.mysql.com/downloads/mysql/</a> and getting the version for my operating system &ndash; OS X Mavericks.</p>

<p>However, with this version installed I was having issues with bundler and getting the mysql gem to compile.  I tried a few solutions that I found on the internet, but none of them were working.</p>

<p>I found some other people who had issues, when using OSX Mavericks, with the MySQL installer.  They solved the issue by removing MySQL that was installed from the download via dev.mysql.com and then re-installing using Homebrew.</p>

<p>This solution worked for me as well.  I found this a bit odd, because earlier in the year I had issues with installing Postgres via Homebrew.  The solution for Postgres was to remove the Homebrew installation and use the installer from the Postgres site.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brew A Fix for Imagemagic and Paperclip]]></title>
    <link href="http://hogihung.github.io/blog/2014/10/27/brew-a-fix-for-imagemagick-and-paperclip/"/>
    <updated>2014-10-27T18:05:25-04:00</updated>
    <id>http://hogihung.github.io/blog/2014/10/27/brew-a-fix-for-imagemagick-and-paperclip</id>
    <content type="html"><![CDATA[<p>While working on a Rails project last week I encountered an issue where some of my tests were failing.  It had been a while since I worked on this project so I had to re-familiarize myself with what was going on.</p>

<p>The tests were failing when editing a profile and adding an image.  I popped over to the browser and performed a manual test to get a better idea of what was going on.  That is when I saw the following error: <em>&ldquo;Paperclip::Errors::NotIdentifiedByImageMagickError&rdquo;</em></p>

<p>To attempt to fix the issue, I first performed a simple uninstall and re-install of imagemagic using homebrew:</p>

<p><code>
brew uninstall imagemagick
brew install imagemagick
</code></p>

<p>This didn&rsquo;t solve the problem.  Imagemagic has a command line utility, convert, which one can use to see if the application is working.  I tried a simple test:</p>

<p><code>
convert moonie.jpg moon.png
</code></p>

<p>But I continued to get errors even with that simple test.  So off to the internet for some deep research.  I came across the following steps, which solved the issue I was having.</p>

<p>```
brew update
brew doctor
brew uninstall libtool
brew uninstall imagemagic</p>

<p>cd /Library/Caches/Homebrew
rm imagemag*
rm libtool-2.4.2.tar.gz</p>

<p>brew doctor
brew install libtool &mdash;universal
brew link libool &mdash;force
brew install imagemagic &mdash;build-from-source
```</p>

<p>After completing the above steps, the command line tool, convert was successful.  I re-tested the Rails application, both manually, and via my test suite, and all was green again.</p>

<p>Related resources used during my quest for the fix:
<a href="https://github.com/thoughtbot/paperclip/issues/1205">https://github.com/thoughtbot/paperclip/issues/1205</a>
<a href="http://www.imagemagick.org/script/convert.php">http://www.imagemagick.org/script/convert.php</a>
<a href="http://stackoverflow.com/questions/7412208/imagemagick-and-os-x-lion-trouble">http://stackoverflow.com/questions/7412208/imagemagick-and-os-x-lion-trouble</a></p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing to_csv Method]]></title>
    <link href="http://hogihung.github.io/blog/2014/09/23/testing-to-csv-method/"/>
    <updated>2014-09-23T09:32:37-04:00</updated>
    <id>http://hogihung.github.io/blog/2014/09/23/testing-to-csv-method</id>
    <content type="html"><![CDATA[<p>Last week I covered a topic that resurfaced while I am in the process of upgrading one of our apps from Ruby 1.9 and Rails 3.x. When I wrote that application I was a raw recruit &ndash; fresh to Ruby and Rails and just trying to get the idea to work.</p>

<p>But as I&rsquo;ve been improving my skills and expanding the ole grey matter, I wanted to write this new version, fully tested.  In the application there is a need to be able to export the data to a CSV formatted file.  I had the code from the old version of the app, and migrated it over.  However, I challenged myself to figure out how to write a test for the to_csv method in Baytech model.</p>

<p>Below is the code from the Baytech model:</p>

<p>```
def self.to_csv
  CSV.generate(col_sep: &lsquo;:&rsquo;) do |csv|</p>

<pre><code>all.each do |baytech|
  port = "X"
  csv &lt;&lt; [baytech.name, baytech.phone_num, baytech.ip_addr, port, baytech.modem_type, port]
</code></pre>

<p>  end
end
```</p>

<p>I know the method works, as it has been working fine for 9 months or so now.  But I really wanted to figure out how to write a test for this method.  After much trial and error, along with research via books and google, I came up with the following solution:</p>

<p>```
describe Baytech, &lsquo;#to_csv&rsquo; do
  let(:baytech) { FactoryGirl.create(:baytech) }</p>

<p>  before do</p>

<pre><code>baytech
</code></pre>

<p>  end</p>

<p>  it { expect(Baytech.to_csv).to match /#{baytech.name}:#{baytech.phone_num}:#{baytech.ip_addr}:X:1:X/ }
end
```</p>

<p>You may notice in the above code that I am referencing a Factory.  Here is a short version of that factory file:</p>

<p>```
FactoryGirl.define do
  factory :baytech do</p>

<pre><code>sequence(:name) {|n| "jaxfl0#{n}b9" }
sequence(:ip_addr) {|n| "10.1.2.#{n}" }
phone_num "7091234384"
region "USA"
modem_type "1"
ip_method "ssh"
active true
has_modem_line true
updated_by "cd1234"

{-snip-}
</code></pre>

<p>  end
end
```</p>

<p>The keen eye may have caught something interesting in the to_csv method.  I&rsquo;m using an option, col_sep: &lsquo;:&rsquo; which allows me to use the : character as the delimiter instead of the default comma.</p>

<p>With the test in place, and passing, I felt better about the code in my to_csv method.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflecting on Rails Inflections]]></title>
    <link href="http://hogihung.github.io/blog/2014/09/16/reflect-on-inflectors/"/>
    <updated>2014-09-16T08:26:35-04:00</updated>
    <id>http://hogihung.github.io/blog/2014/09/16/reflect-on-inflectors</id>
    <content type="html"><![CDATA[<p>Recently I re-discovered an issue I ran into about 8 months ago.  I am re-writing an application I created for work.  The first version was written in Ruby 1.9.x and Rails 3.x.  I built the app using sticks and glue &ndash; no testing.</p>

<p>We are migrating to Ruby 2.1.x and Rails 4.1.x and rather than copy over the app and tweak it, I wanted to take a better approach, a TDD approach.</p>

<p>It is a pretty simple application, with two main models &ndash; Baytech and Device.  A Baytech can have zero to many devices, and a device should only belong to one baytech.</p>

<p>To frameout my two models I used the following:</p>

<p><code>
rails g model baytech
rails g model device
</code></p>

<p>Everything seemed fine at first.  Until I started writing tests and code then I re-discovered a blast from the past.  What I didn&rsquo;t catch was that Rails, with its vast knowledge, pluralized both baytech and device as:</p>

<blockquote><ul>
<li>bayteches</li>
<li>devices</li>
</ul>
</blockquote>

<p>Now, all is cool with the plural version of device as devices.  But the plural of baytech is baytechs.  Oh crap, what do I do?</p>

<p>The first time this happened to me, it took me a while to figure out what the heck was going on.  Eventually all roads led me to the file config/initializers/inflections.rb</p>

<p>Taking a look inside this file, I found the following, or something similar:</p>

<p>```</p>

<h1>Be sure to restart your server when you modify this file.</h1>

<h1>Add new inflection rules using the following format. Inflections</h1>

<h1>are locale specific, and you may define rules for as many different</h1>

<h1>locales as you wish. All of these examples are active by default:</h1>

<h1>ActiveSupport::Inflector.inflections(:en) do |inflect|</h1>

<h1>inflect.plural /^(ox)$/i, &lsquo;\1en&rsquo;</h1>

<h1>inflect.singular /^(ox)en/i, &lsquo;\1&rsquo;</h1>

<h1>inflect.irregular &lsquo;person&rsquo;, &lsquo;people&rsquo;</h1>

<h1>inflect.uncountable %w( fish sheep )</h1>

<h1>end</h1>

<h1>These inflection rules are supported but not enabled by default:</h1>

<h1>ActiveSupport::Inflector.inflections(:en) do |inflect|</h1>

<h1>inflect.acronym &lsquo;RESTful&rsquo;</h1>

<h1>end</h1>

<p>```</p>

<p>To cure my issue, I had to make one small change to this file, making use of inflect.irregular:</p>

<p><code>
ActiveSupport::Inflector.inflections do |inflect|
  inflect.irregular 'baytech', 'baytechs'
end
</code></p>

<p>Once that change was made, anytime there was a need for the plural version of baytech, Rails knew to use baytechs.  Yeah!</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
</feed>
