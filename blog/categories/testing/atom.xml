<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | Old Guy, New Trick]]></title>
  <link href="http://hogihung.github.io/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://hogihung.github.io/"/>
  <updated>2015-03-29T20:34:25-04:00</updated>
  <id>http://hogihung.github.io/</id>
  <author>
    <name><![CDATA[Ho Gi Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning From Test Suite Aggravation]]></title>
    <link href="http://hogihung.github.io/blog/2015/02/17/learning-from-test-suite-aggrevation/"/>
    <updated>2015-02-17T07:55:00-05:00</updated>
    <id>http://hogihung.github.io/blog/2015/02/17/learning-from-test-suite-aggrevation</id>
    <content type="html"><![CDATA[<p>In my previous <a href="http://oldguynewtrick.com/blog/2015/02/03/gathering-of-some-newbs/">post</a> I spoke about the Flex Blogger project.  Josh introduced us to a new component called ckeditor.  Ckeditor is a javascript based gui text editor.  After using ckeditor I thought it would be beneficial to add it to another application I created for my day job &ndash; HarePD.</p>

<p>Before starting on new features, I will fire off my test suite to make sure everything is still green.  For me I just type:  rspec</p>

<p>I love seeing all that green!  Next, I created a branch to work on this new feature, and updated my Gemfile:</p>

<p>```
git checkout -b add_ckeditor
vim Gemfile</p>

<p>{added}
gem &lsquo;ckeditor&rsquo;
```</p>

<p>You can get more information regarding how to setup ckeditor in your rails application by visiting <a href="https://github.com/galetahub/ckeditor">here</a></p>

<p>With the new gem added, and minor updates made in the appropriate view file, _form.html.slim, it was time to re-run my test suite.  Things were looking good as I saw green, green, green.  Then, as my tests executed on the scenarios that used ckeditor, I started to see red.  No big deal I thought, probably a simple change.  Below is an example of one of my tests that was failing:</p>

<p>```
spec/support/issues_helper.rb</p>

<p>def create_issue
  click_link &lsquo;Add Issue&rsquo;
  fill_in &lsquo;Title&rsquo;, with: &lsquo;Cert Expiration&rsquo;
  fill_in &lsquo;Description&rsquo;, with: &lsquo;SSL Cert Expiration&rsquo;
  select(&lsquo;2&rsquo;, :from => &lsquo;User level&rsquo;)
  select(&lsquo;Linux&rsquo;, :from => &lsquo;Os&rsquo;)
  click_button &lsquo;Submit&rsquo;
end
```</p>

<p>Ok, this should be an easy fix.  I inspected the ckeditor element on my webpage using the Chrome Dev Tools, and got the new name &ndash; issue_description.  So I updated the tests that were using &lsquo;Description&rsquo; and replaced with &lsquo;issue_description.&rsquo;  I ran a focused test, on just one scenario and it went green.  Next, I ran all the tests in that particular spec file and again I had a combination of green and red.  Argh!  I took notice of all the failed tests and ran them each one-by-one.  They all passed &ndash; they were all green when executed on their own.  Argh f#@% damnit!</p>

<p>Many hours passed as well as changes here and there to try and get things working.  To keep this post fairly short, I&rsquo;m going to jump to the solution.  After some research and trying different solutions, I stumbled upon the following:</p>

<p>```
Create a new file:
spec/support/ckeditor_helper.rb</p>

<p>def fill_in_ckeditor(locator, params = {})
  locator = find(&lsquo;label&rsquo;, text: locator)[:for] if page.has_css?(&lsquo;label&rsquo;, text: locator)
  page.execute_script &lt;&lt;-SCRIPT</p>

<pre><code>  var ckeditor = CKEDITOR.instances.#{locator}
  ckeditor.setData('#{params[:with]}')
  ckeditor.focus()
  ckeditor.updateElement()
</code></pre>

<p>  SCRIPT
end
```</p>

<p>With the above in place, I refactored my create_issue method from above to read as follows:</p>

<p><code>
def create_issue
  click_link 'Add Issue'
  fill_in 'Title', with: 'Cert Expiration'
  fill_in_ckeditor 'Description', with: 'SSL Cert Expiration'
  select('2', :from =&gt; 'User level')
  select('Linux', :from =&gt; 'Os')
  click_button 'Submit'
end
</code></p>

<p>After making the above changes, I ran my tests for the single spec file and to my delight, everything was green.  Now the real moment of truth &ndash; run the entire test suite.  A smile slowly expanded on my face as all the green scrolled by without a single pixel of red!</p>

<p>Although this issue aggravated me for a bit, the end result was much happiness and joy.  Not to mention I learned a few cool new things here and there in the process.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing to_csv Method]]></title>
    <link href="http://hogihung.github.io/blog/2014/09/23/testing-to-csv-method/"/>
    <updated>2014-09-23T09:32:37-04:00</updated>
    <id>http://hogihung.github.io/blog/2014/09/23/testing-to-csv-method</id>
    <content type="html"><![CDATA[<p>Last week I covered a topic that resurfaced while I am in the process of upgrading one of our apps from Ruby 1.9 and Rails 3.x. When I wrote that application I was a raw recruit &ndash; fresh to Ruby and Rails and just trying to get the idea to work.</p>

<p>But as I&rsquo;ve been improving my skills and expanding the ole grey matter, I wanted to write this new version, fully tested.  In the application there is a need to be able to export the data to a CSV formatted file.  I had the code from the old version of the app, and migrated it over.  However, I challenged myself to figure out how to write a test for the to_csv method in Baytech model.</p>

<p>Below is the code from the Baytech model:</p>

<p>```
def self.to_csv
  CSV.generate(col_sep: &lsquo;:&rsquo;) do |csv|</p>

<pre><code>all.each do |baytech|
  port = "X"
  csv &lt;&lt; [baytech.name, baytech.phone_num, baytech.ip_addr, port, baytech.modem_type, port]
</code></pre>

<p>  end
end
```</p>

<p>I know the method works, as it has been working fine for 9 months or so now.  But I really wanted to figure out how to write a test for this method.  After much trial and error, along with research via books and google, I came up with the following solution:</p>

<p>```
describe Baytech, &lsquo;#to_csv&rsquo; do
  let(:baytech) { FactoryGirl.create(:baytech) }</p>

<p>  before do</p>

<pre><code>baytech
</code></pre>

<p>  end</p>

<p>  it { expect(Baytech.to_csv).to match /#{baytech.name}:#{baytech.phone_num}:#{baytech.ip_addr}:X:1:X/ }
end
```</p>

<p>You may notice in the above code that I am referencing a Factory.  Here is a short version of that factory file:</p>

<p>```
FactoryGirl.define do
  factory :baytech do</p>

<pre><code>sequence(:name) {|n| "jaxfl0#{n}b9" }
sequence(:ip_addr) {|n| "10.1.2.#{n}" }
phone_num "7091234384"
region "USA"
modem_type "1"
ip_method "ssh"
active true
has_modem_line true
updated_by "cd1234"

{-snip-}
</code></pre>

<p>  end
end
```</p>

<p>The keen eye may have caught something interesting in the to_csv method.  I&rsquo;m using an option, col_sep: &lsquo;:&rsquo; which allows me to use the : character as the delimiter instead of the default comma.</p>

<p>With the test in place, and passing, I felt better about the code in my to_csv method.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
</feed>
