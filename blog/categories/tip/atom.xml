<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tip | Old Guy, New Trick]]></title>
  <link href="http://hogihung.github.io/blog/categories/tip/atom.xml" rel="self"/>
  <link href="http://hogihung.github.io/"/>
  <updated>2015-10-27T09:02:42-04:00</updated>
  <id>http://hogihung.github.io/</id>
  <author>
    <name><![CDATA[Ho Gi Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Order is Important...]]></title>
    <link href="http://hogihung.github.io/blog/2015/07/28/order-is-important/"/>
    <updated>2015-07-28T09:15:14-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/07/28/order-is-important</id>
    <content type="html"><![CDATA[<p>Order is important, sometimes.  Recently I was assigned a task passed on by QA.  In the application that I am working on,
users can download files from the &ldquo;Download&rdquo; section after they login.  Depending on their role, admin or client, the downloadable
file links will have slightly different names.</p>

<p>In an effort to keep things unified, QA felt that the order of those links is important &ndash; they need to match.  Prior to this
revelation, our tests only confirmed that the links existed, were clickable, and the contents of the files was accurate.  Below
is a sample of the new steps I created to get things going:</p>

<p>```
When  I log in as user
And   I follow &ldquo;Downloads&rdquo;
Then  I confirm the following downloadable files:
  | order | description       |
  | 1     | My Bids           |
  | 2     | My Results        |
  | 3     | My Product Status |
  | 4     | My Bidder Status  |
And  I follow &ldquo;Logout&rdquo;</p>

<p>When  I log in as admin
And   I follow &ldquo;Downloads&rdquo;
Then  I confirm the following downloadable files:
  | order | description        |
  | 1     | All Bids           |
  | 2     | All Results        |
  | 3     | All Product Status |
  | 4     | All Bidder Status  |
And  I follow &ldquo;Logout&rdquo;
```</p>

<p>I struggled for a bit to figure out, how can I write my Cucumber steps so that I verify the data, in the exact order as
specified in the feature file.  My original steps above didn&rsquo;t have an order column.  But as I thought things through, I
added the order attribute as seen above.  Now what?  How do I build my steps so that they can actually confirm the order
of my rows in the download link table?  After some trial and errors, and many searches I put together the following:</p>

<p>```
Then /^I confirm the following downloadable files:$/ do |table|
  table.hashes.each do |line|</p>

<pre><code>within('tbody') do
  row_num = "tr:nth-child(#{line[:order]})"
  within(row_num) do
    expect(page).to have_text line[:description]
  end
end
</code></pre>

<p>  end
end
```</p>

<p>Pretty neat, eh?  With this method, you do not need to ensure that your steps in the feature file are in the exact desired
order.  Just be sure to have the correct value in the order column.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Borrowing From Ruby Tapas]]></title>
    <link href="http://hogihung.github.io/blog/2014/11/04/borrow-a-tapa-convention/"/>
    <updated>2014-11-04T07:20:45-05:00</updated>
    <id>http://hogihung.github.io/blog/2014/11/04/borrow-a-tapa-convention</id>
    <content type="html"><![CDATA[<p>I have many learning tools in my arsenal including Code School, Thoughtbot/Upcase, RailsCasts, Ruby Tapas, and too many other Internet based free resources to list.  But today I want to talk tapas, and borrow something that I learned from watching many episodes of Ruby Tapas.</p>

<p>As I&rsquo;ve watched various episodes, I kept saying to myself, how is Avdi executing code right from within his text editor?  Is this some time of post production trickery?  Perhaps a green screen based laptop with a dash of After Effects?  But after some research, I learned that is wasn&rsquo;t some fancy magic, but rather an ability within his editor.  I believe that editor to be Emacs.</p>

<p>Well, I&rsquo;m a Sublime Text user, and slowly dabbling with Vim.  So off to the online oracles to see if I could find a solution that would work in Sublime.  I did indeed find some solutions that said they were doing what Avdi can do &ndash; even referencing that they had the same desire as me.  However, I was not successful with getting Sublime to work the way I was expecting.  After spending several hours trying to force it to work, I gave up.  And I had a thought &ndash; surely this would be easier to get working with Vim.  :)</p>

<p>Getting the Tapas style in-line Ruby code execution to work in Vim was nice and easy.  I followed the instructions <a href="http://commandercoriander.net/blog/2012/10/10/evaluate-lines-of-ruby-in-vim/">here</a> and was up in running with very little effort.  For those that don&rsquo;t want leave from this fabulous reading, I&rsquo;ll summarize what needs to be done, first starting with the installation of a gem:</p>

<p><code>
gem install rcodetools
</code></p>

<p>Now we need to add a plugin to Vim.  Depending on your setup, you may need to add the .vim/bundle directory in your home directory.  But I already had this setup, so all I needed to do was the following:</p>

<p><code>
cd ~
cd .vim/bundle
git clone https://github.com/t9md/vim-ruby-xmpfilter.git
</code></p>

<p>For a final bit of setup/configuration, we need to take a trip in editing the ~/.vimrc or ~/.vimrc.local file so we can do some mapping:</p>

<p>```
nmap <buffer> <F4> <Plug>(xmpfilter-mark)
xmap <buffer> <F4> <Plug>(xmpfilter-mark)
imap <buffer> <F4> <Plug>(xmpfilter-mark)</p>

<p>nmap <buffer> <F5> <Plug>(xmpfilter-run)
xmap <buffer> <F5> <Plug>(xmpfilter-run)
imap <buffer> <F5> <Plug>(xmpfilter-run)
```</p>

<p>The above mapping will allows us to mark (F4) what line(s) we want to see the results for of executing the ruby code, which we accomplish by pressing F5.  Let&rsquo;s step through an example to see how this works.  I&rsquo;ll show the example file through the various stages.</p>

<p><code>
1 class Person
2   attr_accessor :name, :age
3
4   def initialize(name)
5     self.name = name
6     self.age = "Does it matter?"
7   end
8 end
9
10 p = Person.new('Kevin')
11 p.name
12 p.age
</code></p>

<p>Next we will press F4 for the code we want to evaluate, line 11 below:</p>

<p><code>
1 class Person
2   attr_accessor :name, :age
3
4   def initialize(name)
5     self.name = name
6     self.age = "Does it matter?"
7   end
8 end
9
10 p = Person.new('Kevin')
11 p.name # =&gt;
12 p.age
</code></p>

<p>And finally, EXECUTE (F5):</p>

<p><code>
1 class Person
2   attr_accessor :name, :age
3
4   def initialize(name)
5     self.name = name
6     self.age = "Does it matter?"
7   end
8 end
9
10 p = Person.new('Kevin')
11 p.name # =&gt; "Kevin"
12 p.age
</code></p>

<p>Pretty neat, eh?  Borrowing this workflow from Ruby Tapas will now help me when I&rsquo;m following along with each episode.  Now I just need to get better with Vim.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
</feed>
