<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rake | Old Guy, New Trick]]></title>
  <link href="http://hogihung.github.io/blog/categories/rake/atom.xml" rel="self"/>
  <link href="http://hogihung.github.io/"/>
  <updated>2014-03-29T20:26:57-04:00</updated>
  <id>http://hogihung.github.io/</id>
  <author>
    <name><![CDATA[Ho Gi Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My First Rake Task]]></title>
    <link href="http://hogihung.github.io/blog/2014/03/29/my-first-rake-task/"/>
    <updated>2014-03-29T20:13:12-04:00</updated>
    <id>http://hogihung.github.io/blog/2014/03/29/my-first-rake-task</id>
    <content type="html"><![CDATA[<p>At my day job we primarly use Perl for both our scripting and tool type applications as well as using it with a splatter of PHP for some of our web page applications.  I&rsquo;m trying to get Ruby, and Rails, in the door and see if I can convert others over to Ruby.  I must confess, it is a steep upward battle.</p>

<p>However, I do have a web application on our development server and am preparing to deploy it to production.  It is a fairly simple web application that has three models and will enable us to manage the data elements of our Out-of-Band equipment and the connected devices.</p>

<p>When I first started the development, I manually created some test records.  Then I added a handful more via the seeds.rb file.  But when it came time to populating the database with real data, I needed a better solution.  I had compiled some data in Excel files with over 400 out-of-band devices and over 5,000 connected devices.  No way I was going to manually enter all of those.</p>

<p>This was earlier in the week, and luckily I was able to ask some of the gurus at our weekly Code &amp; Coffee how I could tackle this.  Micah suggested I use the CSV library in Ruby and see about populating the data that way.  He gave me a great nudge in the right direction.</p>

<p>I was fumbling around looking for answers when I saw some information about creating rake tasks.  So I studied up, and created the following rake file:</p>

<p>```
require &lsquo;csv&rsquo;</p>

<p>oobs_file = &ldquo;/path/to/file/oob_devices.CSV&rdquo;
devices_file = &ldquo;/path/to/file/connected_devices.CSV&rdquo;</p>

<p>namespace :oob_import do
  task :oobs => :environment do</p>

<pre><code>Oob.delete_all
CSV.foreach(oobs_file, headers: true) do |row|
  p row
  Oob.create!(row.to_hash)
end
</code></pre>

<p>  end</p>

<p>  task :devices => :environment do</p>

<pre><code>Device.delete_all
CSV.foreach(devices_file, headers: true) do |row|
  oob = Oob.find_by_name("#{row[0]}")
  oob.devices.create!(name: "#{row[1]}", pri_port: "#{row[2]}", active: "#{row[3]}", updated_by: "#{row[4]}")

  p "Oob_ID: #{oob.id}, name: #{row[1]}, pri_port: #{row[2]}, active: #{row[3]}, updated_by: #{row[4]}"
end
</code></pre>

<p>  end</p>

<p>  task :all => [:oobs, :devices] do</p>

<pre><code>puts "Refreshing Oob and Device Models"
</code></pre>

<p>  end
end
```</p>

<p>To import my data, I executed the rake task as follows:</p>

<p><code>
rake oob_import:oobs
rake oob_import:devices
</code></p>

<p>I could have used the taks, <em>oob_import:all</em> but I wanted to work in two steps so I could watch for errors and fix things while I was building this file.</p>

<p>I can&rsquo;t properly convey the joy and happiness I felt when I saw this new tool work!  It really made my day, especially as it took me a couple of hours of research, trial and error.  But this will make things really easy for me when I move the application to production.</p>

<p>Note that I have the code that starts with &ldquo;p&rdquo; in there so I have a nice visual of how the task is running.  If you don&rsquo;t need that visual confirmation, you could remove those two lines of code.</p>
]]></content>
  </entry>
  
</feed>
