<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | Old Guy, New Trick]]></title>
  <link href="http://hogihung.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://hogihung.github.io/"/>
  <updated>2015-11-04T19:29:28-05:00</updated>
  <id>http://hogihung.github.io/</id>
  <author>
    <name><![CDATA[Ho Gi Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gooey Vim]]></title>
    <link href="http://hogihung.github.io/blog/2015/11/04/gooey-vim/"/>
    <updated>2015-11-04T19:06:14-05:00</updated>
    <id>http://hogihung.github.io/blog/2015/11/04/gooey-vim</id>
    <content type="html"><![CDATA[<p>Today I&rsquo;d to visit vims' cousing, MacVim.  While I do spend most of my time in what I will call &ldquo;normal&rdquo; vim, that is vim executed from the command line of my terminal (iTerm), there are times when I want to work in MacVim.  I tend to reserve MacVim to acts as my general use notepad.  The main reason I treat it as a scratch/notepad instead of vim, is that I find copying and pasting to be more user friendly with MacVim.  There are some other aspects I like, for example being able to scroll using the trackpad on my laptop or via the scroll wheel on a mouse.</p>

<p>While watching some episodes of Elixir Sips and LearnElixir I noticed that the presenters had a pretty cool setup in vim.  I did a little research and found that they use a plugin similar to Airline.  The plugin, and ones similar to it, dress up your vim environment.  So I installed one of the plugins, <em>bling/vim-airline</em> and ran into issues with the display &ndash; it was a little bit off.  Through more research, I discovered that I needed to install the Powerline family of fonts.  Once that was completed my vim environment looked awesome.</p>

<p>However, when I launched MacVim, I was having issues.  Back to the web and more reading.  I found that I needed to update my gvimrc file to setup the use of a guifont. Initially I tried updating the gvimrc and set the following:</p>

<p><code>
set guifont=Source\ Code\ Pro\ Powerline:14
</code></p>

<p>I tried a few different combinations, with out success.  So I decided to play around a bit.  First I launched MacVim (mvim).  Then I tried to manually set the font using:</p>

<p><code>
:set guifont=SourceCodeProforPowerline -&gt; didn't work
:set guifont=Source\ Code\ Pro\ for\ Powerline:14  -&gt; didn't work
</code></p>

<p>I stumbled upon a answer over at StackOverflow and noticed that the poster included an &lsquo;h&rsquo; just before the font size.  So I gave that a try:</p>

<p><code>
:set guifont=Source\ Code\ Pro\ for\ Powerline:h14  -&gt; WORKED!
</code></p>

<p>Cool, I got that to work.  But dang, I don&rsquo;t want to have to type that everytime I launch MacVim and want my environment to be all gooey-fied.  So I decided to make a modification to my .vimrc file:</p>

<p>```
&ldquo; set a guifont for MacVim and Powerline Font support
&rdquo; You can now use Cntrl+g to turn on the font setting below
nnoremap &lt;C-g> :set guifont=Source\ Code\ Pro\ for\ Powerline:h14<cr></p>

<p>Tip: You can also use this format:
set guifont=Source_Code_Pro_for_Powerline:h14
```</p>

<p>While I like, and use the Cntrl+g option as indicated above, my stubbornish really wanted to get the font working via an update to the gvimrc file.  Once I saw, through my trial and errors above, what MacVim was looking for in the ways of proper syntax, I re-visited updating the gvimrc file.  So I added the following to my gvimrc file and restarted MacVim:</p>

<p><code>
set guifont=Source_Code_Pro_for_Powerline:h14
</code></p>

<p>And BAM! my nice gooey font setting was applied.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macro VimOnomics]]></title>
    <link href="http://hogihung.github.io/blog/2015/10/27/macro-vimonomics/"/>
    <updated>2015-10-27T10:01:14-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/10/27/macro-vimonomics</id>
    <content type="html"><![CDATA[<p>Today I would like to share a productivity tip that I learned from my pair/lead developer partner.  Vim continues to surprise me on what seems to be a daily basis.  I know that with my neophyte knowledge with vim, that I&rsquo;m barely scratching the surface.  Ok, let&rsquo;s get down with some Macro Econom&hellip;, I mean VimOnomics.</p>

<p>Recently I was tasked with changing a handful of our fixture *.csv files.  In case you have not yet worked with these types of files, they are a simple text file which use a delimiter, commonly the comma.  For example:</p>

<p><code>
phone_prefix,phone_num,city,state,postal_code
914,2251976,Carmel,New York,10134
</code></p>

<p>Now image a file in the above format, but with hundreds of rows and that we need to change the phone_prefix from 914 to 944.  Also, imagine that we have a dozen or so fixture files that require this update.  Using the power of macros in vim, this can be a relatively easy task.</p>

<p>```
[Open all of our fixture files]
vim spec/fixtures/<em>/</em>.csv</p>

<p>[Record the macro]
qq
:1,$s/^914,/944,/
:w
:n
q
```
To review what the above steps are doing, first we tell vim to start recording using the command qq.  Next, we define our replace command telling vim that we want to replace 914, with 944, and then we write the file using :w to save our changes.  The :n command tells vim to move to the next file and q stops the recording.</p>

<p>With the macro ready to go, we can use @q to launch the macro.  This should bring the next file in the buffer into focus and perform the steps outlined in the macro.  Repeat the @q command until all of your files have been updated.  After feeling the pain of doing manual updates for a while, this tip was much welcomed.</p>

<p>However, we are are not done yet.  We need to address this change of 914 to 944 in our related feature file(s).  Continuing onwards with our example, we will assume that we have an existing feature file with some steps similar to the following (picture dozens if not hundes of lines):</p>

<p>```
  And   I download the csv file report &ldquo;Phone-Records&rdquo; as admin
  Then  the contents of the downloaded &ldquo;Phone-Records&rdquo; report contain:</p>

<pre><code>| text                                          |
| phone_prefix,phone_num,city,state,postal_code |
| 914,2251976,Carmel,New York,10134             |
| 914,2251981,Carmel,New York,10134             |
| 914,2251376,Carmel,New York,10134             |
| 914,2252946,Carmel,New York,10134             |
| 914,2253976,Carmel,New York,10134             |
| 914,2251376,Carmel,New York,10134             |
| 914,2254576,Carmel,New York,10134             |
| 914,2258986,Carmel,New York,10134             |
| 914,2259176,Carmel,New York,10134             |
| 914,2257326,Carmel,New York,10134             |
| 914,2251974,Carmel,New York,10134             |
</code></pre>

<p>```</p>

<p>For our example, assume we have our new data in the file new_phone_prefix.csv:</p>

<p><code>
phone_prefix,phone_num,city,state,postal_code
944,2251976,Carmel,New York,10134
944,2251981,Carmel,New York,10134
944,2251376,Carmel,New York,10134
944,2252946,Carmel,New York,10134
944,2253976,Carmel,New York,10134
944,2251376,Carmel,New York,10134
944,2254576,Carmel,New York,10134
944,2258986,Carmel,New York,10134
944,2259176,Carmel,New York,10134
944,2257326,Carmel,New York,10134
944,2251974,Carmel,New York,10134
</code></p>

<p>And we want to replace our data with new data, or perhaps we are creating the feature steps from scratch.  For our first step, let&rsquo;s create/edit our feature file to have the basics:</p>

<p>```
  And   I download the csv file report &ldquo;Phone-Records&rdquo; as admin
  Then  the contents of the downloaded &ldquo;Phone-Records&rdquo; report contain:</p>

<pre><code>| text                                          |
| phone_prefix,phone_num,city,state,postal_code |
</code></pre>

<p>```</p>

<p>Next, we will yank (y) the new data from the new_phone_prefix.csv file and place (p) them under what we just did:</p>

<p>```
  And   I download the csv file report &ldquo;Phone-Records&rdquo; as admin
  Then  the contents of the downloaded &ldquo;Phone-Records&rdquo; report contain:</p>

<pre><code>| text                                          |
| phone_prefix,phone_num,city,state,postal_code |
</code></pre>

<p>944,2251976,Carmel,New York,10134
944,2251981,Carmel,New York,10134
944,2251376,Carmel,New York,10134
944,2252946,Carmel,New York,10134
944,2253976,Carmel,New York,10134
944,2251376,Carmel,New York,10134
944,2254576,Carmel,New York,10134
944,2258986,Carmel,New York,10134
944,2259176,Carmel,New York,10134
944,2257326,Carmel,New York,10134
944,2251974,Carmel,New York,10134
```</p>

<p>Now we need to move the data to line up with the left hand pipe (|) character.  I will place my cursor over the 9 on the first row of data, then use Cntrl+v to visual select a column, and press j until I have all the records covered.  Then I&rsquo;ll use shift+i to insert and press my space bar 4 times then the | key.  Lastly, remove that line break between our column headers and the data.  You should have something similar to:</p>

<p>```
  And   I download the csv file report &ldquo;Phone-Records&rdquo; as admin
  Then  the contents of the downloaded &ldquo;Phone-Records&rdquo; report contain:</p>

<pre><code>| text                                          |
| phone_prefix,phone_num,city,state,postal_code |
|944,2251976,Carmel,New York,10134
|944,2251981,Carmel,New York,10134
|944,2251376,Carmel,New York,10134
|944,2252946,Carmel,New York,10134
|944,2253976,Carmel,New York,10134
|944,2251376,Carmel,New York,10134
|944,2254576,Carmel,New York,10134
|944,2258986,Carmel,New York,10134
|944,2259176,Carmel,New York,10134
|944,2257326,Carmel,New York,10134
|944,2251974,Carmel,New York,10134
</code></pre>

<p>```</p>

<p>Hang in there, we are almost done.  To wrap this up, we return to using a macro.  I will position my cursor on the first line of data, build a macro, then execute it as follow:</p>

<p><code>
qq
shift+a
|
esc
j
q
10 @q
</code></p>

<p>Assuming you were successful, we should have something similar to:</p>

<p>```
  And   I download the csv file report &ldquo;Phone-Records&rdquo; as admin
  Then  the contents of the downloaded &ldquo;Phone-Records&rdquo; report contain:</p>

<pre><code>| text                                          |
| phone_prefix,phone_num,city,state,postal_code |
| 944,2251976,Carmel,New York,10134             |
| 944,2251981,Carmel,New York,10134             |
| 944,2251376,Carmel,New York,10134             |
| 944,2252946,Carmel,New York,10134             |
| 944,2253976,Carmel,New York,10134             |
| 944,2251376,Carmel,New York,10134             |
| 944,2254576,Carmel,New York,10134             |
| 944,2258986,Carmel,New York,10134             |
| 944,2259176,Carmel,New York,10134             |
| 944,2257326,Carmel,New York,10134             |
| 944,2251974,Carmel,New York,10134             |
</code></pre>

<p>```</p>

<p>The clever eye may have noticed that we executed our macro in a slightly different manner this time &ndash; 10 @q.  After recording the macro for our first row of data, we tell vim to execute the macro ten times by using:  10 @q.</p>

<p>I use this second example, of editting a feature file, more frequently that the first example.  After updating the feature files manually for too many times that I&rsquo;d like to admit to, I finally asked my pair if he knew a better way.  Of course he did, what a silly question.  He showed me the above techniques which saves me a lot of cycles &ndash; time which can be better spent on actual code.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
</feed>
