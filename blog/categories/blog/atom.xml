<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Blog | Old Guy, New Trick]]></title>
  <link href="http://hogihung.github.io/blog/categories/blog/atom.xml" rel="self"/>
  <link href="http://hogihung.github.io/"/>
  <updated>2015-01-06T20:40:40-05:00</updated>
  <id>http://hogihung.github.io/</id>
  <author>
    <name><![CDATA[Ho Gi Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Custom Passwordless SSH Access]]></title>
    <link href="http://hogihung.github.io/blog/2015/01/06/custom-passwordless-ssh/"/>
    <updated>2015-01-06T20:10:14-05:00</updated>
    <id>http://hogihung.github.io/blog/2015/01/06/custom-passwordless-ssh</id>
    <content type="html"><![CDATA[<p>When I created my Digital Ocean VPS I setup SSH Keys for both my main laptop and desktop computers.  I grabbed the appropriate contents from my .pub file and pasted that information on the web form for &lsquo;Add SSH Key&rsquo; under the SSH Keys menu of my droplet.  However, I noticed that each time I would ssh to my server I would be required to input my password.</p>

<p>In this blog posting I will illustrate how I solved this issue and why the word &lsquo;custom&rsquo; appears in the title.  There are many websites that cover how to setup passwordless ssh login.  For example, Digital Ocean has a nice posting: <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2">here</a></p>

<p>However, those instructions, and other like it, assume a plain-vanilla setup.  Of course, I dare to be different.  For example, before I started to solve this puzzle, my ~/.ssh directory had the following:</p>

<p><code>
➜  .ssh  ls -la
total 88
drwx------  11 jfhogarty  staff   374 Jan  6 18:36 .
drwxr-xr-x+ 93 jfhogarty  staff  3162 Jan  6 20:10 ..
-rw-r--r--@  1 jfhogarty  staff  6148 Mar  9  2013 .DS_Store
-rw-------   1 jfhogarty  staff  1766 Mar  2  2013 id_rsa
-rw-r--r--   1 jfhogarty  staff   400 Mar  2  2013 id_rsa.pub
-rw-------   1 jfhogarty  staff   668 Apr 20  2014 jh-mbp_id
-rw-r--r--   1 jfhogarty  staff   614 Apr 20  2014 jh-mbp_id.pub
-rw-r--r--   1 jfhogarty  staff  7162 Jan  5 21:17 known_hosts
➜  .ssh
</code></p>

<p>The id_rsa (private file) and the id_rsa.pub (public file,) are your normal files one would find.  But I&rsquo;ve implemented a &lsquo;best-practice&rsquo; adopted from my day job and I create specific key files for different types of access.  For example, following the instructions in the link above, from the Digital Ocean article, I created the following:</p>

<p><code>
-rw-------   1 jfhogarty  staff   668 Jan  5 21:11 do_id_dsa
-rw-r--r--   1 jfhogarty  staff   614 Jan  5 21:11 do_id_dsa.pub
</code></p>

<p>If you follow the steps from the link, there is one thing that you may need to do in addition to their steps.  Some systems require that you change the file permissions for the authorized_keys file located on your target computer.  For example, the following is how I have the permissions set on my VPS:</p>

<p><code>
➜  .ssh  ls -la
total 12
drwx------  2 jfhogarty jfhogarty 4096 Jan  5 21:16 .
drwxr-xr-x 11 jfhogarty jfhogarty 4096 Jan  6 20:14 ..
-rw-------  1 jfhogarty jfhogarty  614 Jan  5 21:14 authorized_keys
➜  .ssh
</code></p>

<p>I adjusted the permissions using the following syntax:</p>

<p><code>
chmod 600 authorized_keys
</code></p>

<p>After creating the new keys on my laptop, and updating the authorized_keys file on the remote server, I thought surely I should now be able to login without using a password.  I was wrong!  The remote server continued to prompt me for my password.  I decided to call it a night as it was getting late.</p>

<p>While working on a VM issue today for my day job, my internal lightbulb went off and I realized what the problem was.  Lets take a fresh look at the .ssh directory of my laptop:</p>

<p><code>
sh  ls -la
total 88
drwx------  11 jfhogarty  staff   374 Jan  6 18:36 .
drwxr-xr-x+ 93 jfhogarty  staff  3162 Jan  6 20:21 ..
-rw-r--r--@  1 jfhogarty  staff  6148 Mar  9  2013 .DS_Store
-rw-------   1 jfhogarty  staff   668 Jan  5 21:11 do_id_dsa
-rw-r--r--   1 jfhogarty  staff   614 Jan  5 21:11 do_id_dsa.pub
-rw-------   1 jfhogarty  staff  1766 Mar  2  2013 id_rsa
-rw-r--r--   1 jfhogarty  staff   400 Mar  2  2013 id_rsa.pub
-rw-------   1 jfhogarty  staff   668 Apr 20  2014 jh-mbp_id
-rw-r--r--   1 jfhogarty  staff   614 Apr 20  2014 jh-mbp_id.pub
-rw-r--r--   1 jfhogarty  staff  7162 Jan  5 21:17 known_hosts
➜  .ssh
</code></p>

<p>The keen eye might notice that I now have three sets of private/public keys.  However, when I was typing ssh myhostname.com ssh didn&rsquo;t know which files to use, if any.  I was able to prove my theory by trying the following:</p>

<p><code>
ssh -p 9986 -i ~/.ssh/do_id_dsa myhostname.com
</code></p>

<p>And BAM!  No password required to login.  I was on to a solution.  When I had my lightbulb moment, I had remembered that I needed to create a config file in the .ssh directory on my laptop.  Lets take a look at it:</p>

<p>```
➜  .ssh  cat config
Host 10.11.12.13
IdentityFile ~/.ssh/do_id_dsa
Protocol 2</p>

<p>Host myhostname.com
IdentityFile ~/.ssh/do_id_dsa
Protocol 2</p>

<p>➜  .ssh
```</p>

<p>NOTE:  To protect the innocent, the IP Address and *.com name above are fake.  Please substitute those values for your real IP Address and/or domain name.</p>

<p>And that is how I solved my customized passwordless ssh access to my VPS.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Error Deploying to Production on Heroku]]></title>
    <link href="http://hogihung.github.io/blog/2014/12/30/deploy-error-heroku/"/>
    <updated>2014-12-30T08:00:25-05:00</updated>
    <id>http://hogihung.github.io/blog/2014/12/30/deploy-error-heroku</id>
    <content type="html"><![CDATA[<p>I have been making progress with a personal application that I am working on.  In the early days of development, I had deployed a version of the application to Heroku &ndash; and it worked fine at that time.  Fast forward 6 months or so and lots of changes.  I deployed to Heroku and received an error when trying to view the website:</p>

<p>```
heroku logs</p>

<p>2014-12-25T01:17:54.017424+00:00 heroku[web.1]: State changed from starting to crashed
2014-12-25T01:17:55.195360+00:00 heroku[router]: at=error code=H10 desc=&ldquo;App crashed&rdquo; method=GET path=&ldquo;/&rdquo; host=example.herokuapp.com request_id=0c587d48-ac93-4bce-91bc-9d2de62e6a86 fwd=&ldquo;73.53.247.100&rdquo; dyno= connect= service= status=503 bytes=
2014-12-25T01:17:55.719076+00:00 heroku[router]: at=error code=H10 desc=&ldquo;App crashed&rdquo; method=GET path=&ldquo;/favicon.ico&rdquo; host=example.herokuapp.com request_id=d586d82a-8c27-4f57-b5f1-cf2b55c155d7 fwd=&ldquo;73.53.247.100&rdquo; dyno= connect= service= status=503 bytes=
```</p>

<p>That error made no sense to me.  What the heck, I know the favicon.ico file exists, and why can&rsquo;t I get to the root path?  So I went to the rails console via heroku:</p>

<p>```
heroku run rails console</p>

<p>Running <code>rails console</code> attached to terminal&hellip; up, run.9397
/app/app/models/connexion.rb:1:in <code>&lt;top (required)&gt;': superclass mismatch for class Nurny (TypeError)
  from /app/vendor/bundle/ruby/2.1.0/gems/activesupport-4.1.7/lib/active_support/dependencies.rb:247:in</code>require'
  from /app/vendor/bundle/ruby/2.1.0/gems/activesupport-4.1.7/lib/active_support/dependencies.rb:247:in `block in require'
```</p>

<p>Note that I am substituting my real class name with a bogus one, &lsquo;Nurny&rsquo;, for this example.</p>

<p>Ok, now I get an error that looks like a real error, though I didn&rsquo;t understand it.  Luckily this all occurred the night before our weekly morning Code and Coffee.  So I brought the issue up and Micah gave me a hand for a while, having me try different things.</p>

<p>The conflict only shows when trying to run in a production environment.  I had a model for &lsquo;Nurny&rsquo; that had a class defined of Nurny.  However, I also have a model concern, for queries, with a class of &lsquo;Nurny&rsquo; which was the cause of the issue.</p>

<p>So, now how can I fix this?  I tried a simple rename of the concern, changing the line:</p>

<p>```
BEFORE
class Nurny</p>

<p>AFTER
class NurnyQry
```</p>

<p>But that spurred a flurry of new problems.  Luckily I found another solution while thinking through this issue.  Why did the app work fine in a development rails environment, but not in production.  Now I must confess I&rsquo;m not sure if my solution will have a profound negative effect, but so far I have not encountered any issues.  The solution lies in the config/environments/production.rb file:</p>

<p>```
BEFORE:
config.eager_load = true</p>

<p>AFTER:
config.eager_load = false
```</p>

<p>And that simple configuration change fixed my issue!</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aint Your Ruby]]></title>
    <link href="http://hogihung.github.io/blog/2014/11/18/aint-your-ruby/"/>
    <updated>2014-11-18T08:40:25-05:00</updated>
    <id>http://hogihung.github.io/blog/2014/11/18/aint-your-ruby</id>
    <content type="html"><![CDATA[<p>When meeting new people in the programming community, we frequently share what we do in our day jobs.  By day I primarily use Perl, though I have been slowly building up an arsenal of Ruby and Ruby on Rails applications.  But before learning Matz&rsquo;s Ruby, I learned a different flavor of Ruby.  And this &lsquo;aint your ruby.&rsquo;</p>

<p>When I first transitioned to the team I am on now, my primary duties were to provide tier three support of specialized networking equipment.  Our team can be split into two roles:  Tech Support/Project Management and Automation/Programming.  Over time, I migrated over to the Automation side. We use Perl for our tool server scripts and Ruby to get things started.  Off to the internet I went to learn Ruby, only to quickly find that our Ruby was not the Ruby I found online.</p>

<p>The Ruby we use at work stands for:  <strong>R</strong>ules yo<strong>U B</strong>uild <strong>Y</strong>ourself.  I believe the foundation or underlaying language is Java.</p>

<p>In a nutshell, our networking equipment sends events/traps to a trap collector.  That collector then does some processing on the event and forwards to our Ruby system.  We then perform certain actions using our Ruby based on the received alarms/events.  Below is an example code of &lsquo;our&rsquo; Ruby:</p>

<p>```
// Ping failed to LoopBack interface. IP=
// Able to extract an IP Address
rule DI0780_0020
{
  packet = DI0780;
  when
  {</p>

<pre><code>?a: ModemsAlarm(isTypeNull() != 0;
    isStringMatch(?a.getObject(), "^[a-z][a-z][a-z0-9][a-z][a-z][0-9][0-9]+(vmk|vme|irs|url|ur1|ur2|rsi|lri|lri[0-9][0-9][a-z][a-z][a-z]*)") == False;
</code></pre>

<p>  isStringMatch(?a.getService(), &ldquo;ALPHA|BETA&rdquo;) !=0;
  isNameMatch(&ldquo;Ping +failed +to +LoopBack .*IP=&rdquo;) != 0);
  }
  then
  {</p>

<pre><code>modify ?a
{
  setType("DI0780_CiscoInterfaceDown");
  setContainer("IP",?a.getToken("IP= *([0-9]+.[0-9]+.[0-9]+.[0-9]+)",?a.getAlarmText()));
  setContainer("ROUTER_IFNAME","Loopback");
  setContainer("DEVICE_NAME",?a.getToken("([a-z0-9]+).els-an.att.net",?a.getSource()));   
  setContainer("EVENT_CORELATION_NAME",?a.buildString2("%1 %2",?a.getContainer("DEVICE_NAME"),?a.getContainer("IP")));   
  putRubyLog2("DI0780_0020", ?a.buildString1("Received a Generic Ping fail to Loopback alarm, %1", ?a.getName()));            
}
</code></pre>

<p>  }
};
```</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cha-Cha-Cha-Chruby]]></title>
    <link href="http://hogihung.github.io/blog/2014/11/17/Cha-Cha-Cha-Chruby/"/>
    <updated>2014-11-17T20:40:47-05:00</updated>
    <id>http://hogihung.github.io/blog/2014/11/17/Cha-Cha-Cha-Chruby</id>
    <content type="html"><![CDATA[<p>Recently I got a bug, ney rather an itch I needed to scratch.  I have been using RVM for over a year and half.  I have had some issues, but mostly those were due to me learning how to work with RVM.</p>

<p>I was having an odd issue on one of my Macs so I decided to remove RVM and install rbenv.  I shot a tweet out to see if anyone had an opinion about rbenv and I received a reply suggesting I give chruby a chance.  Recently I had listened to an episode of Ruby Rogues <a href="http://devchat.tv/ruby-rogues/169-rr-version-managers-with-michal-papis-mislav-maronic-and-postmodern-mod-iii">#169</a>,  where they talked about RVM, rbenv, and chruby.</p>

<p>So I decied to give chruby a try.  Removing RVM is pretty straight forward.  You should be able to simply run:</p>

<p><code>
rvm implode
</code></p>

<p>Once removed, you may need to edit your .bashrc/.zshrc or *profile file(s) to remove any reference to RVM.</p>

<p>While I really like RVM, I&rsquo;ve always been a bit worried about the magic it performs &ndash; the stuff it does for me that I&rsquo;m not familiar with.  Chruby seemed to be easier for me to grasp.  From my limited understanding, there seems to be less moving parts in chruby vs. RVM.</p>

<p>I&rsquo;m not going to lay out all of the steps to get chruby installed.  The source web pages for chruby and ruby-install are very easy to read and comprehend.</p>

<p><a href="https://github.com/postmodern/chruby">chruby</a><br>
<a href="https://github.com/postmodern/ruby-install">ruby-install</a></p>

<p>It took me a little bit to understand the differences of chruby and how I would use in my environment.  But after getting it running on my laptop, I converted two other Macs, my Ubuntu VM, and my CentOS server to use chruby.</p>

<p>As I said earlier, I do like RVM, and it had served me well.  I still use RVM at my day job on our CentOS servers.  I thought changing from RVM to chruby on those servers would be a good idea, so I attempted to change a development server.  While the removal of RVM and install of Chruby went fine, I ran into a huge issue.  I could not get Passenger to work properly under Chruby.  I&rsquo;m sure the reason is due to my lack of understanding, but I just couldn&rsquo;t afford to figure it out. So I switched back to RVM &ndash; and RVM will stay on our work servers.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Borrowing From Ruby Tapas]]></title>
    <link href="http://hogihung.github.io/blog/2014/11/04/borrow-a-tapa-convention/"/>
    <updated>2014-11-04T07:20:45-05:00</updated>
    <id>http://hogihung.github.io/blog/2014/11/04/borrow-a-tapa-convention</id>
    <content type="html"><![CDATA[<p>I have many learning tools in my arsenal including Code School, Thoughtbot/Upcase, RailsCasts, Ruby Tapas, and too many other Internet based free resources to list.  But today I want to talk tapas, and borrow something that I learned from watching many episodes of Ruby Tapas.</p>

<p>As I&rsquo;ve watched various episodes, I kept saying to myself, how is Avdi executing code right from within his text editor?  Is this some time of post production trickery?  Perhaps a green screen based laptop with a dash of After Effects?  But after some research, I learned that is wasn&rsquo;t some fancy magic, but rather an ability within his editor.  I believe that editor to be Emacs.</p>

<p>Well, I&rsquo;m a Sublime Text user, and slowly dabbling with Vim.  So off to the online oracles to see if I could find a solution that would work in Sublime.  I did indeed find some solutions that said they were doing what Avdi can do &ndash; even referencing that they had the same desire as me.  However, I was not successful with getting Sublime to work the way I was expecting.  After spending several hours trying to force it to work, I gave up.  And I had a thought &ndash; surely this would be easier to get working with Vim.  :)</p>

<p>Getting the Tapas style in-line Ruby code execution to work in Vim was nice and easy.  I followed the instructions <a href="http://commandercoriander.net/blog/2012/10/10/evaluate-lines-of-ruby-in-vim/">here</a> and was up in running with very little effort.  For those that don&rsquo;t want leave from this fabulous reading, I&rsquo;ll summarize what needs to be done, first starting with the installation of a gem:</p>

<p><code>
gem install rcodetools
</code></p>

<p>Now we need to add a plugin to Vim.  Depending on your setup, you may need to add the .vim/bundle directory in your home directory.  But I already had this setup, so all I needed to do was the following:</p>

<p><code>
cd ~
cd .vim/bundle
git clone https://github.com/t9md/vim-ruby-xmpfilter.git
</code></p>

<p>For a final bit of setup/configuration, we need to take a trip in editing the ~/.vimrc or ~/.vimrc.local file so we can do some mapping:</p>

<p>```
nmap <buffer> <F4> <Plug>(xmpfilter-mark)
xmap <buffer> <F4> <Plug>(xmpfilter-mark)
imap <buffer> <F4> <Plug>(xmpfilter-mark)</p>

<p>nmap <buffer> <F5> <Plug>(xmpfilter-run)
xmap <buffer> <F5> <Plug>(xmpfilter-run)
imap <buffer> <F5> <Plug>(xmpfilter-run)
```</p>

<p>The above mapping will allows us to mark (F4) what line(s) we want to see the results for of executing the ruby code, which we accomplish by pressing F5.  Let&rsquo;s step through an example to see how this works.  I&rsquo;ll show the example file through the various stages.</p>

<p><code>
1 class Person
2   attr_accessor :name, :age
3
4   def initialize(name)
5     self.name = name
6     self.age = "Does it matter?"
7   end
8 end
9
10 p = Person.new('Kevin')
11 p.name
12 p.age
</code></p>

<p>Next we will press F4 for the code we want to evaluate, line 11 below:</p>

<p><code>
1 class Person
2   attr_accessor :name, :age
3
4   def initialize(name)
5     self.name = name
6     self.age = "Does it matter?"
7   end
8 end
9
10 p = Person.new('Kevin')
11 p.name # =&gt;
12 p.age
</code></p>

<p>And finally, EXECUTE (F5):</p>

<p><code>
1 class Person
2   attr_accessor :name, :age
3
4   def initialize(name)
5     self.name = name
6     self.age = "Does it matter?"
7   end
8 end
9
10 p = Person.new('Kevin')
11 p.name # =&gt; "Kevin"
12 p.age
</code></p>

<p>Pretty neat, eh?  Borrowing this workflow from Ruby Tapas will now help me when I&rsquo;m following along with each episode.  Now I just need to get better with Vim.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
</feed>
