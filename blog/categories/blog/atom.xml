<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Blog | Old Guy, New Trick]]></title>
  <link href="http://hogihung.github.io/blog/categories/blog/atom.xml" rel="self"/>
  <link href="http://hogihung.github.io/"/>
  <updated>2015-02-17T09:56:09-05:00</updated>
  <id>http://hogihung.github.io/</id>
  <author>
    <name><![CDATA[Ho Gi Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning From Test Suite Aggravation]]></title>
    <link href="http://hogihung.github.io/blog/2015/02/17/learning-from-test-suite-aggrevation/"/>
    <updated>2015-02-17T07:55:00-05:00</updated>
    <id>http://hogihung.github.io/blog/2015/02/17/learning-from-test-suite-aggrevation</id>
    <content type="html"><![CDATA[<p>In my previous <a href="http://oldguynewtrick.com/blog/2015/02/03/gathering-of-some-newbs/">post</a> I spoke about the Flex Blogger project.  Josh introduced us to a new component called ckeditor.  Ckeditor is a javascript based gui text editor.  After using ckeditor I thought it would be beneficial to add it to another application I created for my day job &ndash; HarePD.</p>

<p>Before starting on new features, I will fire off my test suite to make sure everything is still green.  For me I just type:  rspec</p>

<p>I love seeing all that green!  Next, I created a branch to work on this new feature, and updated my Gemfile:</p>

<p>```
git checkout -b add_ckeditor
vim Gemfile</p>

<p>{added}
gem &lsquo;ckeditor&rsquo;
```</p>

<p>You can get more information regarding how to setup ckeditor in your rails application by visiting <a href="https://github.com/galetahub/ckeditor">here</a></p>

<p>With the new gem added, and minor updates made in the appropriate view file, _form.html.slim, it was time to re-run my test suite.  Things were looking good as I saw green, green, green.  Then, as my tests executed on the scenarios that used ckeditor, I started to see red.  No big deal I thought, probably a simple change.  Below is an example of one of my tests that was failing:</p>

<p>```
spec/support/issues_helper.rb</p>

<p>def create_issue
  click_link &lsquo;Add Issue&rsquo;
  fill_in &lsquo;Title&rsquo;, with: &lsquo;Cert Expiration&rsquo;
  fill_in &lsquo;Description&rsquo;, with: &lsquo;SSL Cert Expiration&rsquo;
  select(&lsquo;2&rsquo;, :from => &lsquo;User level&rsquo;)
  select(&lsquo;Linux&rsquo;, :from => &lsquo;Os&rsquo;)
  click_button &lsquo;Submit&rsquo;
end
```</p>

<p>Ok, this should be an easy fix.  I inspected the ckeditor element on my webpage using the Chrome Dev Tools, and got the new name &ndash; issue_description.  So I updated the tests that were using &lsquo;Description&rsquo; and replaced with &lsquo;issue_description.&rsquo;  I ran a focused test, on just one scenario and it went green.  Next, I ran all the tests in that particular spec file and again I had a combination of green and red.  Argh!  I took notice of all the failed tests and ran them each one-by-one.  They all passed &ndash; they were all green when executed on their own.  Argh f#@% damnit!</p>

<p>Many hours passed as well as changes here and there to try and get things working.  To keep this post fairly short, I&rsquo;m going to jump to the solution.  After some research and trying different solutions, I stumbled upon the following:</p>

<p>```
Create a new file:
spec/support/ckeditor_helper.rb</p>

<p>def fill_in_ckeditor(locator, params = {})
  locator = find(&lsquo;label&rsquo;, text: locator)[:for] if page.has_css?(&lsquo;label&rsquo;, text: locator)
  page.execute_script &lt;&lt;-SCRIPT</p>

<pre><code>  var ckeditor = CKEDITOR.instances.#{locator}
  ckeditor.setData('#{params[:with]}')
  ckeditor.focus()
  ckeditor.updateElement()
</code></pre>

<p>  SCRIPT
end
```</p>

<p>With the above in place, I refactored my create_issue method from above to read as follows:</p>

<p><code>
def create_issue
  click_link 'Add Issue'
  fill_in 'Title', with: 'Cert Expiration'
  fill_in_ckeditor 'Description', with: 'SSL Cert Expiration'
  select('2', :from =&gt; 'User level')
  select('Linux', :from =&gt; 'Os')
  click_button 'Submit'
end
</code></p>

<p>After making the above changes, I ran my tests for the single spec file and to my delight, everything was green.  Now the real moment of truth &ndash; run the entire test suite.  A smile slowly expanded on my face as all the green scrolled by without a single pixel of red!</p>

<p>Although this issue aggravated me for a bit, the end result was much happiness and joy.  Not to mention I learned a few cool new things here and there in the process.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Gathering]]></title>
    <link href="http://hogihung.github.io/blog/2015/02/03/gathering-of-some-newbs/"/>
    <updated>2015-02-03T07:50:00-05:00</updated>
    <id>http://hogihung.github.io/blog/2015/02/03/gathering-of-some-newbs</id>
    <content type="html"><![CDATA[<p>A few weeks back I was discussing an idea around the weekly Code and Coffee table.
The idea was a spin on something I saw Nathan Barry discussing over <a href="http://nathanbarry.com/24hours/">here</a>.
I still consider myself a newbie to Ruby, but I wanted to do my own personal hack-a-thon.</p>

<p>Well that idea morphed, or is the cool thing to say, pivoted, to a project that me
and two other new to Ruby programmers would work on. All three of us discussed the
idea of creating something new.  Something no one else has done before.  A blog
written in Ruby on Rails.</p>

<p>Hopefully now you are not looking at your screen with coffee sprayed all over it
due to your laughing.  I know, there have been many, many Blog type projects.  So
why is this one different?  I&rsquo;m not sure it really is.  What I can say is that
project is giving us an opportunity to work together and learn from each other.
Not to say anything bad about you seniors out there, but there are times I feel
that the best way to illustrate that I&rsquo;ve learned something that you have passed
on, is to share that knowledge with others around my level.</p>

<p>So yes, we are making a dynamic blog written in Rails.  If you are interested in
checking it out, you can find it <a href="https://github.com/hogihung/flex_blogger">here</a>.
Please keep in mind that we are still in active development.  I will update the
README file once we are at a point where we think the application is solid.</p>

<p>There are a lot of &lsquo;firsts&rsquo; for me in regards to this project.  This is the first
web application I&rsquo;m working on with more than two people actively working at the
same time.  I&rsquo;m learning how to create and manage pull requests.  I&rsquo;m attempting
to help lead the project and keep all of us updated on the progress.</p>

<p>All three of us have been working with Ruby and Rails for a little bit &ndash; perhaps
a year or year and half.  But there are some other &lsquo;new to us&rsquo; components that we
have choosen to try out.  We decided to bypass Devise and Twitter Bootstrap &ndash; both
things that were comfortable to us.  Instead, we are using several great tools
that <a href="https://github.com/thoughtbot/">Thoughtbot</a> has shared with the community
including:  Bourbon, Neat, Bitters, Refills, Clearance, FactoryGirl and HoundCI.</p>

<p>I welcome any feedback on our project, <strong>Flex Blogger</strong>.  Just shoot me a tweet on
Twitter, or email me.  I&rsquo;m excited to see the final product and have this cool
experience.</p>

<p>I still want to test my skills by doing a personal hack-a-thon, but I need to
convince some of the gurus I know to be my guest drop ins.  :)</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enable Remote Access - Postgres]]></title>
    <link href="http://hogihung.github.io/blog/2015/01/07/enable-remote-access-postgres/"/>
    <updated>2015-01-07T21:00:07-05:00</updated>
    <id>http://hogihung.github.io/blog/2015/01/07/enable-remote-access-postgres</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve been troubleshooting an issue with my pet project.  On my laptop, in a development environment, I didn&rsquo;t seem to have any issues. My test suite has been working fine, but when I deployed the app to a production environment, I started to discover some issues.  Issues that revolve around the database.</p>

<p>I&rsquo;m not a SQL guru, so from time-to-time when I want to poke around my Postgres database, I use an application called PGAdmin.  So I fired up PGAdmin and tried to connect to the Postgres database that is running on my server, over the internet.  Politely, PGAdmin told me to go pound sand &ndash; it was not able to connect.  After a little research I learned that there were two files on my server, related to postgres, that I needed to update.</p>

<p>On your remote server, that has Postgres running, modify the two files indicated below:<br>
<em>(Note: your path might be different depending on your version of Postgres and your Linux distro)</em></p>

<pre>
sudo vim /etc/postgresql/9.3/main/pg_hba.conf  
# Added by jfhogarty to support remote access and PGAdmin
host    all             all             0.0.0.0/0               md5


sudo vim /etc/postgresql/9.3/main/postgresql.conf 
#The next line added by jfhogarty to enable remote access and PGAdmin
listen_addresses = '*'

</pre>


<p>Lastly, with the above changes added to the two .conf files, we need to restart Posgtres:</p>

<p><code>
sudo service postgresql restart
</code></p>

<p>With the above changes in place, and postgres restarted, I fired up PGAdmin again on my laptop.  And like <em>butter</em> I was able to connect to and work with my databases. I resumed debugging my original issue.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Passwordless SSH Access]]></title>
    <link href="http://hogihung.github.io/blog/2015/01/06/custom-passwordless-ssh/"/>
    <updated>2015-01-06T20:10:14-05:00</updated>
    <id>http://hogihung.github.io/blog/2015/01/06/custom-passwordless-ssh</id>
    <content type="html"><![CDATA[<p>When I created my Digital Ocean VPS I setup SSH Keys for both my main laptop and desktop computers.  I grabbed the appropriate contents from my .pub file and pasted that information on the web form for &lsquo;Add SSH Key&rsquo; under the SSH Keys menu of my droplet.  However, I noticed that each time I would ssh to my server I would be required to input my password.</p>

<p>In this blog posting I will illustrate how I solved this issue and why the word &lsquo;custom&rsquo; appears in the title.  There are many websites that cover how to setup passwordless ssh login.  For example, Digital Ocean has a nice posting: <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2">here</a></p>

<p>However, those instructions, and other like it, assume a plain-vanilla setup.  Of course, I dare to be different.  For example, before I started to solve this puzzle, my ~/.ssh directory had the following:</p>

<p><code>
➜  .ssh  ls -la
total 88
drwx------  11 jfhogarty  staff   374 Jan  6 18:36 .
drwxr-xr-x+ 93 jfhogarty  staff  3162 Jan  6 20:10 ..
-rw-r--r--@  1 jfhogarty  staff  6148 Mar  9  2013 .DS_Store
-rw-------   1 jfhogarty  staff  1766 Mar  2  2013 id_rsa
-rw-r--r--   1 jfhogarty  staff   400 Mar  2  2013 id_rsa.pub
-rw-------   1 jfhogarty  staff   668 Apr 20  2014 jh-mbp_id
-rw-r--r--   1 jfhogarty  staff   614 Apr 20  2014 jh-mbp_id.pub
-rw-r--r--   1 jfhogarty  staff  7162 Jan  5 21:17 known_hosts
➜  .ssh
</code></p>

<p>The id_rsa (private file) and the id_rsa.pub (public file,) are your normal files one would find.  But I&rsquo;ve implemented a &lsquo;best-practice&rsquo; adopted from my day job and I create specific key files for different types of access.  For example, following the instructions in the link above, from the Digital Ocean article, I created the following:</p>

<p><code>
-rw-------   1 jfhogarty  staff   668 Jan  5 21:11 do_id_dsa
-rw-r--r--   1 jfhogarty  staff   614 Jan  5 21:11 do_id_dsa.pub
</code></p>

<p>If you follow the steps from the link, there is one thing that you may need to do in addition to their steps.  Some systems require that you change the file permissions for the authorized_keys file located on your target computer.  For example, the following is how I have the permissions set on my VPS:</p>

<p><code>
➜  .ssh  ls -la
total 12
drwx------  2 jfhogarty jfhogarty 4096 Jan  5 21:16 .
drwxr-xr-x 11 jfhogarty jfhogarty 4096 Jan  6 20:14 ..
-rw-------  1 jfhogarty jfhogarty  614 Jan  5 21:14 authorized_keys
➜  .ssh
</code></p>

<p>I adjusted the permissions using the following syntax:</p>

<p><code>
chmod 600 authorized_keys
</code></p>

<p>After creating the new keys on my laptop, and updating the authorized_keys file on the remote server, I thought surely I should now be able to login without using a password.  I was wrong!  The remote server continued to prompt me for my password.  I decided to call it a night as it was getting late.</p>

<p>While working on a VM issue today for my day job, my internal lightbulb went off and I realized what the problem was.  Lets take a fresh look at the .ssh directory of my laptop:</p>

<p><code>
sh  ls -la
total 88
drwx------  11 jfhogarty  staff   374 Jan  6 18:36 .
drwxr-xr-x+ 93 jfhogarty  staff  3162 Jan  6 20:21 ..
-rw-r--r--@  1 jfhogarty  staff  6148 Mar  9  2013 .DS_Store
-rw-------   1 jfhogarty  staff   668 Jan  5 21:11 do_id_dsa
-rw-r--r--   1 jfhogarty  staff   614 Jan  5 21:11 do_id_dsa.pub
-rw-------   1 jfhogarty  staff  1766 Mar  2  2013 id_rsa
-rw-r--r--   1 jfhogarty  staff   400 Mar  2  2013 id_rsa.pub
-rw-------   1 jfhogarty  staff   668 Apr 20  2014 jh-mbp_id
-rw-r--r--   1 jfhogarty  staff   614 Apr 20  2014 jh-mbp_id.pub
-rw-r--r--   1 jfhogarty  staff  7162 Jan  5 21:17 known_hosts
➜  .ssh
</code></p>

<p>The keen eye might notice that I now have three sets of private/public keys.  However, when I was typing ssh myhostname.com ssh didn&rsquo;t know which files to use, if any.  I was able to prove my theory by trying the following:</p>

<p><code>
ssh -p 9986 -i ~/.ssh/do_id_dsa myhostname.com
</code></p>

<p>And BAM!  No password required to login.  I was on to a solution.  When I had my lightbulb moment, I had remembered that I needed to create a config file in the .ssh directory on my laptop.  Lets take a look at it:</p>

<p>```
➜  .ssh  cat config
Host 10.11.12.13
IdentityFile ~/.ssh/do_id_dsa
Protocol 2</p>

<p>Host myhostname.com
IdentityFile ~/.ssh/do_id_dsa
Protocol 2</p>

<p>➜  .ssh
```</p>

<p>NOTE:  To protect the innocent, the IP Address and *.com name above are fake.  Please substitute those values for your real IP Address and/or domain name.</p>

<p>And that is how I solved my customized passwordless ssh access to my VPS.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Error Deploying to Production on Heroku]]></title>
    <link href="http://hogihung.github.io/blog/2014/12/30/deploy-error-heroku/"/>
    <updated>2014-12-30T08:00:25-05:00</updated>
    <id>http://hogihung.github.io/blog/2014/12/30/deploy-error-heroku</id>
    <content type="html"><![CDATA[<p>I have been making progress with a personal application that I am working on.  In the early days of development, I had deployed a version of the application to Heroku &ndash; and it worked fine at that time.  Fast forward 6 months or so and lots of changes.  I deployed to Heroku and received an error when trying to view the website:</p>

<p>```
heroku logs</p>

<p>2014-12-25T01:17:54.017424+00:00 heroku[web.1]: State changed from starting to crashed
2014-12-25T01:17:55.195360+00:00 heroku[router]: at=error code=H10 desc=&ldquo;App crashed&rdquo; method=GET path=&ldquo;/&rdquo; host=example.herokuapp.com request_id=0c587d48-ac93-4bce-91bc-9d2de62e6a86 fwd=&ldquo;73.53.247.100&rdquo; dyno= connect= service= status=503 bytes=
2014-12-25T01:17:55.719076+00:00 heroku[router]: at=error code=H10 desc=&ldquo;App crashed&rdquo; method=GET path=&ldquo;/favicon.ico&rdquo; host=example.herokuapp.com request_id=d586d82a-8c27-4f57-b5f1-cf2b55c155d7 fwd=&ldquo;73.53.247.100&rdquo; dyno= connect= service= status=503 bytes=
```</p>

<p>That error made no sense to me.  What the heck, I know the favicon.ico file exists, and why can&rsquo;t I get to the root path?  So I went to the rails console via heroku:</p>

<p>```
heroku run rails console</p>

<p>Running <code>rails console</code> attached to terminal&hellip; up, run.9397
/app/app/models/connexion.rb:1:in <code>&lt;top (required)&gt;': superclass mismatch for class Nurny (TypeError)
  from /app/vendor/bundle/ruby/2.1.0/gems/activesupport-4.1.7/lib/active_support/dependencies.rb:247:in</code>require'
  from /app/vendor/bundle/ruby/2.1.0/gems/activesupport-4.1.7/lib/active_support/dependencies.rb:247:in `block in require'
```</p>

<p>Note that I am substituting my real class name with a bogus one, &lsquo;Nurny&rsquo;, for this example.</p>

<p>Ok, now I get an error that looks like a real error, though I didn&rsquo;t understand it.  Luckily this all occurred the night before our weekly morning Code and Coffee.  So I brought the issue up and Micah gave me a hand for a while, having me try different things.</p>

<p>The conflict only shows when trying to run in a production environment.  I had a model for &lsquo;Nurny&rsquo; that had a class defined of Nurny.  However, I also have a model concern, for queries, with a class of &lsquo;Nurny&rsquo; which was the cause of the issue.</p>

<p>So, now how can I fix this?  I tried a simple rename of the concern, changing the line:</p>

<p>```
BEFORE
class Nurny</p>

<p>AFTER
class NurnyQry
```</p>

<p>But that spurred a flurry of new problems.  Luckily I found another solution while thinking through this issue.  Why did the app work fine in a development rails environment, but not in production.  Now I must confess I&rsquo;m not sure if my solution will have a profound negative effect, but so far I have not encountered any issues.  The solution lies in the config/environments/production.rb file:</p>

<p>```
BEFORE:
config.eager_load = true</p>

<p>AFTER:
config.eager_load = false
```</p>

<p>And that simple configuration change fixed my issue!</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
</feed>
