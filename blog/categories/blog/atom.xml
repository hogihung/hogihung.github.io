<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Blog | Old Guy, New Trick]]></title>
  <link href="http://hogihung.github.io/blog/categories/blog/atom.xml" rel="self"/>
  <link href="http://hogihung.github.io/"/>
  <updated>2015-09-29T15:04:18-04:00</updated>
  <id>http://hogihung.github.io/</id>
  <author>
    <name><![CDATA[Ho Gi Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hammer, N(R)ails, and some Java(Script)]]></title>
    <link href="http://hogihung.github.io/blog/2015/09/25/hammer-nails-and-java/"/>
    <updated>2015-09-25T13:45:14-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/09/25/hammer-nails-and-java</id>
    <content type="html"><![CDATA[<p>Although at times I feel like taking a hammer and some nails to bang some sense into my code, what I actually will be discussing today is related to a feature I was working on that required some updates to our Ruby/Rails code and JavaScript.  I typically find myself using pry to help me work through issues with the ruby code.  But for this feature, I needed to grab my hammer, make that Chromes' Developer tools, to assist in my debugging.</p>

<p>A little background first &ndash; assume we have a view that has a form on it.  A new requirement has been requested for us to add an upload file feature to that same view.  No problem, I can use form_tag to accomplish this task.  After making some changes, I was able to confirm that the view in question displayed the original form with a submit button, and a form to handle choosing a file to upload and its' corresponding upload button.  Below is an example of the first form_tag, and the second new form_tag:</p>

<p>```
ORIGINAL
  = form_tag({action: &lsquo;update&rsquo;}, id: &ldquo;original-form&rdquo;) do</p>

<pre><code>= button_tag 'Submit', id: 'confirm-button', type: 'button', disabled: @nurny.disable_submit_button?
</code></pre>

<p>ADDITIONAL
  = form_tag({action: :upload}, multipart: :true, id: &ldquo;upload-file&rdquo;) do</p>

<pre><code>= file_field_tag 'upload_file'
= button_tag 'Upload', id: "upload-button", class: "good", type: 'button', disabled: false
</code></pre>

<p>```</p>

<p>Something to keep in mind, when you have multiple forms on the same page, is to be sure you have a way to uniquely identify each form.  With the code updated, I went to test the forms.  To my surprise, when clicking either the Submit button or the Update button, nothing seemed to happen.  For the submit button, I could see Rails going through the motions of hitting the controller and associated update action, but the page didn&rsquo;t refresh with the data as I was expecting.</p>

<p>Well, this would be interesting.  I couldn&rsquo;t pry my way into seeing what was happening.  So I viewed my problem page in Chrome and pulled up the Developer Tools.  After a little digging, and cursing, I saw that my new form, &lsquo;upload-file&rsquo;, was nested under the original form.  This was causing my issue with neither form being able to properly set their data.  What makes this new request a bit of a challenge is that we are building a view by using partials.  So I didn&rsquo;t initially catch that I was nesting my new form inside the original one.</p>

<p>How did I notice the new form was nested?  Using the Developer Tools, View Source, I observed something like the following:</p>

<p>```
{&mdash;SNIP&mdash;}</p>

<div class='original'>
  <form id="original-form" action="/CONTROLLER/update" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="SOMERANDOMESTUFFHERE" />

{--SNIP--}

    <div class='upload'>
      <form id="upload-file" enctype="multipart/form-data" action="/CONTROLLER/upload" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="SOMERANDOMOTHERSTUFFHERE==" />
        <input type="file" name="upload_file" id="upload_file"/>
        <button name="button" type="button" id="upload-button" class="good">Upload</button>
      </form>

{--SNIP--}

    </div>
  </form>
</div>


<p>{&mdash;SNIP&mdash;}
```</p>

<p>I snipped out all of the surrounding HTML so we can focus on the problem &ndash; my new form, &lsquo;upload-file&rsquo;, was nested inside the &lsquo;original&rsquo; form.</p>

<p>NOTE: You may notice that I take the liberty to substitute actual syntax with filler syntax &ndash; just look for the all capitalized words.  I also like to use nurny and bobots as a substitute when needed.</p>

<p>With the nested forms issue resolved, my original form was now working. But my second form still had an issue. I could click on the Choose File button, select and file, and then click on the Upload button.  However, nothing happened.  At this point I need to grab my cup of JavaScript.</p>

<p>For my initial attack, let&rsquo;s write just enough javascript to get things working &ndash; no validation:</p>

<p>```
app/assets/javascript/nurny/validation.js
function uploadFile() {
  $(&lsquo;#upload-button&rsquo;).click(function() {</p>

<pre><code>var $form = $('#upload-file');

$form.submit();
return true;
</code></pre>

<p>  });
}
```</p>

<p><code>
app/assets/javascript/nurny/bobots.js
$(document).ready(function() {
  nurnyBobotter();
  setUnsubmit();
  uploadFile();
)};
</code></p>

<p>With the above code in place, I was successful in choosing a file to upload, and by clicking the upload button, getting my data processed as planned.  In my ruby code I am validating that the user actually choose a file, else I present an error.  However, we would like to catch the &lsquo;no file chosen&rsquo; issue before being processed by our controller.  Yup, you guessed it &ndash; we need some more javascript.</p>

<p>I updated my previously created function, uploadFile() with the following:</p>

<p>```
app/assets/javascript/nurny/validation.js
function uploadFile() {
  $(&lsquo;#upload-button&rsquo;).click(function() {</p>

<pre><code>var $form = $('#upload-file');
var $uploadedFiles = $('#upload_file');

if ($uploadedFiles.length &lt;= 0) {
  displayFlashError("You have not chosen a file.");
  return false;
}

$form.submit();
return true;
</code></pre>

<p>  });
}
```</p>

<p>To my surprise, nothing happened.  In fact, now my Upload File form wouldn&rsquo;t work at all.  Argh!  Back to Chrome and the Developer Tools.  Using the console feature, I tried out a few things to see what going on:</p>

<p>```
[no file chosen]
var $uploadedFiles = $(&lsquo;#upload_file&rsquo;);
undefined
$uploadedFiles
[<input type=​"file" name=​"upload_file" id=​"upload_file" tabindex=​"3017">​]
$uploadedFiles.length
1</p>

<p>[a file was chosen]
var $uploadedFiles = $(&lsquo;#upload_file&rsquo;);
undefined
[<input type=​"file" name=​"upload_file" id=​"upload_file" tabindex=​"3017">​]
$uploadedFiles.length
1
```</p>

<p>Hmmm, whether a file has been selected or not, I am getting a length of 1.  Obviously I&rsquo;m doing something wrong.  Off to the net to search for possible solutions.  I like to give credit to the following Stack Overflow <a href="http://stackoverflow.com/questions/833012/how-to-validate-a-file-upload-field-using-javascript-jquery">entry</a></p>

<p>Using what I learned from the above link, and first testing it in Chromes' Developer Tools, I updated my code as illustrated below:</p>

<p><code>
[console - Development Tools]
var $uploadedFiles = $('#upload_file').val();
undefined
$uploadedFiles
"C:\fakepath\sample_file_good-info.csv"
$uploadedFiles.length
44
</code></p>

<p>```
app/assets/javascript/nurny/validation.js
function uploadFile() {
  $(&lsquo;#upload-button&rsquo;).click(function() {</p>

<pre><code>var $form = $('#upload-file');
var $uploadedFiles = $('#upload_file').val();

if ($uploadedFiles.length &lt;= 0) {
  displayFlashError("You have not chosen a file.");
  return false;
}

$form.submit();
return true;
</code></pre>

<p>  });
}
```</p>

<p>This wraps up today&rsquo;s post, but hopefully you will find it useful.  I have spent a lot time recently, debugging using pry, that I had to dust off another very valuable tool in my tool box.  No, not my hammer, but the handy Developer Tools in Chrome.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Case for the Truth]]></title>
    <link href="http://hogihung.github.io/blog/2015/07/05/a-case-for-truth/"/>
    <updated>2015-07-05T16:58:25-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/07/05/a-case-for-truth</id>
    <content type="html"><![CDATA[<p>This week I attended the school of Hard Knocks &ndash; a course in JavaScript. The application
that I am working on for the day job does validation in both JavaScript and in Ruby. One
of my recent tasks was to add form input text boxes, zero to many, so that an Administrator
could add URLs for resources available to the users.</p>

<p>These new input boxes would be included in an existing form, which is first validated using
JavaScript.  When I added the new input boxes, I received a flash message saying that my new
input box needed to have an integer value greater than zero. So I dug into the existing
JavaScript to see how the validation was setup.  What I found was that we had a switch with
several cases and a default which would display the error I received.  My new input boxes
for a url file path obviously do not need to be a non-zero integer.  So I updated the code
with something similar to:  case &lsquo;url_file_path&rsquo;.</p>

<p>This update worked fine so long as we only had one input box for url_file_path.  But the
requirement was that we provide zero to many input boxes based on a certain criteria.  My
thought was that I could use a regular expression within my Switch-Case code.  But I ran
into an issue.  Below is a simplified version of the existing code:</p>

<p><em>Original Javascript:</em></p>

<p>```
// Actual, but commented out for this example:
// var id = $thisInput.attr(&lsquo;name&rsquo;);</p>

<p>var id = &lsquo;url_file_path&rsquo;;  //simulated
switch (id) {
  case &lsquo;file_title&rsquo;:</p>

<pre><code>//validation logic would go here
alert('This is the file title'); //sample for testing
break;
</code></pre>

<p>  case &lsquo;file_description&rsquo;:</p>

<pre><code>//validation logic would go here
alert('This is the file description'); //sample for testing
break;
</code></pre>

<p>  case &lsquo;url_file_path&rsquo;:</p>

<pre><code>//validation logic would go here
alert('This is the file description'); //sample for testing
break;
</code></pre>

<p>  default:</p>

<pre><code>alert('We hit the default');
</code></pre>

<p>}
```</p>

<p>I utilized the JSBin site to help me work through possible solutions.  You can find
that site by clicking <a href="http://jsbin.com/">here</a></p>

<p>The above javascript worked fine, so long as had only one input for the file path url.<br/>
But we had the need to support zero to many url_file_path inputs.  For this discussion,
let&rsquo;s assume we have three:</p>

<ul>
<li>url_file_path_001</li>
<li>url_file_path_002</li>
<li>url_file_path_003</li>
</ul>


<p>Well now I have a problem with my javascript.  If you run the above example, passing in
url_file_path_00n as the simulated id, then the default alert of &lsquo;We hit the default&rsquo;
will occur.</p>

<p>What I needed was a way to use a regular expression with my case statement.  I struggled
with different attempts.  I thought I was going crazy.  I tried out my regular expression
logic on its own, and it worked fine. (Tip: RegEx web tool: <a href="https://regex101.com/#javascript">click here</a>)</p>

<p>I researched online for a solution, as well as referred to some JavaScripts book that I have,
but I couldn&rsquo;t figure out what was going on.  While getting ready for bed, I came across an
item on Stack Overflow, one that I think I saw a few times but discarded.  Their example
kept referring to using switch (true)&hellip;  But I needed to switch on the id of the form input.</p>

<p>Then the light bulb went off in my head.  I made a mental note and got a good nights sleep.
The next day, I put the puzzle pieces together and came up with the following solution:</p>

<p>```
var id = &lsquo;url_file_path_002&rsquo;;  //simulated
switch (true) {
  case /file_title/.test(id):</p>

<pre><code>alert('This is the file title'); 
break;
</code></pre>

<p>  case /file_description/.test(id):</p>

<pre><code>alert('This is the file description'); 
break;
</code></pre>

<p>  case /url_file_path_(\d)+/.test(id):</p>

<pre><code>alert('This is the file description');
break;
</code></pre>

<p>  default:</p>

<pre><code>alert('We hit the default');
</code></pre>

<p>}
```</p>

<p>The above code could be tweaked a little bit since the validation for file_title
and file_description are the same.  Why don&rsquo;t you take a crack at it and let me
know how you would refactor?</p>

<p>Oh, I think I hear the bell &ndash; school is out for today!</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learnings from the Front]]></title>
    <link href="http://hogihung.github.io/blog/2015/06/23/learnings-from-the-front/"/>
    <updated>2015-06-23T10:30:25-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/06/23/learnings-from-the-front</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been watching some shows lately that focus around World War I and II, thus the catchy title in todays' post.  I am now in week three of the new job as a full time Ruby developer, and I&rsquo;ve already learned a lot more than I was expecting.  Today I would like to share some little tidbits of knowledge I have accumulated.</p>

<p>Prior to accepting this new job I had been slowly learning how to use vim for more than a quick edit of a server config file.  But it wasn&rsquo;t until I was spending my entire day in vim, and pairing with others, that I realized how powerful vim is, and how little I know about it.  I was a Sublime Text user, and the switch to vim was a leap for me. I had a certain workflow down in Sublime and I needed to learn how to do the same types of things, and more, in vim.</p>

<p>One of my favorite aspects of Sublime was that it remembered all of the files I had open previously, so that when I restarted Sublime, all of my files would be re-opened in their respective tabs.  For about two weeks, I really missed that feature and finally decided, surely vim can do this.  Off to the net for a solution.  I was excited to find that not only could I save all of my open files and tabs, but I could do it with a twist.  Let me explain.</p>

<p>There are times where I am working on say two or three features/issues/bugs through out the span of a few days.  I will bounce between branches off our main app (master) and while working in each of those branches I need different files open.  Vim has a cool command, mksession, that will allow me handle this scenario.  For example, I am working on feature add_user_attribute in a branch with a similar name.  I have six or so files open to work on this item.  However, I need to go work on another task but I don&rsquo;t want to have to remember all of these files that I had open.  Prior to this new tip, what I was doing was executing the command :tabs and taking a screen capture of my open tabs and files.  But with this new knowledge, I now can do the following:</p>

<p><code>
:mksession ~/add_user_attribute.vim
</code></p>

<p>That will save my entire vim session &ndash; all open files and their respective tabs.  You can modify the file and path to your liking.  In my example above I am saving the file add_user_attribute.vim to my home directory.  With my session saved, I can now go work on some other tasks.  When I come back to this branch, and want to resume my work, I simply type the following:</p>

<p><code>
vim -S ~/add_user_attribute.vim
</code></p>

<p>Pretty neat, huh?  Sure beats taking a screen shot and re-opening the desired files each time.</p>

<p>To assist me in my learning of vim, I have a desktop/space dedicated to Vim research.  I&rsquo;m not sure if other operating systems have that feature, but I work on a Mac so I can swipe or Cntrl+right_arrow/left_arrow to work in another desktop/space.  In my vim research desktop I have Chrome fired up with tabs full of answers to all the common things I&rsquo;m trying to do with vim.  Those browser tabs stay there until my muscle memory has kicked in and I no longer need them.</p>

<p>One more quick tip, as I just learned this today.  When I run my tests and see the failures, there is usually a line number associated with the failure.  In the past, I would switch/open the test file, type gg to go to the top of the file and then type nnj, where nn equals the reported line number.  So if my failing test was on line 124, I would do the following:</p>

<p><code>
gg
124j
</code></p>

<p>It wasn&rsquo;t until I found myself doing this way too often that I decided there had to be a better way.  This is vim, of course there is!  To accomplish the same task, more efficiently, one can use:</p>

<p><code>
:124&lt;cr&gt;
</code></p>

<p>And that is all I have for today.  I&rsquo;ve learned a lot more neat new stuff with vim, but I&rsquo;ll save that knowledge for a rainy day.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breaking Up Is Hard To Do]]></title>
    <link href="http://hogihung.github.io/blog/2015/06/02/breaking-up-is-hard/"/>
    <updated>2015-06-02T09:09:25-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/06/02/breaking-up-is-hard</id>
    <content type="html"><![CDATA[<p>Whether you are the break<strong>or</strong> or the break<strong>ee</strong>, breaking up is hard to do.  I can
still rememeber years back when I broke up with my girlfriend at the time.  I
was the break<strong>ee</strong> and it was not easy. Emotions ran wild and I took it really
hard.  But in the end, it turned out for the better.  I met and married a
much better person.</p>

<p>As of this Friday, June 5th, I am breaking up from my Corporate marriage.  I
have been working for a large corporation, whether that be Merrill Lynch or
AT&amp;T, for 20 years.  Currently I am with AT&amp;T, approaching my 14th year with
them.  But I am leaving that life for a new one.  My new job will be as a
full time Ruby developer.  Something that I have been slowly training myself
for over the past 1.5 years.</p>

<p>I wasn&rsquo;t looking to leave AT&amp;T.  Overall, I&rsquo;ve been happy there.  And the
environment has been fairly stable.  I have repeatedly received high year
end evaluations.  I have been told how valuable I am to the team and how
others look to me.  And that is great.  However, as can be the case in the
corporate world, I&rsquo;m in a job &lsquo;band&rsquo;.  I&rsquo;ve asked to be bumped to a higher
band so that I could grow, but at this time they have not been able to
accommodate me.</p>

<p>So this time around, when I was asked by someone looking to hire a developer,
I said, &ldquo;&hellip;tell me more.&rdquo;  After learning about the new opportunity, and
thinking really hard, I decided to accept the job offer.  It was not an easy
decision &ndash; as I mentioned above, I&rsquo;ve been with AT&amp;T for almost 14 years. I
get paid pretty good, and have excellent benefits, including a nice 401k
plan.</p>

<p>But I made the decision to move in order to solidify my future.  I
believe that working as a full time Ruby developer, I will be able to
grow my knowledge rapidly, as well as expand my compensatation potential.  Along
the way, I will be building a solid path for my retirement &ndash; I can code from just
about anywhere, at anytime.</p>

<p>Once I&rsquo;ve been at the new job for about a month, I will write again about how things
are going.  Hopefully I will not come back and utter the words of Gob, from &lsquo;Arrested
Development&rsquo;, and say: <em>&ldquo;I&rsquo;ve made a huge mistake.&rdquo;</em></p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Unexcused Absence]]></title>
    <link href="http://hogihung.github.io/blog/2015/05/05/unexcused-absence/"/>
    <updated>2015-05-05T10:15:14-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/05/05/unexcused-absence</id>
    <content type="html"><![CDATA[<p>The dedicated and faithful reader of this old guy, would have noticed an extended
silence in this corner of the web.  I have, as the automated voice message of my
sons school would say, &ldquo;an unexcused absence.&rdquo;  While I won&rsquo;t make any excuses, I
would like to share what has kept me away from my writing.</p>

<p>Back in March I started to learn Swift by attending the Udacity iOS online program.
Udacity has partnered with the company I work at.  After successful completion of
the course, my company will reimburse me for the tuition.  About two weeks into
my training, the family and I went on a cruise.  Though I brought my laptop and
study material, I didn&rsquo;t spend much time Swift.</p>

<p>After our trip, and a hop-skip-jump over a week, it was time for Ancient City Ruby.
I enjoyed this years ACR conference, though I would have preferred a bit more
technical meat and less of the social fluffy stuff.  However, the most significant
part of ACR for me was meeting with another Ruby developer and getting accepted to
work part-time on a neat project.</p>

<p>The part-time project is my first &ldquo;real-world&rdquo; Ruby app that I&rsquo;ve been a part of.
Though I&rsquo;ve worked on some training apps or personal Rails apps, they have all been
small in scale compared to this new gig.  Being new to the project, and not knowing
much outside my experience with smaller apps, I&rsquo;ve been spending a lot of time
looking around and trying to get familiar with the applications structure.</p>

<p>And then came Rails Conference!  This year the conference was held in Atlanta, GA
which is not too bad a drive from Jacksonville, FL.  I hadn&rsquo;t yet been to a Rails
Conference, so of course I had to go.  Overall I enjoyed the time in Atlanta.  I
ran into a guy, David, who I had meet in Miami at Ruby Conf 2013.  Also, I got to
spend time with another developer that is working on the same project that I mentioned
above.</p>

<p>After the conference, I have been spending most of my evenings working on the
part-time project.  There is a lot to learn, but I am enjoying every minute of it.
The best part of my day is seeing my tests go green and being able to merge and
push my changes.</p>

<p>And that is my excuse, uh I mean my reasons, for not being active here for a while.
I had set a personal goal to publish a new post each month, and I&rsquo;m working to
raise the bar and publish twice a month.  Keep me honest &ndash; smack me via Twitter
if you feel I&rsquo;m slacking.  :)</p>

<p>Ok, now I&rsquo;d like to share a little snippet of code that illustrates something neat
I have learned while working on the part-time gig.  A great benefit of working on
a project with a mentor.  The first example is my original code before refactoring
to make it better and look a lot more &lsquo;Ruby-ish&rsquo;.</p>

<p>```
def is_valid?(product)
  return true if @errors.nil?
  @errors.each do |error|</p>

<pre><code>if error.has_key?(product)
  return false
end
</code></pre>

<p>  end
  return true
end</p>

<p>def errored_price(product)
  return nil if @errors.nil?
  @errors.each do |error|</p>

<pre><code>if error.has_key?(product)
  return error[product]
end
</code></pre>

<p>  end
  return nil
end
```</p>

<p>And now the reveal &ndash; the pretty version which accomplishes the same thing.  Note
that during the refactor we re-named a few things, but the overall result was the
same.</p>

<p>```
def is_valid?(product)
  return true if @errors.nil?
  return false if @errors.include?(product)
  return true
end</p>

<p>def clock_price(product, eor_price)
  return price if @new_prices.nil?
  return @new_prices[product]
end
```</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
</feed>
