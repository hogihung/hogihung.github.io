<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Chrome | Old Guy, New Trick]]></title>
  <link href="http://hogihung.github.io/blog/categories/chrome/atom.xml" rel="self"/>
  <link href="http://hogihung.github.io/"/>
  <updated>2015-11-13T20:02:11-05:00</updated>
  <id>http://hogihung.github.io/</id>
  <author>
    <name><![CDATA[Ho Gi Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hammer, N(R)ails, and some Java(Script)]]></title>
    <link href="http://hogihung.github.io/blog/2015/09/25/hammer-nails-and-java/"/>
    <updated>2015-09-25T13:45:14-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/09/25/hammer-nails-and-java</id>
    <content type="html"><![CDATA[<p>Although at times I feel like taking a hammer and some nails to bang some sense into my code, what I actually will be discussing today is related to a feature I was working on that required some updates to our Ruby/Rails code and JavaScript.  I typically find myself using pry to help me work through issues with the ruby code.  But for this feature, I needed to grab my hammer, make that Chromes' Developer tools, to assist in my debugging.</p>

<p>A little background first &ndash; assume we have a view that has a form on it.  A new requirement has been requested for us to add an upload file feature to that same view.  No problem, I can use form_tag to accomplish this task.  After making some changes, I was able to confirm that the view in question displayed the original form with a submit button, and a form to handle choosing a file to upload and its' corresponding upload button.  Below is an example of the first form_tag, and the second new form_tag:</p>

<p>```
ORIGINAL
  = form_tag({action: &lsquo;update&rsquo;}, id: &ldquo;original-form&rdquo;) do</p>

<pre><code>= button_tag 'Submit', id: 'confirm-button', type: 'button', disabled: @nurny.disable_submit_button?
</code></pre>

<p>ADDITIONAL
  = form_tag({action: :upload}, multipart: :true, id: &ldquo;upload-file&rdquo;) do</p>

<pre><code>= file_field_tag 'upload_file'
= button_tag 'Upload', id: "upload-button", class: "good", type: 'button', disabled: false
</code></pre>

<p>```</p>

<p>Something to keep in mind, when you have multiple forms on the same page, is to be sure you have a way to uniquely identify each form.  With the code updated, I went to test the forms.  To my surprise, when clicking either the Submit button or the Update button, nothing seemed to happen.  For the submit button, I could see Rails going through the motions of hitting the controller and associated update action, but the page didn&rsquo;t refresh with the data as I was expecting.</p>

<p>Well, this would be interesting.  I couldn&rsquo;t pry my way into seeing what was happening.  So I viewed my problem page in Chrome and pulled up the Developer Tools.  After a little digging, and cursing, I saw that my new form, &lsquo;upload-file&rsquo;, was nested under the original form.  This was causing my issue with neither form being able to properly set their data.  What makes this new request a bit of a challenge is that we are building a view by using partials.  So I didn&rsquo;t initially catch that I was nesting my new form inside the original one.</p>

<p>How did I notice the new form was nested?  Using the Developer Tools, View Source, I observed something like the following:</p>

<p>```
{&mdash;SNIP&mdash;}</p>

<div class='original'>
  <form id="original-form" action="/CONTROLLER/update" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="SOMERANDOMESTUFFHERE" />

{--SNIP--}

    <div class='upload'>
      <form id="upload-file" enctype="multipart/form-data" action="/CONTROLLER/upload" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="SOMERANDOMOTHERSTUFFHERE==" />
        <input type="file" name="upload_file" id="upload_file"/>
        <button name="button" type="button" id="upload-button" class="good">Upload</button>
      </form>

{--SNIP--}

    </div>
  </form>
</div>


<p>{&mdash;SNIP&mdash;}
```</p>

<p>I snipped out all of the surrounding HTML so we can focus on the problem &ndash; my new form, &lsquo;upload-file&rsquo;, was nested inside the &lsquo;original&rsquo; form.</p>

<p>NOTE: You may notice that I take the liberty to substitute actual syntax with filler syntax &ndash; just look for the all capitalized words.  I also like to use nurny and bobots as a substitute when needed.</p>

<p>With the nested forms issue resolved, my original form was now working. But my second form still had an issue. I could click on the Choose File button, select and file, and then click on the Upload button.  However, nothing happened.  At this point I need to grab my cup of JavaScript.</p>

<p>For my initial attack, let&rsquo;s write just enough javascript to get things working &ndash; no validation:</p>

<p>```
app/assets/javascript/nurny/validation.js
function uploadFile() {
  $(&lsquo;#upload-button&rsquo;).click(function() {</p>

<pre><code>var $form = $('#upload-file');

$form.submit();
return true;
</code></pre>

<p>  });
}
```</p>

<p><code>
app/assets/javascript/nurny/bobots.js
$(document).ready(function() {
  nurnyBobotter();
  setUnsubmit();
  uploadFile();
)};
</code></p>

<p>With the above code in place, I was successful in choosing a file to upload, and by clicking the upload button, getting my data processed as planned.  In my ruby code I am validating that the user actually choose a file, else I present an error.  However, we would like to catch the &lsquo;no file chosen&rsquo; issue before being processed by our controller.  Yup, you guessed it &ndash; we need some more javascript.</p>

<p>I updated my previously created function, uploadFile() with the following:</p>

<p>```
app/assets/javascript/nurny/validation.js
function uploadFile() {
  $(&lsquo;#upload-button&rsquo;).click(function() {</p>

<pre><code>var $form = $('#upload-file');
var $uploadedFiles = $('#upload_file');

if ($uploadedFiles.length &lt;= 0) {
  displayFlashError("You have not chosen a file.");
  return false;
}

$form.submit();
return true;
</code></pre>

<p>  });
}
```</p>

<p>To my surprise, nothing happened.  In fact, now my Upload File form wouldn&rsquo;t work at all.  Argh!  Back to Chrome and the Developer Tools.  Using the console feature, I tried out a few things to see what going on:</p>

<p>```
[no file chosen]
var $uploadedFiles = $(&lsquo;#upload_file&rsquo;);
undefined
$uploadedFiles
[<input type=​"file" name=​"upload_file" id=​"upload_file" tabindex=​"3017">​]
$uploadedFiles.length
1</p>

<p>[a file was chosen]
var $uploadedFiles = $(&lsquo;#upload_file&rsquo;);
undefined
[<input type=​"file" name=​"upload_file" id=​"upload_file" tabindex=​"3017">​]
$uploadedFiles.length
1
```</p>

<p>Hmmm, whether a file has been selected or not, I am getting a length of 1.  Obviously I&rsquo;m doing something wrong.  Off to the net to search for possible solutions.  I like to give credit to the following Stack Overflow <a href="http://stackoverflow.com/questions/833012/how-to-validate-a-file-upload-field-using-javascript-jquery">entry</a></p>

<p>Using what I learned from the above link, and first testing it in Chromes' Developer Tools, I updated my code as illustrated below:</p>

<p><code>
[console - Development Tools]
var $uploadedFiles = $('#upload_file').val();
undefined
$uploadedFiles
"C:\fakepath\sample_file_good-info.csv"
$uploadedFiles.length
44
</code></p>

<p>```
app/assets/javascript/nurny/validation.js
function uploadFile() {
  $(&lsquo;#upload-button&rsquo;).click(function() {</p>

<pre><code>var $form = $('#upload-file');
var $uploadedFiles = $('#upload_file').val();

if ($uploadedFiles.length &lt;= 0) {
  displayFlashError("You have not chosen a file.");
  return false;
}

$form.submit();
return true;
</code></pre>

<p>  });
}
```</p>

<p>This wraps up today&rsquo;s post, but hopefully you will find it useful.  I have spent a lot time recently, debugging using pry, that I had to dust off another very valuable tool in my tool box.  No, not my hammer, but the handy Developer Tools in Chrome.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
</feed>
