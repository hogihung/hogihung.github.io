<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Old Guy, New Trick]]></title>
  <link href="http://hogihung.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://hogihung.github.io/"/>
  <updated>2014-03-29T20:26:57-04:00</updated>
  <id>http://hogihung.github.io/</id>
  <author>
    <name><![CDATA[Ho Gi Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My First Rake Task]]></title>
    <link href="http://hogihung.github.io/blog/2014/03/29/my-first-rake-task/"/>
    <updated>2014-03-29T20:13:12-04:00</updated>
    <id>http://hogihung.github.io/blog/2014/03/29/my-first-rake-task</id>
    <content type="html"><![CDATA[<p>At my day job we primarly use Perl for both our scripting and tool type applications as well as using it with a splatter of PHP for some of our web page applications.  I&rsquo;m trying to get Ruby, and Rails, in the door and see if I can convert others over to Ruby.  I must confess, it is a steep upward battle.</p>

<p>However, I do have a web application on our development server and am preparing to deploy it to production.  It is a fairly simple web application that has three models and will enable us to manage the data elements of our Out-of-Band equipment and the connected devices.</p>

<p>When I first started the development, I manually created some test records.  Then I added a handful more via the seeds.rb file.  But when it came time to populating the database with real data, I needed a better solution.  I had compiled some data in Excel files with over 400 out-of-band devices and over 5,000 connected devices.  No way I was going to manually enter all of those.</p>

<p>This was earlier in the week, and luckily I was able to ask some of the gurus at our weekly Code &amp; Coffee how I could tackle this.  Micah suggested I use the CSV library in Ruby and see about populating the data that way.  He gave me a great nudge in the right direction.</p>

<p>I was fumbling around looking for answers when I saw some information about creating rake tasks.  So I studied up, and created the following rake file:</p>

<p>```
require &lsquo;csv&rsquo;</p>

<p>oobs_file = &ldquo;/path/to/file/oob_devices.CSV&rdquo;
devices_file = &ldquo;/path/to/file/connected_devices.CSV&rdquo;</p>

<p>namespace :oob_import do
  task :oobs => :environment do</p>

<pre><code>Oob.delete_all
CSV.foreach(oobs_file, headers: true) do |row|
  p row
  Oob.create!(row.to_hash)
end
</code></pre>

<p>  end</p>

<p>  task :devices => :environment do</p>

<pre><code>Device.delete_all
CSV.foreach(devices_file, headers: true) do |row|
  oob = Oob.find_by_name("#{row[0]}")
  oob.devices.create!(name: "#{row[1]}", pri_port: "#{row[2]}", active: "#{row[3]}", updated_by: "#{row[4]}")

  p "Oob_ID: #{oob.id}, name: #{row[1]}, pri_port: #{row[2]}, active: #{row[3]}, updated_by: #{row[4]}"
end
</code></pre>

<p>  end</p>

<p>  task :all => [:oobs, :devices] do</p>

<pre><code>puts "Refreshing Oob and Device Models"
</code></pre>

<p>  end
end
```</p>

<p>To import my data, I executed the rake task as follows:</p>

<p><code>
rake oob_import:oobs
rake oob_import:devices
</code></p>

<p>I could have used the taks, <em>oob_import:all</em> but I wanted to work in two steps so I could watch for errors and fix things while I was building this file.</p>

<p>I can&rsquo;t properly convey the joy and happiness I felt when I saw this new tool work!  It really made my day, especially as it took me a couple of hours of research, trial and error.  But this will make things really easy for me when I move the application to production.</p>

<p>Note that I have the code that starts with &ldquo;p&rdquo; in there so I have a nice visual of how the task is running.  If you don&rsquo;t need that visual confirmation, you could remove those two lines of code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week 2 and a half at Bloc]]></title>
    <link href="http://hogihung.github.io/blog/2014/03/29/week-2-and-a-half-at-bloc/"/>
    <updated>2014-03-29T10:02:23-04:00</updated>
    <id>http://hogihung.github.io/blog/2014/03/29/week-2-and-a-half-at-bloc</id>
    <content type="html"><![CDATA[<p>The first week of my training at Bloc went by very fast. For the most part it was a review of information/knowledge I had already gained, but was still worth it.  I had wanted to create another blog post earlier, but the completion of the second block took longer than I had anticipated.</p>

<p>So here we are, about about 2.5 weeks in. The second block, titled Rails Foundation, should take one about 40 hours.  At least that is the estimated time for completion.  If I wasn&rsquo;t working full-time, maybe I could have completed this block in one week.</p>

<p>The Rails Foundation block is composed of 20 checkpoints.  We learned a lot of concepts, and habits in those checkpoints.  There was some review for me, for example the lesson introduced the Devise gem.  I&rsquo;ve played with this a little bit so had some comfort with that checkpoint.  Though I did learn some new things related to Devise.</p>

<p>A totally new experience for me was when did the Authorization checkpoint, and was introduced to the Pundit gem.  I would say that Pundit is a little bit like CanCan.  I&rsquo;ve dabbled with CanCan a little bit, but I find Pundit to be pretty good.  I&rsquo;ll have a tough choice to make when it comes time for my Capstone project.  Should I go with Pundit, or revist CanCan (or CanCanCan.)</p>

<p>Another topic that I found useful, because it helped me with a task at my day job, was the lesson on Seeding.  While our main environment at work is Perl, I&rsquo;m slowing trying to sneak in some Ruby and Rails.  Leveraging some of the knowledge gained in the Seeding lesson, I was able to expand on that knowledge and compose my first rake task for populating my models with data in CSV files.  Ok, I&rsquo;m a bit off topic, steer back John!</p>

<p>There were two area where my progress slowed to a crawl in the second block.  The first was related to uploading images.  Recently Bloc added a Rails 4.x track and it looks like some of the lesson code examples are missing.  I wasn&rsquo;t able to see my Choose File option for uploading an image.  A trip to the Chat Room and a small wait for my turn, and my issue was solved by Xander.  Xander is great!  Everytime I&rsquo;ve had a question, he seems to be in the chat room and helps me out.</p>

<p>The second area I had trouble with was nesting.  I&rsquo;ll admit that I&rsquo;m still 100% solid with what I&rsquo;ve learned about nesting, but I&rsquo;m confident things will become clearer as I see and utilize more code.  During one of the lessons related to this nesting of Topics, Posts and Comments, I got stuck real bad.  I went to the chat room for help, but it was just at the time for that shift to end for the day.  Xander stayed for a few minutes and helped a lot.  But I was still stuck.</p>

<p>I was worried that all the changes I had made may have broken something.  So I fired off an email to my mentor to let him know I was stuck and to be prepared for a nice long chat the next day when we were scheduled to meet.  We meet the next day and he helped get me fixed in less than 5 minutes.  My eyes were so focused around the code and didn&rsquo;t &ldquo;see&rdquo; the code.  I had several silly mistakes.  For example I used the plural version instead of singular for a particular item/method.  Or I had a misplaced period.  And other issue, I had the order of a ) and a period mixed up.  Simple things for the trained eye.  It was great to have the mentor there to help me through what I thought was a major <em>fsk</em> up on my part.</p>

<p>Needless to say, I made some more punctuation type mistakes on the remaing checkpoints in this block.  But since I suffered so much earlier in the block, I was much more aware of what to look for.  The hard part for me now is when I see an error message, and know basically what is wrong, I don&rsquo;t yet have the experience to provide the solution.  But I&rsquo;m eagerly working at improving my problem solution skills.  :)</p>

<p>As I write this post, again about 2.5, well maybe 2.75 weeks in, I&rsquo;m now on the third Block &ndash; Features / Testing / Javascript.  This block is also estimated to take 40 hours.  There are 10 checkpoints and I&rsquo;ve completed the first 4 so far.  But now I&rsquo;m really entering an area of unfamiliarity.  Upcoming in this block is RSpec and Ajax.  Two areas that have close to zero amount of knowledge and experience.</p>

<p>Stay tuned for my next update.  This coming week I will be going to Ancient City Ruby so I&rsquo;m not sure if I&rsquo;ll have the time to complete the third block.  But once I have completed it, I will post my thoughts here.</p>

<p>Happy Learning!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Week At Bloc]]></title>
    <link href="http://hogihung.github.io/blog/2014/03/15/first-week-at-bloc/"/>
    <updated>2014-03-15T19:46:34-04:00</updated>
    <id>http://hogihung.github.io/blog/2014/03/15/first-week-at-bloc</id>
    <content type="html"><![CDATA[<p>About two weeks ago I was trying to decide which on-line web developer education solution I would enroll in.  The decision was not easy.  Along with the weekly time requirements, roughly 25 hours per week, the financial cost is nothing to shrug off.  In the end I choose Bloc (<a href="http://www.bloc.io">http://www.bloc.io</a>)</p>

<p>My training at Bloc started this past Monday, March 10th.  The Bloc course runs about 12 weeks, broken down into four segments:</p>

<pre><code>1.  Environment Setup / Programming with Ruby
2.  Rails Foundation
3.  Features/Testing/Javascript
4.  Project Challenges
</code></pre>

<p>I&rsquo;ve just finished item 1 &ndash; Environment Setup / Programming with Ruby.  When I read the description of this section my first thought was, &ldquo;this should be easy.&rdquo;  I have been exploring Ruby and Rails for almost a year.  I&rsquo;ve installed RVM on several computers, worked with GitHub and Heroku, as well as several introductory tutorials.</p>

<p>And many of sub-sections in this first track were a nice and quick completion for me.  But, through each sub-section, I did learn something new.  For example, while working on setting up an app on Heroku, I learned how to add support for New Relic.  I&rsquo;ve seen ads and mention of New Relic a lot while learning Rails but never took a look at it.  Now I&rsquo;ve had a nice gentle introduction.</p>

<p>There are 20 sub-section to Environment Setup / Programming with Ruby.  I felt good and confident as I traversed through them one by one.  I was slowed down briefly in sub-section 14 &ndash; Arrays.  One of the exercises there introduced me to new code and techniques I had not yet experienced.  I love learning new stuff!</p>

<p>As I rounded out this section, I found myself staring at my nemesis &ndash; Blocks.  I don&rsquo;t know why, but I seem to have a mental <em>block</em> when it comes to Blocks (as well as Procs and Lambdas.)  This section took me a bit and I had to reach out for help.</p>

<p>In the Bloc program, each student has a mentor.  We have around 3 calls a week with our mentors.  When I got stuck it was after I had last talked with my mentor.  Not a problem &ndash; Bloc also has a staffed on-line chat room.  I popped in to the chat room and asked a question.  One of the staff there gave me a nudge.  After about 30 minutes I was still stuck.  I had gotten further, but still hadn&rsquo;t solved the problem.  Another question/discussion in the chat room and it became clear.  I was able to complete the lesson.  <strong>Happy Dance!</strong></p>

<p>I look forward to my next call with my mentor (tomorrow) and starting my next section &ndash; Rails Foundation.  As I progress through each section I&rsquo;ll return here to provide updates.</p>

<p>Happy Learning!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby, RVM, Cmd Line SheBang!]]></title>
    <link href="http://hogihung.github.io/blog/2014/02/12/command_line_apps_rvm/"/>
    <updated>2014-02-12T10:56:35-05:00</updated>
    <id>http://hogihung.github.io/blog/2014/02/12/command_line_apps_rvm</id>
    <content type="html"><![CDATA[<p>I ran across this tip while reading the book <em>&ldquo;Build Awesome Command-Line Applications
in Ruby 2,&rdquo;</em> by David Bryant Copeland.  Although most of the code I&rsquo;ve been practicing
has been Ruby on Rails, at my day job we utilize a lot of command line applications.  I&rsquo;m on a mission to add Ruby to our toolbox which currently is Perl and shell scripts.</p>

<p>For a recent project I needed a command line application that could take a CSV
file as an input, extract out some data, and create a new pipe (|) delimted text
file.  I use RVM on my personal laptop and desktop, so I installed it on our
company server.  At that time, Ruby was at version 1.93.  Not too long after, I
added 2.0.0 and 2.1.0.  But my application was written in 1.93.  It is a simple
application so the version shouldn&rsquo;t matter.  But in case it does, you may find
value in this tip.</p>

<p>If you are a RVM user, and type the command &lsquo;which ruby&rsquo; at the command line, you
may get something similar to:</p>

<p><code>
/Users/jfhogarty/.rvm/rubies/ruby-2.1.0/bin/ruby
</code></p>

<p>You can use that as the first line of your ruby script:
```</p>

<h1>!/Users/jfhogarty/.rvm/rubies/ruby-2.1.0/bin/ruby</h1>

<p>```</p>

<p>However, if you want your script to use whatever the current version of Ruby is,
or if Ruby is in a different location on a machine other than yours, you can use this syntax:</p>

<p>```</p>

<h1>!/usr/bin/env ruby</h1>

<p>```</p>

<p>This tip is found on page 4, in the section: &ldquo;Shebang: How the Systems Knows an App Is A Ruby Script&rdquo;</p>
]]></content>
  </entry>
  
</feed>
