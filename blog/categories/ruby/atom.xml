<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Old Guy, New Trick]]></title>
  <link href="http://hogihung.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://hogihung.github.io/"/>
  <updated>2015-06-02T08:00:55-04:00</updated>
  <id>http://hogihung.github.io/</id>
  <author>
    <name><![CDATA[Ho Gi Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[An Unexcused Absence]]></title>
    <link href="http://hogihung.github.io/blog/2015/05/05/unexcused-absence/"/>
    <updated>2015-05-05T10:15:14-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/05/05/unexcused-absence</id>
    <content type="html"><![CDATA[<p>The dedicated and faithful reader of this old guy, would have noticed an extended
silence in this corner of the web.  I have, as the automated voice message of my
sons school would say, &ldquo;an unexcused absence.&rdquo;  While I won&rsquo;t make any excuses, I
would like to share what has kept me away from my writing.</p>

<p>Back in March I started to learn Swift by attending the Udacity iOS online program.
Udacity has partnered with the company I work at.  After successful completion of
the course, my company will reimburse me for the tuition.  About two weeks into
my training, the family and I went on a cruise.  Though I brought my laptop and
study material, I didn&rsquo;t spend much time Swift.</p>

<p>After our trip, and a hop-skip-jump over a week, it was time for Ancient City Ruby.
I enjoyed this years ACR conference, though I would have preferred a bit more
technical meat and less of the social fluffy stuff.  However, the most significant
part of ACR for me was meeting with another Ruby developer and getting accepted to
work part-time on a neat project.</p>

<p>The part-time project is my first &ldquo;real-world&rdquo; Ruby app that I&rsquo;ve been a part of.
Though I&rsquo;ve worked on some training apps or personal Rails apps, they have all been
small in scale compared to this new gig.  Being new to the project, and not knowing
much outside my experience with smaller apps, I&rsquo;ve been spending a lot of time
looking around and trying to get familiar with the applications structure.</p>

<p>And then came Rails Conference!  This year the conference was held in Atlanta, GA
which is not too bad a drive from Jacksonville, FL.  I hadn&rsquo;t yet been to a Rails
Conference, so of course I had to go.  Overall I enjoyed the time in Atlanta.  I
ran into a guy, David, who I had meet in Miami at Ruby Conf 2013.  Also, I got to
spend time with another developer that is working on the same project that I mentioned
above.</p>

<p>After the conference, I have been spending most of my evenings working on the
part-time project.  There is a lot to learn, but I am enjoying every minute of it.
The best part of my day is seeing my tests go green and being able to merge and
push my changes.</p>

<p>And that is my excuse, uh I mean my reasons, for not being active here for a while.
I had set a personal goal to publish a new post each month, and I&rsquo;m working to
raise the bar and publish twice a month.  Keep me honest &ndash; smack me via Twitter
if you feel I&rsquo;m slacking.  :)</p>

<p>Ok, now I&rsquo;d like to share a little snippet of code that illustrates something neat
I have learned while working on the part-time gig.  A great benefit of working on
a project with a mentor.  The first example is my original code before refactoring
to make it better and look a lot more &lsquo;Ruby-ish&rsquo;.</p>

<p>```
def is_valid?(product)
  return true if @errors.nil?
  @errors.each do |error|</p>

<pre><code>if error.has_key?(product)
  return false
end
</code></pre>

<p>  end
  return true
end</p>

<p>def errored_price(product)
  return nil if @errors.nil?
  @errors.each do |error|</p>

<pre><code>if error.has_key?(product)
  return error[product]
end
</code></pre>

<p>  end
  return nil
end
```</p>

<p>And now the reveal &ndash; the pretty version which accomplishes the same thing.  Note
that during the refactor we re-named a few things, but the overall result was the
same.</p>

<p>```
def is_valid?(product)
  return true if @errors.nil?
  return false if @errors.include?(product)
  return true
end</p>

<p>def clock_price(product, eor_price)
  return price if @new_prices.nil?
  return @new_prices[product]
end
```</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[At Sea Without The Net]]></title>
    <link href="http://hogihung.github.io/blog/2015/03/29/at-sea-without-the-net/"/>
    <updated>2015-03-29T20:49:35-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/03/29/at-sea-without-the-net</id>
    <content type="html"><![CDATA[<p>Two weeks ago from today, at about this time I was kicked back in the main show room of the <strong>ms Nieuw Amsterdam</strong> waiting for the opening act to begin.  With a full stomach from an awesome meal, and a refreshing drink in hand, I was in full relax mode.  The last thing I was thinking about was code.</p>

<p>When I woke up, Monday morning, I had an itching to crack open the laptop and work on some things I had left hanging from two days prior.  But first, a quick stop for breakfast, then I headed to the ships library.  I was knocking out tasks one by one, committing away locally on my laptop.  Then instinctively, my muscle memory kicked in and before I could catch what I was doing, I typed:</p>

<p><code>
git push origin master
</code></p>

<p>Duh!  You are on a ship, in the Caribbean, without a connection to the net.  No big deal, I can push my stuff to github when I return home.</p>

<p>I continued working on different things until I found myself stuck &ndash; I needed to refer to the api docs or some type of reference.  I was on vacation &ndash; the smart thing to do would have been to shut down my laptop and go relax.  Can you guess what I did?</p>

<p>Perhaps the thick-headed Irish blood in me, I decided to find a solution.  After a little digging, I found some gold nuggets in the following path:  ~/.gem/ruby/2.1.5/gems/rails-4.1.7/guides/source/</p>

<p>Reviewing some of the files in the above directory, I was able to get an answer for what I was looking for.  Saved my work, closed the laptop and headed to the gangway to catch a tender to a beautiful private island.</p>

<p>Later that day, while chatting with my dad, he let me know that he purchased a block of 200 minutes of internet time.  Satellite internet is not very fast, but good enough for quick browsing or checking of email.</p>

<p>I knew that I&rsquo;d be cracking open the laptop from time-to-time, and working on Flex Blogger as well as an app for my day job.  But I didn&rsquo;t want to burn through those sacred internet minutes when I needed to review either the Ruby or Rails APIs.  Surely there had to be a better way.  Of course there is, and I found the following site:</p>

<p><a href="https://rubydocs.org/">https://rubydocs.org/</a></p>

<p>One can visit the above site and download a local copy of the Ruby and/or Rails APIs.  The neat thing is, you can choose which version or Ruby or Rails that you want to download the documentation for.  Neat!</p>

<p>With a local copy of the documentation I was needing, I pushed my committed changes from the previous day, then logged out &ndash; only used about 15 minutes of our satellite internet.  :)</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Gathering]]></title>
    <link href="http://hogihung.github.io/blog/2015/02/03/gathering-of-some-newbs/"/>
    <updated>2015-02-03T07:50:00-05:00</updated>
    <id>http://hogihung.github.io/blog/2015/02/03/gathering-of-some-newbs</id>
    <content type="html"><![CDATA[<p>A few weeks back I was discussing an idea around the weekly Code and Coffee table.
The idea was a spin on something I saw Nathan Barry discussing over <a href="http://nathanbarry.com/24hours/">here</a>.
I still consider myself a newbie to Ruby, but I wanted to do my own personal hack-a-thon.</p>

<p>Well that idea morphed, or is the cool thing to say, pivoted, to a project that me
and two other new to Ruby programmers would work on. All three of us discussed the
idea of creating something new.  Something no one else has done before.  A blog
written in Ruby on Rails.</p>

<p>Hopefully now you are not looking at your screen with coffee sprayed all over it
due to your laughing.  I know, there have been many, many Blog type projects.  So
why is this one different?  I&rsquo;m not sure it really is.  What I can say is that
project is giving us an opportunity to work together and learn from each other.
Not to say anything bad about you seniors out there, but there are times I feel
that the best way to illustrate that I&rsquo;ve learned something that you have passed
on, is to share that knowledge with others around my level.</p>

<p>So yes, we are making a dynamic blog written in Rails.  If you are interested in
checking it out, you can find it <a href="https://github.com/hogihung/flex_blogger">here</a>.
Please keep in mind that we are still in active development.  I will update the
README file once we are at a point where we think the application is solid.</p>

<p>There are a lot of &lsquo;firsts&rsquo; for me in regards to this project.  This is the first
web application I&rsquo;m working on with more than two people actively working at the
same time.  I&rsquo;m learning how to create and manage pull requests.  I&rsquo;m attempting
to help lead the project and keep all of us updated on the progress.</p>

<p>All three of us have been working with Ruby and Rails for a little bit &ndash; perhaps
a year or year and half.  But there are some other &lsquo;new to us&rsquo; components that we
have choosen to try out.  We decided to bypass Devise and Twitter Bootstrap &ndash; both
things that were comfortable to us.  Instead, we are using several great tools
that <a href="https://github.com/thoughtbot/">Thoughtbot</a> has shared with the community
including:  Bourbon, Neat, Bitters, Refills, Clearance, FactoryGirl and HoundCI.</p>

<p>I welcome any feedback on our project, <strong>Flex Blogger</strong>.  Just shoot me a tweet on
Twitter, or email me.  I&rsquo;m excited to see the final product and have this cool
experience.</p>

<p>I still want to test my skills by doing a personal hack-a-thon, but I need to
convince some of the gurus I know to be my guest drop ins.  :)</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cha-Cha-Cha-Chruby]]></title>
    <link href="http://hogihung.github.io/blog/2014/11/17/Cha-Cha-Cha-Chruby/"/>
    <updated>2014-11-17T20:40:47-05:00</updated>
    <id>http://hogihung.github.io/blog/2014/11/17/Cha-Cha-Cha-Chruby</id>
    <content type="html"><![CDATA[<p>Recently I got a bug, ney rather an itch I needed to scratch.  I have been using RVM for over a year and half.  I have had some issues, but mostly those were due to me learning how to work with RVM.</p>

<p>I was having an odd issue on one of my Macs so I decided to remove RVM and install rbenv.  I shot a tweet out to see if anyone had an opinion about rbenv and I received a reply suggesting I give chruby a chance.  Recently I had listened to an episode of Ruby Rogues <a href="http://devchat.tv/ruby-rogues/169-rr-version-managers-with-michal-papis-mislav-maronic-and-postmodern-mod-iii">#169</a>,  where they talked about RVM, rbenv, and chruby.</p>

<p>So I decied to give chruby a try.  Removing RVM is pretty straight forward.  You should be able to simply run:</p>

<p><code>
rvm implode
</code></p>

<p>Once removed, you may need to edit your .bashrc/.zshrc or *profile file(s) to remove any reference to RVM.</p>

<p>While I really like RVM, I&rsquo;ve always been a bit worried about the magic it performs &ndash; the stuff it does for me that I&rsquo;m not familiar with.  Chruby seemed to be easier for me to grasp.  From my limited understanding, there seems to be less moving parts in chruby vs. RVM.</p>

<p>I&rsquo;m not going to lay out all of the steps to get chruby installed.  The source web pages for chruby and ruby-install are very easy to read and comprehend.</p>

<p><a href="https://github.com/postmodern/chruby">chruby</a><br>
<a href="https://github.com/postmodern/ruby-install">ruby-install</a></p>

<p>It took me a little bit to understand the differences of chruby and how I would use in my environment.  But after getting it running on my laptop, I converted two other Macs, my Ubuntu VM, and my CentOS server to use chruby.</p>

<p>As I said earlier, I do like RVM, and it had served me well.  I still use RVM at my day job on our CentOS servers.  I thought changing from RVM to chruby on those servers would be a good idea, so I attempted to change a development server.  While the removal of RVM and install of Chruby went fine, I ran into a huge issue.  I could not get Passenger to work properly under Chruby.  I&rsquo;m sure the reason is due to my lack of understanding, but I just couldn&rsquo;t afford to figure it out. So I switched back to RVM &ndash; and RVM will stay on our work servers.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Borrowing From Ruby Tapas]]></title>
    <link href="http://hogihung.github.io/blog/2014/11/04/borrow-a-tapa-convention/"/>
    <updated>2014-11-04T07:20:45-05:00</updated>
    <id>http://hogihung.github.io/blog/2014/11/04/borrow-a-tapa-convention</id>
    <content type="html"><![CDATA[<p>I have many learning tools in my arsenal including Code School, Thoughtbot/Upcase, RailsCasts, Ruby Tapas, and too many other Internet based free resources to list.  But today I want to talk tapas, and borrow something that I learned from watching many episodes of Ruby Tapas.</p>

<p>As I&rsquo;ve watched various episodes, I kept saying to myself, how is Avdi executing code right from within his text editor?  Is this some time of post production trickery?  Perhaps a green screen based laptop with a dash of After Effects?  But after some research, I learned that is wasn&rsquo;t some fancy magic, but rather an ability within his editor.  I believe that editor to be Emacs.</p>

<p>Well, I&rsquo;m a Sublime Text user, and slowly dabbling with Vim.  So off to the online oracles to see if I could find a solution that would work in Sublime.  I did indeed find some solutions that said they were doing what Avdi can do &ndash; even referencing that they had the same desire as me.  However, I was not successful with getting Sublime to work the way I was expecting.  After spending several hours trying to force it to work, I gave up.  And I had a thought &ndash; surely this would be easier to get working with Vim.  :)</p>

<p>Getting the Tapas style in-line Ruby code execution to work in Vim was nice and easy.  I followed the instructions <a href="http://commandercoriander.net/blog/2012/10/10/evaluate-lines-of-ruby-in-vim/">here</a> and was up in running with very little effort.  For those that don&rsquo;t want leave from this fabulous reading, I&rsquo;ll summarize what needs to be done, first starting with the installation of a gem:</p>

<p><code>
gem install rcodetools
</code></p>

<p>Now we need to add a plugin to Vim.  Depending on your setup, you may need to add the .vim/bundle directory in your home directory.  But I already had this setup, so all I needed to do was the following:</p>

<p><code>
cd ~
cd .vim/bundle
git clone https://github.com/t9md/vim-ruby-xmpfilter.git
</code></p>

<p>For a final bit of setup/configuration, we need to take a trip in editing the ~/.vimrc or ~/.vimrc.local file so we can do some mapping:</p>

<p>```
nmap <buffer> <F4> <Plug>(xmpfilter-mark)
xmap <buffer> <F4> <Plug>(xmpfilter-mark)
imap <buffer> <F4> <Plug>(xmpfilter-mark)</p>

<p>nmap <buffer> <F5> <Plug>(xmpfilter-run)
xmap <buffer> <F5> <Plug>(xmpfilter-run)
imap <buffer> <F5> <Plug>(xmpfilter-run)
```</p>

<p>The above mapping will allows us to mark (F4) what line(s) we want to see the results for of executing the ruby code, which we accomplish by pressing F5.  Let&rsquo;s step through an example to see how this works.  I&rsquo;ll show the example file through the various stages.</p>

<p><code>
1 class Person
2   attr_accessor :name, :age
3
4   def initialize(name)
5     self.name = name
6     self.age = "Does it matter?"
7   end
8 end
9
10 p = Person.new('Kevin')
11 p.name
12 p.age
</code></p>

<p>Next we will press F4 for the code we want to evaluate, line 11 below:</p>

<p><code>
1 class Person
2   attr_accessor :name, :age
3
4   def initialize(name)
5     self.name = name
6     self.age = "Does it matter?"
7   end
8 end
9
10 p = Person.new('Kevin')
11 p.name # =&gt;
12 p.age
</code></p>

<p>And finally, EXECUTE (F5):</p>

<p><code>
1 class Person
2   attr_accessor :name, :age
3
4   def initialize(name)
5     self.name = name
6     self.age = "Does it matter?"
7   end
8 end
9
10 p = Person.new('Kevin')
11 p.name # =&gt; "Kevin"
12 p.age
</code></p>

<p>Pretty neat, eh?  Borrowing this workflow from Ruby Tapas will now help me when I&rsquo;m following along with each episode.  Now I just need to get better with Vim.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
</feed>
