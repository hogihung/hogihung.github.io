<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby, | Old Guy, New Trick]]></title>
  <link href="http://hogihung.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://hogihung.github.io/"/>
  <updated>2014-11-18T08:44:45-05:00</updated>
  <id>http://hogihung.github.io/</id>
  <author>
    <name><![CDATA[Ho Gi Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cha-Cha-Cha-Chruby]]></title>
    <link href="http://hogihung.github.io/blog/2014/11/17/Cha-Cha-Cha-Chruby/"/>
    <updated>2014-11-17T20:40:47-05:00</updated>
    <id>http://hogihung.github.io/blog/2014/11/17/Cha-Cha-Cha-Chruby</id>
    <content type="html"><![CDATA[<p>Recently I got a bug, ney rather an itch I needed to scratch.  I have been using RVM for over a year and half.  I have had some issues, but mostly those were due to me learning how to work with RVM.</p>

<p>I was having an odd issue on one of my Macs so I decided to remove RVM and install rbenv.  I shot a tweet out to see if anyone had an opinion about rbenv and I received a reply suggesting I give chruby a chance.  Recently I had listened to an episode of Ruby Rogues <a href="http://devchat.tv/ruby-rogues/169-rr-version-managers-with-michal-papis-mislav-maronic-and-postmodern-mod-iii">#169</a>,  where they talked about RVM, rbenv, and chruby.</p>

<p>So I decied to give chruby a try.  Removing RVM is pretty straight forward.  You should be able to simply run:</p>

<p><code>
rvm implode
</code></p>

<p>Once removed, you may need to edit your .bashrc/.zshrc or *profile file(s) to remove any reference to RVM.</p>

<p>While I really like RVM, I&rsquo;ve always been a bit worried about the magic it performs &ndash; the stuff it does for me that I&rsquo;m not familiar with.  Chruby seemed to be easier for me to grasp.  From my limited understanding, there seems to be less moving parts in chruby vs. RVM.</p>

<p>I&rsquo;m not going to lay out all of the steps to get chruby installed.  The source web pages for chruby and ruby-install are very easy to read and comprehend.</p>

<p><a href="https://github.com/postmodern/chruby">chruby</a><br>
<a href="https://github.com/postmodern/ruby-install">ruby-install</a></p>

<p>It took me a little bit to understand the differences of chruby and how I would use in my environment.  But after getting it running on my laptop, I converted two other Macs, my Ubuntu VM, and my CentOS server to use chruby.</p>

<p>As I said earlier, I do like RVM, and it had served me well.  I still use RVM at my day job on our CentOS servers.  I thought changing from RVM to chruby on those servers would be a good idea, so I attempted to change a development server.  While the removal of RVM and install of Chruby went fine, I ran into a huge issue.  I could not get Passenger to work properly under Chruby.  I&rsquo;m sure the reason is due to my lack of understanding, but I just couldn&rsquo;t affort to figure it out. So I switched back to RVM &ndash; and RVM will stay on our work servers.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Borrowing From Ruby Tapas]]></title>
    <link href="http://hogihung.github.io/blog/2014/11/04/borrow-a-tapa-convention/"/>
    <updated>2014-11-04T07:20:45-05:00</updated>
    <id>http://hogihung.github.io/blog/2014/11/04/borrow-a-tapa-convention</id>
    <content type="html"><![CDATA[<p>I have many learning tools in my arsenal including Code School, Thoughtbot/Upcase, RailsCasts, Ruby Tapas, and too many other Internet based free resources to list.  But today I want to talk tapas, and borrow something that I learned from watching many episodes of Ruby Tapas.</p>

<p>As I&rsquo;ve watched various episodes, I kept saying to myself, how is Avdi executing code right from within his text editor?  Is this some time of post production trickery?  Perhaps a green screen based laptop with a dash of After Effects?  But after some research, I learned that is wasn&rsquo;t some fancy magic, but rather an ability within his editor.  I believe that editor to be Emacs.</p>

<p>Well, I&rsquo;m a Sublime Text user, and slowly dabbling with Vim.  So off to the online oracles to see if I could find a solution that would work in Sublime.  I did indeed find some solutions that said they were doing what Avdi can do &ndash; even referencing that they had the same desire as me.  However, I was not successful with getting Sublime to work the way I was expecting.  After spending several hours trying to force it to work, I gave up.  And I had a thought &ndash; surely this would be easier to get working with Vim.  :)</p>

<p>Getting the Tapas style in-line Ruby code execution to work in Vim was nice and easy.  I followed the instructions <a href="http://commandercoriander.net/blog/2012/10/10/evaluate-lines-of-ruby-in-vim/">here</a> and was up in running with very little effort.  For those that don&rsquo;t want leave from this fabulous reading, I&rsquo;ll summarize what needs to be done, first starting with the installation of a gem:</p>

<p><code>
gem install rcodetools
</code></p>

<p>Now we need to add a plugin to Vim.  Depending on your setup, you may need to add the .vim/bundle directory in your home directory.  But I already had this setup, so all I needed to do was the following:</p>

<p><code>
cd ~
cd .vim/bundle
git clone https://github.com/t9md/vim-ruby-xmpfilter.git
</code></p>

<p>For a final bit of setup/configuration, we need to take a trip in editing the ~/.vimrc or ~/.vimrc.local file so we can do some mapping:</p>

<p>```
nmap <buffer> <F4> <Plug>(xmpfilter-mark)
xmap <buffer> <F4> <Plug>(xmpfilter-mark)
imap <buffer> <F4> <Plug>(xmpfilter-mark)</p>

<p>nmap <buffer> <F5> <Plug>(xmpfilter-run)
xmap <buffer> <F5> <Plug>(xmpfilter-run)
imap <buffer> <F5> <Plug>(xmpfilter-run)
```</p>

<p>The above mapping will allows us to mark (F4) what line(s) we want to see the results for of executing the ruby code, which we accomplish by pressing F5.  Let&rsquo;s step through an example to see how this works.  I&rsquo;ll show the example file through the various stages.</p>

<p><code>
1 class Person
2   attr_accessor :name, :age
3
4   def initialize(name)
5     self.name = name
6     self.age = "Does it matter?"
7   end
8 end
9
10 p = Person.new('Kevin')
11 p.name
12 p.age
</code></p>

<p>Next we will press F4 for the code we want to evaluate, line 11 below:</p>

<p><code>
1 class Person
2   attr_accessor :name, :age
3
4   def initialize(name)
5     self.name = name
6     self.age = "Does it matter?"
7   end
8 end
9
10 p = Person.new('Kevin')
11 p.name # =&gt;
12 p.age
</code></p>

<p>And finally, EXECUTE (F5):</p>

<p><code>
1 class Person
2   attr_accessor :name, :age
3
4   def initialize(name)
5     self.name = name
6     self.age = "Does it matter?"
7   end
8 end
9
10 p = Person.new('Kevin')
11 p.name # =&gt; "Kevin"
12 p.age
</code></p>

<p>Pretty neat, eh?  Borrowing this workflow from Ruby Tapas will now help me when I&rsquo;m following along with each episode.  Now I just need to get better with Vim.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing to_csv Method]]></title>
    <link href="http://hogihung.github.io/blog/2014/09/23/testing-to-csv-method/"/>
    <updated>2014-09-23T09:32:37-04:00</updated>
    <id>http://hogihung.github.io/blog/2014/09/23/testing-to-csv-method</id>
    <content type="html"><![CDATA[<p>Last week I covered a topic that resurfaced while I am in the process of upgrading one of our apps from Ruby 1.9 and Rails 3.x. When I wrote that application I was a raw recruit &ndash; fresh to Ruby and Rails and just trying to get the idea to work.</p>

<p>But as I&rsquo;ve been improving my skills and expanding the ole grey matter, I wanted to write this new version, fully tested.  In the application there is a need to be able to export the data to a CSV formatted file.  I had the code from the old version of the app, and migrated it over.  However, I challenged myself to figure out how to write a test for the to_csv method in Baytech model.</p>

<p>Below is the code from the Baytech model:</p>

<p>```
def self.to_csv
  CSV.generate(col_sep: &lsquo;:&rsquo;) do |csv|</p>

<pre><code>all.each do |baytech|
  port = "X"
  csv &lt;&lt; [baytech.name, baytech.phone_num, baytech.ip_addr, port, baytech.modem_type, port]
</code></pre>

<p>  end
end
```</p>

<p>I know the method works, as it has been working fine for 9 months or so now.  But I really wanted to figure out how to write a test for this method.  After much trial and error, along with research via books and google, I came up with the following solution:</p>

<p>```
describe Baytech, &lsquo;#to_csv&rsquo; do
  let(:baytech) { FactoryGirl.create(:baytech) }</p>

<p>  before do</p>

<pre><code>baytech
</code></pre>

<p>  end</p>

<p>  it { expect(Baytech.to_csv).to match /#{baytech.name}:#{baytech.phone_num}:#{baytech.ip_addr}:X:1:X/ }
end
```</p>

<p>You may notice in the above code that I am referencing a Factory.  Here is a short version of that factory file:</p>

<p>```
FactoryGirl.define do
  factory :baytech do</p>

<pre><code>sequence(:name) {|n| "jaxfl0#{n}b9" }
sequence(:ip_addr) {|n| "10.1.2.#{n}" }
phone_num "7091234384"
region "USA"
modem_type "1"
ip_method "ssh"
active true
has_modem_line true
updated_by "cd1234"

{-snip-}
</code></pre>

<p>  end
end
```</p>

<p>The keen eye may have caught something interesting in the to_csv method.  I&rsquo;m using an option, col_sep: &lsquo;:&rsquo; which allows me to use the : character as the delimiter instead of the default comma.</p>

<p>With the test in place, and passing, I felt better about the code in my to_csv method.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
</feed>
