<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Old Guy, New Trick]]></title>
  <link href="http://hogihung.github.io/atom.xml" rel="self"/>
  <link href="http://hogihung.github.io/"/>
  <updated>2015-06-02T08:02:22-04:00</updated>
  <id>http://hogihung.github.io/</id>
  <author>
    <name><![CDATA[Ho Gi Hung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Breaking Up Is Hard To Do]]></title>
    <link href="http://hogihung.github.io/blog/2015/06/02/breaking-up-is-hard/"/>
    <updated>2015-06-02T09:09:25-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/06/02/breaking-up-is-hard</id>
    <content type="html"><![CDATA[<p>Whether you are the break<strong>or</strong> or the break<strong>ee</strong>, breaking up is hard to do.  I can
still rememeber years back when I broke up with my girlfriend at the time.  I
was the break<strong>ee</strong> and it was not easy. Emotions ran wild and I took it really
hard.  But in the end, it turned out for the better.  I met and married a
much better person.</p>

<p>As of this Friday, June 5th, I am breaking up from my Corporate marriage.  I
have been working for a large corporation, whether that be Merrill Lynch or
AT&amp;T, for 20 years.  Currently I am with AT&amp;T, approaching my 14th year with
them.  But I am leaving that life for a new one.  My new job will be as a
full time Ruby developer.  Something that I have been slowly training myself
for over the past 1.5 years.</p>

<p>I wasn&rsquo;t looking to leave AT&amp;T.  Overall, I&rsquo;ve been happy there.  And the
environment has been fairly stable.  I have repeatedly received high year
end evaluations.  I have been told how valuable I am to the team and how
others look to me.  And that is great.  However, as can be the case in the
corporate world, I&rsquo;m in a job &lsquo;band&rsquo;.  I&rsquo;ve asked to be bumped to a higher
band so that I could grow, but at this time they have not been able to
accommodate me.</p>

<p>So this time around, when I was asked by someone looking to hire a developer,
I said, &ldquo;&hellip;tell me more.&rdquo;  After learning about the new opportunity, and
thinking really hard, I decided to accept the job offer.  It was not an easy
decision &ndash; as I mentioned above, I&rsquo;ve been with AT&amp;T for almost 14 years. I
get paid pretty good, and have excellent benefits, including a nice 401k
plan.</p>

<p>But I made the decision to move in order to solidify my future.  I
believe that working as a full time Ruby developer, I will be able to
grow my knowledge rapidly, as well as expand my compensatation potential.  Along
the way, I will be building a solid path for my retirement &ndash; I can code from just
about anywhere, at anytime.</p>

<p>Once I&rsquo;ve been at the new job for about a month, I will write again about how things
are going.  Hopefully I will not come back and utter the words of Gob, from &lsquo;Arrested
Development&rsquo;, and say: <em>&ldquo;I&rsquo;ve made a huge mistake.&rdquo;</em></p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Unexcused Absence]]></title>
    <link href="http://hogihung.github.io/blog/2015/05/05/unexcused-absence/"/>
    <updated>2015-05-05T10:15:14-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/05/05/unexcused-absence</id>
    <content type="html"><![CDATA[<p>The dedicated and faithful reader of this old guy, would have noticed an extended
silence in this corner of the web.  I have, as the automated voice message of my
sons school would say, &ldquo;an unexcused absence.&rdquo;  While I won&rsquo;t make any excuses, I
would like to share what has kept me away from my writing.</p>

<p>Back in March I started to learn Swift by attending the Udacity iOS online program.
Udacity has partnered with the company I work at.  After successful completion of
the course, my company will reimburse me for the tuition.  About two weeks into
my training, the family and I went on a cruise.  Though I brought my laptop and
study material, I didn&rsquo;t spend much time Swift.</p>

<p>After our trip, and a hop-skip-jump over a week, it was time for Ancient City Ruby.
I enjoyed this years ACR conference, though I would have preferred a bit more
technical meat and less of the social fluffy stuff.  However, the most significant
part of ACR for me was meeting with another Ruby developer and getting accepted to
work part-time on a neat project.</p>

<p>The part-time project is my first &ldquo;real-world&rdquo; Ruby app that I&rsquo;ve been a part of.
Though I&rsquo;ve worked on some training apps or personal Rails apps, they have all been
small in scale compared to this new gig.  Being new to the project, and not knowing
much outside my experience with smaller apps, I&rsquo;ve been spending a lot of time
looking around and trying to get familiar with the applications structure.</p>

<p>And then came Rails Conference!  This year the conference was held in Atlanta, GA
which is not too bad a drive from Jacksonville, FL.  I hadn&rsquo;t yet been to a Rails
Conference, so of course I had to go.  Overall I enjoyed the time in Atlanta.  I
ran into a guy, David, who I had meet in Miami at Ruby Conf 2013.  Also, I got to
spend time with another developer that is working on the same project that I mentioned
above.</p>

<p>After the conference, I have been spending most of my evenings working on the
part-time project.  There is a lot to learn, but I am enjoying every minute of it.
The best part of my day is seeing my tests go green and being able to merge and
push my changes.</p>

<p>And that is my excuse, uh I mean my reasons, for not being active here for a while.
I had set a personal goal to publish a new post each month, and I&rsquo;m working to
raise the bar and publish twice a month.  Keep me honest &ndash; smack me via Twitter
if you feel I&rsquo;m slacking.  :)</p>

<p>Ok, now I&rsquo;d like to share a little snippet of code that illustrates something neat
I have learned while working on the part-time gig.  A great benefit of working on
a project with a mentor.  The first example is my original code before refactoring
to make it better and look a lot more &lsquo;Ruby-ish&rsquo;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def is_valid?(product)
</span><span class='line'>  return true if @errors.nil?
</span><span class='line'>  @errors.each do |error|
</span><span class='line'>    if error.has_key?(product)
</span><span class='line'>      return false
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>  return true
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def errored_price(product)
</span><span class='line'>  return nil if @errors.nil?
</span><span class='line'>  @errors.each do |error|
</span><span class='line'>    if error.has_key?(product)
</span><span class='line'>      return error[product]
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>  return nil
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>And now the reveal &ndash; the pretty version which accomplishes the same thing.  Note
that during the refactor we re-named a few things, but the overall result was the
same.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def is_valid?(product)
</span><span class='line'>  return true if @errors.nil?
</span><span class='line'>  return false if @errors.include?(product)
</span><span class='line'>  return true
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def clock_price(product, eor_price)
</span><span class='line'>  return price if @new_prices.nil?
</span><span class='line'>  return @new_prices[product]
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Form, Simply Confused]]></title>
    <link href="http://hogihung.github.io/blog/2015/03/31/simple-form-simply-confused/"/>
    <updated>2015-03-31T08:45:15-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/03/31/simple-form-simply-confused</id>
    <content type="html"><![CDATA[<p>While working on the Flex Blogger project, and studying the Bourbon website, in particular the <a href="http://refills.bourbon.io/">refills</a> side of the house, I liked the way their navigation bar looked.  In particular, I wanted to implement the search box feature.</p>

<p>So I grabbed their sample code and added it to the Flex Blogger project.  At first, I just brought over the raw html and eventually broke the code up into partials.  To keep things simple, I will focus on the syntax directly related to the search function, as seen below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &lt;div class="navigation-tools"&gt;
</span><span class='line'>      &lt;div class="search-bar"&gt;
</span><span class='line'>        &lt;form role="search"&gt;
</span><span class='line'>          &lt;input type="search" placeholder="Enter Search" /&gt;
</span><span class='line'>          &lt;button type="submit"&gt;
</span><span class='line'>            &lt;img src="https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/search-icon.png" alt="Search Icon"&gt;
</span><span class='line'>          &lt;/button&gt;
</span><span class='line'>        &lt;/form&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>      &lt;a href="javascript:void(0)" class="sign-up"&gt;Sign Up&lt;/a&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>  &lt;/div&gt;</span></code></pre></td></tr></table></div></figure>


<p>In the Flex Blogger project, as with most of the Rails projects I have worked on, I&rsquo;ve used <a href="https://github.com/plataformatec/simple_form">simple form</a>.  I use simple form simply because it was used in all the tutorials and learning material that I have digested.  So my mind focuses on simple form and I try to address any scenario that needs a form, by using <em>Simple Form</em>.</p>

<p>To help me work through my nav-bar search code, I refereneced some existing code in the Flex project, the category form partial:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// _form.html.erb
</span><span class='line'>&lt;div id="category-form"&gt;
</span><span class='line'>  &lt;%= simple_form_for(@category) do |f| %&gt;
</span><span class='line'>    &lt;%= f.error_notification %&gt;
</span><span class='line'>
</span><span class='line'>    &lt;div class="form-inputs"&gt;
</span><span class='line'>      &lt;%= f.input :description %&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>
</span><span class='line'>    &lt;div class="form-actions"&gt;
</span><span class='line'>      &lt;%= f.button :submit %&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>  &lt;% end %&gt;
</span><span class='line'>  &lt;br&gt;
</span><span class='line'>&lt;/div&gt;</span></code></pre></td></tr></table></div></figure>


<p>I struggled a bit trying to get the search in the nav bar to work with Simple Form.  After trying different things I reached out to a buddy, Shaun, who has helped me in the past.  We paired for a bit and after listening to what I was trying to do, and what I had tried, he asked me a <em>simple</em> question: &ldquo;Why aren&rsquo;t you using a form_tag?&rdquo;</p>

<p>Huh?  I thought that because I was using Simple Form that I needed to work within the boundaries of it.  I didn&rsquo;t realize that I could mix things when needed.  So off we went to the <a href="http://api.rubyonrails.org/">rails api</a> and searched for &lsquo;form_tag&rsquo;.</p>

<p>You should be able to find form_tag under the ActionView::Helpers::FormTagHelper section.  From the documentation:</p>

<h4>form_tag(url_for_options = {}, options = {}, &amp;block) <BR></h4>

<blockquote><p>Starts a form tag that points the action to an url configured with url_for_options just like ActionController::Base#url_for. The method for the form defaults to POST.</p></blockquote>

<p>After the lesson, and referring to the api docs, the solution we used was as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// _search_bar.html.erb
</span><span class='line'>&lt;div class="navigation-tools"&gt;
</span><span class='line'>  &lt;div class="search-bar"&gt;
</span><span class='line'>    &lt;%= form_tag("/search") do %&gt;
</span><span class='line'>      &lt;%= text_field_tag :query, nil, placeholder: "Enter Search", type: "search" %&gt;
</span><span class='line'>      &lt;%= button_tag type: "submit", id: "search-query" do %&gt;
</span><span class='line'>        &lt;img src="https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/search-icon.png", alt: "Search Icon" &gt;
</span><span class='line'>      &lt;% end %&gt;
</span><span class='line'>    &lt;% end %&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>&lt;/div&gt;</span></code></pre></td></tr></table></div></figure>


<p>I am <em>simply</em> amazed at how there is something new to learn just about everyday.  Just when I thought I was really comfortable with working things out with Rails/Ruby, I come across an opportunity to expand my ole grey matter.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[At Sea Without The Net]]></title>
    <link href="http://hogihung.github.io/blog/2015/03/29/at-sea-without-the-net/"/>
    <updated>2015-03-29T20:49:35-04:00</updated>
    <id>http://hogihung.github.io/blog/2015/03/29/at-sea-without-the-net</id>
    <content type="html"><![CDATA[<p>Two weeks ago from today, at about this time I was kicked back in the main show room of the <strong>ms Nieuw Amsterdam</strong> waiting for the opening act to begin.  With a full stomach from an awesome meal, and a refreshing drink in hand, I was in full relax mode.  The last thing I was thinking about was code.</p>

<p>When I woke up, Monday morning, I had an itching to crack open the laptop and work on some things I had left hanging from two days prior.  But first, a quick stop for breakfast, then I headed to the ships library.  I was knocking out tasks one by one, committing away locally on my laptop.  Then instinctively, my muscle memory kicked in and before I could catch what I was doing, I typed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push origin master</span></code></pre></td></tr></table></div></figure>


<p>Duh!  You are on a ship, in the Caribbean, without a connection to the net.  No big deal, I can push my stuff to github when I return home.</p>

<p>I continued working on different things until I found myself stuck &ndash; I needed to refer to the api docs or some type of reference.  I was on vacation &ndash; the smart thing to do would have been to shut down my laptop and go relax.  Can you guess what I did?</p>

<p>Perhaps the thick-headed Irish blood in me, I decided to find a solution.  After a little digging, I found some gold nuggets in the following path:  ~/.gem/ruby/2.1.5/gems/rails-4.1.7/guides/source/</p>

<p>Reviewing some of the files in the above directory, I was able to get an answer for what I was looking for.  Saved my work, closed the laptop and headed to the gangway to catch a tender to a beautiful private island.</p>

<p>Later that day, while chatting with my dad, he let me know that he purchased a block of 200 minutes of internet time.  Satellite internet is not very fast, but good enough for quick browsing or checking of email.</p>

<p>I knew that I&rsquo;d be cracking open the laptop from time-to-time, and working on Flex Blogger as well as an app for my day job.  But I didn&rsquo;t want to burn through those sacred internet minutes when I needed to review either the Ruby or Rails APIs.  Surely there had to be a better way.  Of course there is, and I found the following site:</p>

<p><a href="https://rubydocs.org/">https://rubydocs.org/</a></p>

<p>One can visit the above site and download a local copy of the Ruby and/or Rails APIs.  The neat thing is, you can choose which version or Ruby or Rails that you want to download the documentation for.  Neat!</p>

<p>With a local copy of the documentation I was needing, I pushed my committed changes from the previous day, then logged out &ndash; only used about 15 minutes of our satellite internet.  :)</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning From Test Suite Aggravation]]></title>
    <link href="http://hogihung.github.io/blog/2015/02/17/learning-from-test-suite-aggrevation/"/>
    <updated>2015-02-17T07:55:00-05:00</updated>
    <id>http://hogihung.github.io/blog/2015/02/17/learning-from-test-suite-aggrevation</id>
    <content type="html"><![CDATA[<p>In my previous <a href="http://oldguynewtrick.com/blog/2015/02/03/gathering-of-some-newbs/">post</a> I spoke about the Flex Blogger project.  Josh introduced us to a new component called ckeditor.  Ckeditor is a javascript based gui text editor.  After using ckeditor I thought it would be beneficial to add it to another application I created for my day job &ndash; HarePD.</p>

<p>Before starting on new features, I will fire off my test suite to make sure everything is still green.  For me I just type:  rspec</p>

<p>I love seeing all that green!  Next, I created a branch to work on this new feature, and updated my Gemfile:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -b add_ckeditor
</span><span class='line'>vim Gemfile
</span><span class='line'>
</span><span class='line'>{added}
</span><span class='line'>gem 'ckeditor'</span></code></pre></td></tr></table></div></figure>


<p>You can get more information regarding how to setup ckeditor in your rails application by visiting <a href="https://github.com/galetahub/ckeditor">here</a></p>

<p>With the new gem added, and minor updates made in the appropriate view file, _form.html.slim, it was time to re-run my test suite.  Things were looking good as I saw green, green, green.  Then, as my tests executed on the scenarios that used ckeditor, I started to see red.  No big deal I thought, probably a simple change.  Below is an example of one of my tests that was failing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spec/support/issues_helper.rb
</span><span class='line'>
</span><span class='line'>def create_issue
</span><span class='line'>  click_link 'Add Issue'
</span><span class='line'>  fill_in 'Title', with: 'Cert Expiration'
</span><span class='line'>  fill_in 'Description', with: 'SSL Cert Expiration'
</span><span class='line'>  select('2', :from =&gt; 'User level')
</span><span class='line'>  select('Linux', :from =&gt; 'Os')
</span><span class='line'>  click_button 'Submit'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Ok, this should be an easy fix.  I inspected the ckeditor element on my webpage using the Chrome Dev Tools, and got the new name &ndash; issue_description.  So I updated the tests that were using &lsquo;Description&rsquo; and replaced with &lsquo;issue_description.&rsquo;  I ran a focused test, on just one scenario and it went green.  Next, I ran all the tests in that particular spec file and again I had a combination of green and red.  Argh!  I took notice of all the failed tests and ran them each one-by-one.  They all passed &ndash; they were all green when executed on their own.  Argh f#@% damnit!</p>

<p>Many hours passed as well as changes here and there to try and get things working.  To keep this post fairly short, I&rsquo;m going to jump to the solution.  After some research and trying different solutions, I stumbled upon the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Create a new file:
</span><span class='line'>spec/support/ckeditor_helper.rb
</span><span class='line'>
</span><span class='line'>def fill_in_ckeditor(locator, params = {})
</span><span class='line'>  locator = find('label', text: locator)[:for] if page.has_css?('label', text: locator)
</span><span class='line'>  page.execute_script &lt;&lt;-SCRIPT
</span><span class='line'>      var ckeditor = CKEDITOR.instances.#{locator}
</span><span class='line'>      ckeditor.setData('#{params[:with]}')
</span><span class='line'>      ckeditor.focus()
</span><span class='line'>      ckeditor.updateElement()
</span><span class='line'>  SCRIPT
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>With the above in place, I refactored my create_issue method from above to read as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def create_issue
</span><span class='line'>  click_link 'Add Issue'
</span><span class='line'>  fill_in 'Title', with: 'Cert Expiration'
</span><span class='line'>  fill_in_ckeditor 'Description', with: 'SSL Cert Expiration'
</span><span class='line'>  select('2', :from =&gt; 'User level')
</span><span class='line'>  select('Linux', :from =&gt; 'Os')
</span><span class='line'>  click_button 'Submit'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>After making the above changes, I ran my tests for the single spec file and to my delight, everything was green.  Now the real moment of truth &ndash; run the entire test suite.  A smile slowly expanded on my face as all the green scrolled by without a single pixel of red!</p>

<p>Although this issue aggravated me for a bit, the end result was much happiness and joy.  Not to mention I learned a few cool new things here and there in the process.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Gathering]]></title>
    <link href="http://hogihung.github.io/blog/2015/02/03/gathering-of-some-newbs/"/>
    <updated>2015-02-03T07:50:00-05:00</updated>
    <id>http://hogihung.github.io/blog/2015/02/03/gathering-of-some-newbs</id>
    <content type="html"><![CDATA[<p>A few weeks back I was discussing an idea around the weekly Code and Coffee table.
The idea was a spin on something I saw Nathan Barry discussing over <a href="http://nathanbarry.com/24hours/">here</a>.
I still consider myself a newbie to Ruby, but I wanted to do my own personal hack-a-thon.</p>

<p>Well that idea morphed, or is the cool thing to say, pivoted, to a project that me
and two other new to Ruby programmers would work on. All three of us discussed the
idea of creating something new.  Something no one else has done before.  A blog
written in Ruby on Rails.</p>

<p>Hopefully now you are not looking at your screen with coffee sprayed all over it
due to your laughing.  I know, there have been many, many Blog type projects.  So
why is this one different?  I&rsquo;m not sure it really is.  What I can say is that
project is giving us an opportunity to work together and learn from each other.
Not to say anything bad about you seniors out there, but there are times I feel
that the best way to illustrate that I&rsquo;ve learned something that you have passed
on, is to share that knowledge with others around my level.</p>

<p>So yes, we are making a dynamic blog written in Rails.  If you are interested in
checking it out, you can find it <a href="https://github.com/hogihung/flex_blogger">here</a>.
Please keep in mind that we are still in active development.  I will update the
README file once we are at a point where we think the application is solid.</p>

<p>There are a lot of &lsquo;firsts&rsquo; for me in regards to this project.  This is the first
web application I&rsquo;m working on with more than two people actively working at the
same time.  I&rsquo;m learning how to create and manage pull requests.  I&rsquo;m attempting
to help lead the project and keep all of us updated on the progress.</p>

<p>All three of us have been working with Ruby and Rails for a little bit &ndash; perhaps
a year or year and half.  But there are some other &lsquo;new to us&rsquo; components that we
have choosen to try out.  We decided to bypass Devise and Twitter Bootstrap &ndash; both
things that were comfortable to us.  Instead, we are using several great tools
that <a href="https://github.com/thoughtbot/">Thoughtbot</a> has shared with the community
including:  Bourbon, Neat, Bitters, Refills, Clearance, FactoryGirl and HoundCI.</p>

<p>I welcome any feedback on our project, <strong>Flex Blogger</strong>.  Just shoot me a tweet on
Twitter, or email me.  I&rsquo;m excited to see the final product and have this cool
experience.</p>

<p>I still want to test my skills by doing a personal hack-a-thon, but I need to
convince some of the gurus I know to be my guest drop ins.  :)</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enable Remote Access - Postgres]]></title>
    <link href="http://hogihung.github.io/blog/2015/01/07/enable-remote-access-postgres/"/>
    <updated>2015-01-07T21:00:07-05:00</updated>
    <id>http://hogihung.github.io/blog/2015/01/07/enable-remote-access-postgres</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve been troubleshooting an issue with my pet project.  On my laptop, in a development environment, I didn&rsquo;t seem to have any issues. My test suite has been working fine, but when I deployed the app to a production environment, I started to discover some issues.  Issues that revolve around the database.</p>

<p>I&rsquo;m not a SQL guru, so from time-to-time when I want to poke around my Postgres database, I use an application called PGAdmin.  So I fired up PGAdmin and tried to connect to the Postgres database that is running on my server, over the internet.  Politely, PGAdmin told me to go pound sand &ndash; it was not able to connect.  After a little research I learned that there were two files on my server, related to postgres, that I needed to update.</p>

<p>On your remote server, that has Postgres running, modify the two files indicated below:<br>
<em>(Note: your path might be different depending on your version of Postgres and your Linux distro)</em></p>

<pre>
sudo vim /etc/postgresql/9.3/main/pg_hba.conf  
# Added by jfhogarty to support remote access and PGAdmin
host    all             all             0.0.0.0/0               md5


sudo vim /etc/postgresql/9.3/main/postgresql.conf 
#The next line added by jfhogarty to enable remote access and PGAdmin
listen_addresses = '*'

</pre>


<p>Lastly, with the above changes added to the two .conf files, we need to restart Posgtres:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service postgresql restart</span></code></pre></td></tr></table></div></figure>


<p>With the above changes in place, and postgres restarted, I fired up PGAdmin again on my laptop.  And like <em>butter</em> I was able to connect to and work with my databases. I resumed debugging my original issue.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Passwordless SSH Access]]></title>
    <link href="http://hogihung.github.io/blog/2015/01/06/custom-passwordless-ssh/"/>
    <updated>2015-01-06T20:10:14-05:00</updated>
    <id>http://hogihung.github.io/blog/2015/01/06/custom-passwordless-ssh</id>
    <content type="html"><![CDATA[<p>When I created my Digital Ocean VPS I setup SSH Keys for both my main laptop and desktop computers.  I grabbed the appropriate contents from my .pub file and pasted that information on the web form for &lsquo;Add SSH Key&rsquo; under the SSH Keys menu of my droplet.  However, I noticed that each time I would ssh to my server I would be required to input my password.</p>

<p>In this blog posting I will illustrate how I solved this issue and why the word &lsquo;custom&rsquo; appears in the title.  There are many websites that cover how to setup passwordless ssh login.  For example, Digital Ocean has a nice posting: <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2">here</a></p>

<p>However, those instructions, and other like it, assume a plain-vanilla setup.  Of course, I dare to be different.  For example, before I started to solve this puzzle, my ~/.ssh directory had the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>➜  .ssh  ls -la
</span><span class='line'>total 88
</span><span class='line'>drwx------  11 jfhogarty  staff   374 Jan  6 18:36 .
</span><span class='line'>drwxr-xr-x+ 93 jfhogarty  staff  3162 Jan  6 20:10 ..
</span><span class='line'>-rw-r--r--@  1 jfhogarty  staff  6148 Mar  9  2013 .DS_Store
</span><span class='line'>-rw-------   1 jfhogarty  staff  1766 Mar  2  2013 id_rsa
</span><span class='line'>-rw-r--r--   1 jfhogarty  staff   400 Mar  2  2013 id_rsa.pub
</span><span class='line'>-rw-------   1 jfhogarty  staff   668 Apr 20  2014 jh-mbp_id
</span><span class='line'>-rw-r--r--   1 jfhogarty  staff   614 Apr 20  2014 jh-mbp_id.pub
</span><span class='line'>-rw-r--r--   1 jfhogarty  staff  7162 Jan  5 21:17 known_hosts
</span><span class='line'>➜  .ssh</span></code></pre></td></tr></table></div></figure>


<p>The id_rsa (private file) and the id_rsa.pub (public file,) are your normal files one would find.  But I&rsquo;ve implemented a &lsquo;best-practice&rsquo; adopted from my day job and I create specific key files for different types of access.  For example, following the instructions in the link above, from the Digital Ocean article, I created the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-rw-------   1 jfhogarty  staff   668 Jan  5 21:11 do_id_dsa
</span><span class='line'>-rw-r--r--   1 jfhogarty  staff   614 Jan  5 21:11 do_id_dsa.pub</span></code></pre></td></tr></table></div></figure>


<p>If you follow the steps from the link, there is one thing that you may need to do in addition to their steps.  Some systems require that you change the file permissions for the authorized_keys file located on your target computer.  For example, the following is how I have the permissions set on my VPS:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>➜  .ssh  ls -la
</span><span class='line'>total 12
</span><span class='line'>drwx------  2 jfhogarty jfhogarty 4096 Jan  5 21:16 .
</span><span class='line'>drwxr-xr-x 11 jfhogarty jfhogarty 4096 Jan  6 20:14 ..
</span><span class='line'>-rw-------  1 jfhogarty jfhogarty  614 Jan  5 21:14 authorized_keys
</span><span class='line'>➜  .ssh</span></code></pre></td></tr></table></div></figure>


<p>I adjusted the permissions using the following syntax:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod 600 authorized_keys</span></code></pre></td></tr></table></div></figure>


<p>After creating the new keys on my laptop, and updating the authorized_keys file on the remote server, I thought surely I should now be able to login without using a password.  I was wrong!  The remote server continued to prompt me for my password.  I decided to call it a night as it was getting late.</p>

<p>While working on a VM issue today for my day job, my internal lightbulb went off and I realized what the problem was.  Lets take a fresh look at the .ssh directory of my laptop:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh  ls -la
</span><span class='line'>total 88
</span><span class='line'>drwx------  11 jfhogarty  staff   374 Jan  6 18:36 .
</span><span class='line'>drwxr-xr-x+ 93 jfhogarty  staff  3162 Jan  6 20:21 ..
</span><span class='line'>-rw-r--r--@  1 jfhogarty  staff  6148 Mar  9  2013 .DS_Store
</span><span class='line'>-rw-------   1 jfhogarty  staff   668 Jan  5 21:11 do_id_dsa
</span><span class='line'>-rw-r--r--   1 jfhogarty  staff   614 Jan  5 21:11 do_id_dsa.pub
</span><span class='line'>-rw-------   1 jfhogarty  staff  1766 Mar  2  2013 id_rsa
</span><span class='line'>-rw-r--r--   1 jfhogarty  staff   400 Mar  2  2013 id_rsa.pub
</span><span class='line'>-rw-------   1 jfhogarty  staff   668 Apr 20  2014 jh-mbp_id
</span><span class='line'>-rw-r--r--   1 jfhogarty  staff   614 Apr 20  2014 jh-mbp_id.pub
</span><span class='line'>-rw-r--r--   1 jfhogarty  staff  7162 Jan  5 21:17 known_hosts
</span><span class='line'>➜  .ssh</span></code></pre></td></tr></table></div></figure>


<p>The keen eye might notice that I now have three sets of private/public keys.  However, when I was typing ssh myhostname.com ssh didn&rsquo;t know which files to use, if any.  I was able to prove my theory by trying the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -p 9986 -i ~/.ssh/do_id_dsa myhostname.com</span></code></pre></td></tr></table></div></figure>


<p>And BAM!  No password required to login.  I was on to a solution.  When I had my lightbulb moment, I had remembered that I needed to create a config file in the .ssh directory on my laptop.  Lets take a look at it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>➜  .ssh  cat config
</span><span class='line'>Host 10.11.12.13
</span><span class='line'>IdentityFile ~/.ssh/do_id_dsa
</span><span class='line'>Protocol 2
</span><span class='line'>
</span><span class='line'>Host myhostname.com
</span><span class='line'>IdentityFile ~/.ssh/do_id_dsa
</span><span class='line'>Protocol 2
</span><span class='line'>
</span><span class='line'>➜  .ssh</span></code></pre></td></tr></table></div></figure>


<p>NOTE:  To protect the innocent, the IP Address and *.com name above are fake.  Please substitute those values for your real IP Address and/or domain name.</p>

<p>And that is how I solved my customized passwordless ssh access to my VPS.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Error Deploying to Production on Heroku]]></title>
    <link href="http://hogihung.github.io/blog/2014/12/30/deploy-error-heroku/"/>
    <updated>2014-12-30T08:00:25-05:00</updated>
    <id>http://hogihung.github.io/blog/2014/12/30/deploy-error-heroku</id>
    <content type="html"><![CDATA[<p>I have been making progress with a personal application that I am working on.  In the early days of development, I had deployed a version of the application to Heroku &ndash; and it worked fine at that time.  Fast forward 6 months or so and lots of changes.  I deployed to Heroku and received an error when trying to view the website:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku logs
</span><span class='line'>
</span><span class='line'>2014-12-25T01:17:54.017424+00:00 heroku[web.1]: State changed from starting to crashed
</span><span class='line'>2014-12-25T01:17:55.195360+00:00 heroku[router]: at=error code=H10 desc="App crashed" method=GET path="/" host=example.herokuapp.com request_id=0c587d48-ac93-4bce-91bc-9d2de62e6a86 fwd="73.53.247.100" dyno= connect= service= status=503 bytes=
</span><span class='line'>2014-12-25T01:17:55.719076+00:00 heroku[router]: at=error code=H10 desc="App crashed" method=GET path="/favicon.ico" host=example.herokuapp.com request_id=d586d82a-8c27-4f57-b5f1-cf2b55c155d7 fwd="73.53.247.100" dyno= connect= service= status=503 bytes=</span></code></pre></td></tr></table></div></figure>


<p>That error made no sense to me.  What the heck, I know the favicon.ico file exists, and why can&rsquo;t I get to the root path?  So I went to the rails console via heroku:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku run rails console
</span><span class='line'>
</span><span class='line'>Running `rails console` attached to terminal... up, run.9397
</span><span class='line'>/app/app/models/connexion.rb:1:in `&lt;top (required)&gt;': superclass mismatch for class Nurny (TypeError)
</span><span class='line'>  from /app/vendor/bundle/ruby/2.1.0/gems/activesupport-4.1.7/lib/active_support/dependencies.rb:247:in `require'
</span><span class='line'>  from /app/vendor/bundle/ruby/2.1.0/gems/activesupport-4.1.7/lib/active_support/dependencies.rb:247:in `block in require'</span></code></pre></td></tr></table></div></figure>


<p>Note that I am substituting my real class name with a bogus one, &lsquo;Nurny&rsquo;, for this example.</p>

<p>Ok, now I get an error that looks like a real error, though I didn&rsquo;t understand it.  Luckily this all occurred the night before our weekly morning Code and Coffee.  So I brought the issue up and Micah gave me a hand for a while, having me try different things.</p>

<p>The conflict only shows when trying to run in a production environment.  I had a model for &lsquo;Nurny&rsquo; that had a class defined of Nurny.  However, I also have a model concern, for queries, with a class of &lsquo;Nurny&rsquo; which was the cause of the issue.</p>

<p>So, now how can I fix this?  I tried a simple rename of the concern, changing the line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BEFORE
</span><span class='line'>class Nurny
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>AFTER
</span><span class='line'>class NurnyQry</span></code></pre></td></tr></table></div></figure>


<p>But that spurred a flurry of new problems.  Luckily I found another solution while thinking through this issue.  Why did the app work fine in a development rails environment, but not in production.  Now I must confess I&rsquo;m not sure if my solution will have a profound negative effect, but so far I have not encountered any issues.  The solution lies in the config/environments/production.rb file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BEFORE:
</span><span class='line'>config.eager_load = true
</span><span class='line'>
</span><span class='line'>AFTER:
</span><span class='line'>config.eager_load = false</span></code></pre></td></tr></table></div></figure>


<p>And that simple configuration change fixed my issue!</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aint Your Ruby]]></title>
    <link href="http://hogihung.github.io/blog/2014/11/18/aint-your-ruby/"/>
    <updated>2014-11-18T08:40:25-05:00</updated>
    <id>http://hogihung.github.io/blog/2014/11/18/aint-your-ruby</id>
    <content type="html"><![CDATA[<p>When meeting new people in the programming community, we frequently share what we do in our day jobs.  By day I primarily use Perl, though I have been slowly building up an arsenal of Ruby and Ruby on Rails applications.  But before learning Matz&rsquo;s Ruby, I learned a different flavor of Ruby.  And this &lsquo;aint your ruby.&rsquo;</p>

<p>When I first transitioned to the team I am on now, my primary duties were to provide tier three support of specialized networking equipment.  Our team can be split into two roles:  Tech Support/Project Management and Automation/Programming.  Over time, I migrated over to the Automation side. We use Perl for our tool server scripts and Ruby to get things started.  Off to the internet I went to learn Ruby, only to quickly find that our Ruby was not the Ruby I found online.</p>

<p>The Ruby we use at work stands for:  <strong>R</strong>ules yo<strong>U B</strong>uild <strong>Y</strong>ourself.  I believe the foundation or underlaying language is Java.</p>

<p>In a nutshell, our networking equipment sends events/traps to a trap collector.  That collector then does some processing on the event and forwards to our Ruby system.  We then perform certain actions using our Ruby based on the received alarms/events.  Below is a small example of code of &lsquo;our&rsquo; Ruby:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Ping failed to LoopBack interface. IP=
</span><span class='line'>// Able to extract an IP Address
</span><span class='line'>rule DI0780_0020
</span><span class='line'>{
</span><span class='line'>  packet = DI0780;
</span><span class='line'>  when
</span><span class='line'>  {
</span><span class='line'>    ?a: ModemsAlarm(isTypeNull() != 0;
</span><span class='line'>        isStringMatch(?a.getObject(), "^[a-z][a-z][a-z0-9][a-z][a-z][0-9][0-9]+(kvm|mve|rrs[0-9][0-9][a-z][a-z][a-z]*)") == False;
</span><span class='line'>    isStringMatch(?a.getService(), "ALPHA|BETA") !=0;
</span><span class='line'>    isNameMatch("Ping +failed +to +LoopBack .*IP=") != 0);
</span><span class='line'>  }
</span><span class='line'>  then
</span><span class='line'>  {
</span><span class='line'>    modify ?a
</span><span class='line'>    {
</span><span class='line'>      setType("DI0780_CiscoInterfaceDown");
</span><span class='line'>      setContainer("IP",?a.getToken("IP= *([0-9]+.[0-9]+.[0-9]+.[0-9]+)",?a.getAlarmText()));
</span><span class='line'>      setContainer("ROUTER_IFNAME","Loopback");
</span><span class='line'>      setContainer("DEVICE_NAME",?a.getToken("([a-z0-9]+).els-an.att.net",?a.getSource()));
</span><span class='line'>      setContainer("EVENT_CORELATION_NAME",?a.buildString2("%1 %2",?a.getContainer("DEVICE_NAME"),?a.getContainer("IP")));
</span><span class='line'>      putRubyLog2("DI0780_0020", ?a.buildString1("Received a Generic Ping fail to Loopback alarm, %1", ?a.getName()));
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>Pretty wild stuff, eh?  This is just a short snippet &ndash; there is a lot more going on in our &lsquo;library&rsquo; of packets and rules.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cha-Cha-Cha-Chruby]]></title>
    <link href="http://hogihung.github.io/blog/2014/11/17/Cha-Cha-Cha-Chruby/"/>
    <updated>2014-11-17T20:40:47-05:00</updated>
    <id>http://hogihung.github.io/blog/2014/11/17/Cha-Cha-Cha-Chruby</id>
    <content type="html"><![CDATA[<p>Recently I got a bug, ney rather an itch I needed to scratch.  I have been using RVM for over a year and half.  I have had some issues, but mostly those were due to me learning how to work with RVM.</p>

<p>I was having an odd issue on one of my Macs so I decided to remove RVM and install rbenv.  I shot a tweet out to see if anyone had an opinion about rbenv and I received a reply suggesting I give chruby a chance.  Recently I had listened to an episode of Ruby Rogues <a href="http://devchat.tv/ruby-rogues/169-rr-version-managers-with-michal-papis-mislav-maronic-and-postmodern-mod-iii">#169</a>,  where they talked about RVM, rbenv, and chruby.</p>

<p>So I decied to give chruby a try.  Removing RVM is pretty straight forward.  You should be able to simply run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm implode</span></code></pre></td></tr></table></div></figure>


<p>Once removed, you may need to edit your .bashrc/.zshrc or *profile file(s) to remove any reference to RVM.</p>

<p>While I really like RVM, I&rsquo;ve always been a bit worried about the magic it performs &ndash; the stuff it does for me that I&rsquo;m not familiar with.  Chruby seemed to be easier for me to grasp.  From my limited understanding, there seems to be less moving parts in chruby vs. RVM.</p>

<p>I&rsquo;m not going to lay out all of the steps to get chruby installed.  The source web pages for chruby and ruby-install are very easy to read and comprehend.</p>

<p><a href="https://github.com/postmodern/chruby">chruby</a><br>
<a href="https://github.com/postmodern/ruby-install">ruby-install</a></p>

<p>It took me a little bit to understand the differences of chruby and how I would use in my environment.  But after getting it running on my laptop, I converted two other Macs, my Ubuntu VM, and my CentOS server to use chruby.</p>

<p>As I said earlier, I do like RVM, and it had served me well.  I still use RVM at my day job on our CentOS servers.  I thought changing from RVM to chruby on those servers would be a good idea, so I attempted to change a development server.  While the removal of RVM and install of Chruby went fine, I ran into a huge issue.  I could not get Passenger to work properly under Chruby.  I&rsquo;m sure the reason is due to my lack of understanding, but I just couldn&rsquo;t afford to figure it out. So I switched back to RVM &ndash; and RVM will stay on our work servers.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Borrowing From Ruby Tapas]]></title>
    <link href="http://hogihung.github.io/blog/2014/11/04/borrow-a-tapa-convention/"/>
    <updated>2014-11-04T07:20:45-05:00</updated>
    <id>http://hogihung.github.io/blog/2014/11/04/borrow-a-tapa-convention</id>
    <content type="html"><![CDATA[<p>I have many learning tools in my arsenal including Code School, Thoughtbot/Upcase, RailsCasts, Ruby Tapas, and too many other Internet based free resources to list.  But today I want to talk tapas, and borrow something that I learned from watching many episodes of Ruby Tapas.</p>

<p>As I&rsquo;ve watched various episodes, I kept saying to myself, how is Avdi executing code right from within his text editor?  Is this some time of post production trickery?  Perhaps a green screen based laptop with a dash of After Effects?  But after some research, I learned that is wasn&rsquo;t some fancy magic, but rather an ability within his editor.  I believe that editor to be Emacs.</p>

<p>Well, I&rsquo;m a Sublime Text user, and slowly dabbling with Vim.  So off to the online oracles to see if I could find a solution that would work in Sublime.  I did indeed find some solutions that said they were doing what Avdi can do &ndash; even referencing that they had the same desire as me.  However, I was not successful with getting Sublime to work the way I was expecting.  After spending several hours trying to force it to work, I gave up.  And I had a thought &ndash; surely this would be easier to get working with Vim.  :)</p>

<p>Getting the Tapas style in-line Ruby code execution to work in Vim was nice and easy.  I followed the instructions <a href="http://commandercoriander.net/blog/2012/10/10/evaluate-lines-of-ruby-in-vim/">here</a> and was up in running with very little effort.  For those that don&rsquo;t want leave from this fabulous reading, I&rsquo;ll summarize what needs to be done, first starting with the installation of a gem:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install rcodetools</span></code></pre></td></tr></table></div></figure>


<p>Now we need to add a plugin to Vim.  Depending on your setup, you may need to add the .vim/bundle directory in your home directory.  But I already had this setup, so all I needed to do was the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~
</span><span class='line'>cd .vim/bundle
</span><span class='line'>git clone https://github.com/t9md/vim-ruby-xmpfilter.git</span></code></pre></td></tr></table></div></figure>


<p>For a final bit of setup/configuration, we need to take a trip in editing the ~/.vimrc or ~/.vimrc.local file so we can do some mapping:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap &lt;buffer&gt; &lt;F4&gt; &lt;Plug&gt;(xmpfilter-mark)
</span><span class='line'>xmap &lt;buffer&gt; &lt;F4&gt; &lt;Plug&gt;(xmpfilter-mark)
</span><span class='line'>imap &lt;buffer&gt; &lt;F4&gt; &lt;Plug&gt;(xmpfilter-mark)
</span><span class='line'>
</span><span class='line'>nmap &lt;buffer&gt; &lt;F5&gt; &lt;Plug&gt;(xmpfilter-run)
</span><span class='line'>xmap &lt;buffer&gt; &lt;F5&gt; &lt;Plug&gt;(xmpfilter-run)
</span><span class='line'>imap &lt;buffer&gt; &lt;F5&gt; &lt;Plug&gt;(xmpfilter-run)</span></code></pre></td></tr></table></div></figure>


<p>The above mapping will allows us to mark (F4) what line(s) we want to see the results for of executing the ruby code, which we accomplish by pressing F5.  Let&rsquo;s step through an example to see how this works.  I&rsquo;ll show the example file through the various stages.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1 class Person
</span><span class='line'>2   attr_accessor :name, :age
</span><span class='line'>3
</span><span class='line'>4   def initialize(name)
</span><span class='line'>5     self.name = name
</span><span class='line'>6     self.age = "Does it matter?"
</span><span class='line'>7   end
</span><span class='line'>8 end
</span><span class='line'>9
</span><span class='line'>10 p = Person.new('Kevin')
</span><span class='line'>11 p.name
</span><span class='line'>12 p.age</span></code></pre></td></tr></table></div></figure>


<p>Next we will press F4 for the code we want to evaluate, line 11 below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1 class Person
</span><span class='line'>2   attr_accessor :name, :age
</span><span class='line'>3
</span><span class='line'>4   def initialize(name)
</span><span class='line'>5     self.name = name
</span><span class='line'>6     self.age = "Does it matter?"
</span><span class='line'>7   end
</span><span class='line'>8 end
</span><span class='line'>9
</span><span class='line'>10 p = Person.new('Kevin')
</span><span class='line'>11 p.name # =&gt;
</span><span class='line'>12 p.age</span></code></pre></td></tr></table></div></figure>


<p>And finally, EXECUTE (F5):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1 class Person
</span><span class='line'>2   attr_accessor :name, :age
</span><span class='line'>3
</span><span class='line'>4   def initialize(name)
</span><span class='line'>5     self.name = name
</span><span class='line'>6     self.age = "Does it matter?"
</span><span class='line'>7   end
</span><span class='line'>8 end
</span><span class='line'>9
</span><span class='line'>10 p = Person.new('Kevin')
</span><span class='line'>11 p.name # =&gt; "Kevin"
</span><span class='line'>12 p.age</span></code></pre></td></tr></table></div></figure>


<p>Pretty neat, eh?  Borrowing this workflow from Ruby Tapas will now help me when I&rsquo;m following along with each episode.  Now I just need to get better with Vim.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL Issue on Mac OSX]]></title>
    <link href="http://hogihung.github.io/blog/2014/10/27/mysql-issue-osx/"/>
    <updated>2014-10-27T18:40:45-04:00</updated>
    <id>http://hogihung.github.io/blog/2014/10/27/mysql-issue-osx</id>
    <content type="html"><![CDATA[<p>Most of my Rails projects, for personal use and education, have been using Postgresql or SQLite for the datbase backend.  At work our primary database is Oracle with a dash of MySQL.  Recently we decided to use MySQL with all future development, and migrate our tools/applications that use Oracle to use MySQL.</p>

<p>I downloaded and installed MySQL by grabbing the installer from the MySQL website:  <a href="http://dev.mysql.com/downloads/mysql/">http://dev.mysql.com/downloads/mysql/</a> and getting the version for my operating system &ndash; OS X Mavericks.</p>

<p>However, with this version installed I was having issues with bundler and getting the mysql gem to compile.  I tried a few solutions that I found on the internet, but none of them were working.</p>

<p>I found some other people who had issues, when using OSX Mavericks, with the MySQL installer.  They solved the issue by removing MySQL that was installed from the download via dev.mysql.com and then re-installing using Homebrew.</p>

<p>This solution worked for me as well.  I found this a bit odd, because earlier in the year I had issues with installing Postgres via Homebrew.  The solution for Postgres was to remove the Homebrew installation and use the installer from the Postgres site.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brew A Fix for Imagemagic and Paperclip]]></title>
    <link href="http://hogihung.github.io/blog/2014/10/27/brew-a-fix-for-imagemagick-and-paperclip/"/>
    <updated>2014-10-27T18:05:25-04:00</updated>
    <id>http://hogihung.github.io/blog/2014/10/27/brew-a-fix-for-imagemagick-and-paperclip</id>
    <content type="html"><![CDATA[<p>While working on a Rails project last week I encountered an issue where some of my tests were failing.  It had been a while since I worked on this project so I had to re-familiarize myself with what was going on.</p>

<p>The tests were failing when editing a profile and adding an image.  I popped over to the browser and performed a manual test to get a better idea of what was going on.  That is when I saw the following error: <em>&ldquo;Paperclip::Errors::NotIdentifiedByImageMagickError&rdquo;</em></p>

<p>To attempt to fix the issue, I first performed a simple uninstall and re-install of imagemagic using homebrew:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew uninstall imagemagick
</span><span class='line'>brew install imagemagick</span></code></pre></td></tr></table></div></figure>


<p>This didn&rsquo;t solve the problem.  Imagemagic has a command line utility, convert, which one can use to see if the application is working.  I tried a simple test:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>convert moonie.jpg moon.png</span></code></pre></td></tr></table></div></figure>


<p>But I continued to get errors even with that simple test.  So off to the internet for some deep research.  I came across the following steps, which solved the issue I was having.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew update
</span><span class='line'>brew doctor
</span><span class='line'>brew uninstall libtool
</span><span class='line'>brew uninstall imagemagic
</span><span class='line'>
</span><span class='line'>cd /Library/Caches/Homebrew
</span><span class='line'>rm imagemag*
</span><span class='line'>rm libtool-2.4.2.tar.gz
</span><span class='line'>
</span><span class='line'>brew doctor
</span><span class='line'>brew install libtool --universal
</span><span class='line'>brew link libool --force
</span><span class='line'>brew install imagemagic --build-from-source</span></code></pre></td></tr></table></div></figure>


<p>After completing the above steps, the command line tool, convert was successful.  I re-tested the Rails application, both manually, and via my test suite, and all was green again.</p>

<p>Related resources used during my quest for the fix:
<a href="https://github.com/thoughtbot/paperclip/issues/1205">https://github.com/thoughtbot/paperclip/issues/1205</a>
<a href="http://www.imagemagick.org/script/convert.php">http://www.imagemagick.org/script/convert.php</a>
<a href="http://stackoverflow.com/questions/7412208/imagemagick-and-os-x-lion-trouble">http://stackoverflow.com/questions/7412208/imagemagick-and-os-x-lion-trouble</a></p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing to_csv Method]]></title>
    <link href="http://hogihung.github.io/blog/2014/09/23/testing-to-csv-method/"/>
    <updated>2014-09-23T09:32:37-04:00</updated>
    <id>http://hogihung.github.io/blog/2014/09/23/testing-to-csv-method</id>
    <content type="html"><![CDATA[<p>Last week I covered a topic that resurfaced while I am in the process of upgrading one of our apps from Ruby 1.9 and Rails 3.x. When I wrote that application I was a raw recruit &ndash; fresh to Ruby and Rails and just trying to get the idea to work.</p>

<p>But as I&rsquo;ve been improving my skills and expanding the ole grey matter, I wanted to write this new version, fully tested.  In the application there is a need to be able to export the data to a CSV formatted file.  I had the code from the old version of the app, and migrated it over.  However, I challenged myself to figure out how to write a test for the to_csv method in Baytech model.</p>

<p>Below is the code from the Baytech model:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def self.to_csv
</span><span class='line'>  CSV.generate(col_sep: ':') do |csv|
</span><span class='line'>    all.each do |baytech|
</span><span class='line'>      port = "X"
</span><span class='line'>      csv &lt;&lt; [baytech.name, baytech.phone_num, baytech.ip_addr, port, baytech.modem_type, port]
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>I know the method works, as it has been working fine for 9 months or so now.  But I really wanted to figure out how to write a test for this method.  After much trial and error, along with research via books and google, I came up with the following solution:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>describe Baytech, '#to_csv' do
</span><span class='line'>  let(:baytech) { FactoryGirl.create(:baytech) }
</span><span class='line'>
</span><span class='line'>  before do
</span><span class='line'>    baytech
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  it { expect(Baytech.to_csv).to match /#{baytech.name}:#{baytech.phone_num}:#{baytech.ip_addr}:X:1:X/ }
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>You may notice in the above code that I am referencing a Factory.  Here is a short version of that factory file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FactoryGirl.define do
</span><span class='line'>  factory :baytech do
</span><span class='line'>    sequence(:name) {|n| "jaxfl0#{n}b9" }
</span><span class='line'>    sequence(:ip_addr) {|n| "10.1.2.#{n}" }
</span><span class='line'>    phone_num "7091234384"
</span><span class='line'>    region "USA"
</span><span class='line'>    modem_type "1"
</span><span class='line'>    ip_method "ssh"
</span><span class='line'>    active true
</span><span class='line'>    has_modem_line true
</span><span class='line'>    updated_by "cd1234"
</span><span class='line'>
</span><span class='line'>    {-snip-}
</span><span class='line'>
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>The keen eye may have caught something interesting in the to_csv method.  I&rsquo;m using an option, col_sep: &lsquo;:&rsquo; which allows me to use the : character as the delimiter instead of the default comma.</p>

<p>With the test in place, and passing, I felt better about the code in my to_csv method.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflecting on Rails Inflections]]></title>
    <link href="http://hogihung.github.io/blog/2014/09/16/reflect-on-inflectors/"/>
    <updated>2014-09-16T08:26:35-04:00</updated>
    <id>http://hogihung.github.io/blog/2014/09/16/reflect-on-inflectors</id>
    <content type="html"><![CDATA[<p>Recently I re-discovered an issue I ran into about 8 months ago.  I am re-writing an application I created for work.  The first version was written in Ruby 1.9.x and Rails 3.x.  I built the app using sticks and glue &ndash; no testing.</p>

<p>We are migrating to Ruby 2.1.x and Rails 4.1.x and rather than copy over the app and tweak it, I wanted to take a better approach, a TDD approach.</p>

<p>It is a pretty simple application, with two main models &ndash; Baytech and Device.  A Baytech can have zero to many devices, and a device should only belong to one baytech.</p>

<p>To frameout my two models I used the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails g model baytech
</span><span class='line'>rails g model device</span></code></pre></td></tr></table></div></figure>


<p>Everything seemed fine at first.  Until I started writing tests and code then I re-discovered a blast from the past.  What I didn&rsquo;t catch was that Rails, with its vast knowledge, pluralized both baytech and device as:</p>

<blockquote><ul>
<li>bayteches</li>
<li>devices</li>
</ul>
</blockquote>

<p>Now, all is cool with the plural version of device as devices.  But the plural of baytech is baytechs.  Oh crap, what do I do?</p>

<p>The first time this happened to me, it took me a while to figure out what the heck was going on.  Eventually all roads led me to the file config/initializers/inflections.rb</p>

<p>Taking a look inside this file, I found the following, or something similar:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Be sure to restart your server when you modify this file.
</span><span class='line'>
</span><span class='line'># Add new inflection rules using the following format. Inflections
</span><span class='line'># are locale specific, and you may define rules for as many different
</span><span class='line'># locales as you wish. All of these examples are active by default:
</span><span class='line'># ActiveSupport::Inflector.inflections(:en) do |inflect|
</span><span class='line'>#   inflect.plural /^(ox)$/i, '\1en'
</span><span class='line'>#   inflect.singular /^(ox)en/i, '\1'
</span><span class='line'>#   inflect.irregular 'person', 'people'
</span><span class='line'>#   inflect.uncountable %w( fish sheep )
</span><span class='line'># end
</span><span class='line'>
</span><span class='line'># These inflection rules are supported but not enabled by default:
</span><span class='line'># ActiveSupport::Inflector.inflections(:en) do |inflect|
</span><span class='line'>#   inflect.acronym 'RESTful'
</span><span class='line'># end</span></code></pre></td></tr></table></div></figure>


<p>To cure my issue, I had to make one small change to this file, making use of inflect.irregular:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ActiveSupport::Inflector.inflections do |inflect|
</span><span class='line'>  inflect.irregular 'baytech', 'baytechs'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Once that change was made, anytime there was a need for the plural version of baytech, Rails knew to use baytechs.  Yeah!</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oracle Instant Client - Mac OSX]]></title>
    <link href="http://hogihung.github.io/blog/2014/08/19/oracle-instant-client-osx/"/>
    <updated>2014-08-19T08:30:25-04:00</updated>
    <id>http://hogihung.github.io/blog/2014/08/19/oracle-instant-client-osx</id>
    <content type="html"><![CDATA[<p>I recently had the joy of installing Oracle 11g Express Edition on my home server.  That server runs CentOS 6.x as that is the flavor of Linux we use at my day job.  The server install is another story I will cover in the future, but today I would like to share how I got my laptop and development environment setup to connect to the Oracle Database.</p>

<p>Why in the world would I want to use Oracle you ask?  Well I don&rsquo;t really want to.  However, at the day job, that is what we use. And I wanted a more flexible development environment.  Due to limited resources, our &lsquo;dev&rsquo; database is also our disaster recovery database.  &lsquo;Nuff said?</p>

<p>In order to get my ruby environment setup to work with this monster database, I need two gems:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'activerecord-oracle_enhanced-adapter', '~&gt; 1.5.0'
</span><span class='line'>gem 'ruby-oci8', '~&gt; 2.1.0'</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/rsim/oracle-enhanced">Oracle Enhanced</a></p>

<p>But I&rsquo;m getting ahead of myself.  Lets take two steps back.</p>

<h2>Download some files</h2>

<p>On my server I have installed Oracle 11g Express, and my laptop is fairly current and run OS X Mavericks &ndash; a 64bit Operating System.  So let&rsquo;s get the appropriate client.</p>

<p>Download the required files from the Oracle Download site:
<a href="http://www.oracle.com/technetwork/topics/intel-macsoft-096467.html">Oracle Client</a></p>

<p>Note:  The following was learned by reviewing the blog over at: <a href="http://blog.codiez.co.za/2013/09/setup-oracle-instant-client-ruby-oci8-gem-mac/">codiez</a></p>

<p>For me, I downloaded these files:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>instantclient-basic-macos.x64-11.2.0.4.0.zip
</span><span class='line'>instantclient-sqlplus-macos.x64-11.2.0.4.0.zip
</span><span class='line'>instantclient-sdk-macos.x64-11.2.0.4.0.zip</span></code></pre></td></tr></table></div></figure>


<p>Change to the directory where you downloaded the files
(e.g. cd Downloads &ndash; assuming you are in your home directory)</p>

<p>Unzip the three files:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>unzip -qq instantclient-basic-macos.x64-11.2.0.4.0.zip
</span><span class='line'>unzip -qq instantclient-sqlplus-macos.x64-11.2.0.4.0.zip
</span><span class='line'>unzip -qq instantclient-sdk-macos.x64-11.2.0.4.0.zip</span></code></pre></td></tr></table></div></figure>


<p>Change directories to the new one created by the unzipping:
cd instantclient_11_2</p>

<p>Perform the following steps:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p /usr/local/oracle/product/instantclient_64/11.2.0.4.0/bin
</span><span class='line'>mkdir -p /usr/local/oracle/product/instantclient_64/11.2.0.4.0/lib
</span><span class='line'>mkdir -p /usr/local/oracle/product/instantclient_64/11.2.0.4.0/jdbc/lib
</span><span class='line'>mkdir -p /usr/local/oracle/product/instantclient_64/11.2.0.4.0/rdbms/jlib
</span><span class='line'>mkdir -p /usr/local/oracle/product/instantclient_64/11.2.0.4.0/sqlplus/admin
</span><span class='line'>mv ojdbc* /usr/local/oracle/product/instantclient_64/11.2.0.4.0/jdbc/lib/
</span><span class='line'>mv x*.jar /usr/local/oracle/product/instantclient_64/11.2.0.4.0/rdbms/jlib/
</span><span class='line'>mv glogin.sql /usr/local/oracle/product/instantclient_64/11.2.0.4.0/sqlplus/admin/login.sql
</span><span class='line'>mv *dylib* /usr/local/oracle/product/instantclient_64/11.2.0.4.0/lib/
</span><span class='line'>mv sdk /usr/local/oracle/product/instantclient_64/11.2.0.4.0/lib/sdk
</span><span class='line'>mv *README /usr/local/oracle/product/instantclient_64/11.2.0.4.0/
</span><span class='line'>mv * /usr/local/oracle/product/instantclient_64/11.2.0.4.0/bin/</span></code></pre></td></tr></table></div></figure>


<p>Next, we need to create and modify the tnsnames.org file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p /usr/local/oracle/admin/network
</span><span class='line'>
</span><span class='line'>touch /usr/local/oracle/admin/network/tnsnames.ora
</span><span class='line'>vim /usr/local/oracle/admin/network/tnsnames.ora
</span><span class='line'>rubyrailssvr =
</span><span class='line'>  (DESCRIPTION =
</span><span class='line'>    (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.1.14)(PORT = 1521))
</span><span class='line'>    (CONNECT_DATA = (SERVICE_NAME = XE))
</span><span class='line'>  )
</span><span class='line'>
</span><span class='line'>rubyrailssvr.homenet.com =
</span><span class='line'>  (DESCRIPTION =
</span><span class='line'>    (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.1.14)(PORT = 1521))
</span><span class='line'>    (CONNECT_DATA = (SERVICE_NAME = XE))
</span><span class='line'>  )</span></code></pre></td></tr></table></div></figure>


<p>Now we need to get our environment setup. Create a .oracle_client file in your home directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>touch ~/.oracle_client
</span><span class='line'>vim ~/.oracle_client
</span><span class='line'>export ORACLE_BASE=/usr/local/oracle
</span><span class='line'>export ORACLE_HOME=$ORACLE_BASE/product/instantclient_64/11.2.0.4.0
</span><span class='line'>export PATH=$ORACLE_HOME/bin:$PATH
</span><span class='line'>export DYLD_LIBRARY_PATH=$ORACLE_HOME/lib:$DYLD_LIBRARY_PATH
</span><span class='line'>export TNS_ADMIN=$ORACLE_BASE/admin/network
</span><span class='line'>export SQLPATH=$ORACLE_HOME/sqlplus/admin</span></code></pre></td></tr></table></div></figure>


<p>I use the bash shell at work, but have been working with zsh at home lately.  So below I show how to add the above oracle environment variables to both bash and zsh:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "source ~/.oracle_client" &gt;&gt; ~/.bash_profile
</span><span class='line'>source ~/.bash_profile
</span><span class='line'>
</span><span class='line'>echo "source ~/.oracle_client" &gt;&gt; ~/.zprofile
</span><span class='line'>source ~/.zprofile</span></code></pre></td></tr></table></div></figure>


<p>Optional step &ndash; if needed, you may need to update your /etc/hosts file so that you can resolve the IP address of your server to a fully qualified domain name.  See the following example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>192.168.1.14    rubyrailssvr.homenet.com</span></code></pre></td></tr></table></div></figure>


<p>We are almost there &ndash; go take a break if you need to.  Before we update our Gemfile to add the two gems I listed earlier, let&rsquo;s first test and make sure we can connect.  We will use sqlplus to perform that test, which is a tool that was installed as part of the instant client.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>➜  ~  sqlplus system@192.168.1.14
</span><span class='line'>
</span><span class='line'>SQL*Plus: Release 11.2.0.4.0 Production on Tue Aug 19 09:49:06 2014
</span><span class='line'>
</span><span class='line'>Copyright (c) 1982, 2013, Oracle.  All rights reserved.
</span><span class='line'>
</span><span class='line'>Enter password:
</span><span class='line'>
</span><span class='line'>Connected to:
</span><span class='line'>Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production
</span><span class='line'>
</span><span class='line'>SQL&gt;</span></code></pre></td></tr></table></div></figure>


<p>You should be able to connect now, though I have made a huge assumption.  I have assumed that your Oracle DB is currently configured to accept remote connections.</p>

<p>Well that wraps up todays episode.  Get out there and &hellip;</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wrap Up - Bloc Experience]]></title>
    <link href="http://hogihung.github.io/blog/2014/07/24/wrap-up-bloc/"/>
    <updated>2014-07-24T12:05:14-04:00</updated>
    <id>http://hogihung.github.io/blog/2014/07/24/wrap-up-bloc</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been bad.  I let myself get consumed by my attendance of the on-line course at Bloc, and spending a lot of after-work-hours working on my personal project.  I have neglected my writing, and I apologize for my absence.</p>

<p>Earlier today I received notification from Disquis that someone, Nalani, had submitted a comment.  I am grateful for that comment as it reminded me of absence from this blog.  So with that nice kick-in-the-pants, let&rsquo;s move forward.</p>

<p>I completed my on-line training of the Bloc.io course on June 9th 2014.  Overall I was satisfied with the training and can confidently recommend it to others, depending on their situation.  What?</p>

<p>Bloc is not for everyone.  The first barrier to overcome is the cost.  I believe I got in before the price increase so the tuition was around $4250 if memory serves me correctly.  I believe the price to be fair for what you get.  However, I would not suggest that anyone plop down that money if they are currently struggling financially.</p>

<p>Depending on your employment needs, Bloc may not be for you.  For me, I took the course to better my programming skills and to assist me move forward with my personal project.  But I would not say that what I learned would allow me to get a job similar to what I have now, at my current pay rate.  I think the education would help one land a junior-developer job or an internship at a dev shop.</p>

<p>I&rsquo;m not an expert, but from my experience with local dev shops here, there is a heavy emphasis on testing and Test-Drive-Development(TDD.)  And when I took the Bloc course, that area was lacking.  You can see my previous post for more information.</p>

<p>Yesterday I received an email from Bloc that indicated that they improving the Full Stack program by adding more testing to the course.  Not sure if it was my feedback, or feedback from many of us past students, but I&rsquo;m glad to see that they continuously improve on their product.</p>

<p>Is Bloc for you?  Maybe.  If you are like me, someone who has a day job and wanted to improve their programming skills, while trying to bring your product idea to life, then yes.  Maybe you are someone with a great idea, a founder, and want to get a better grip on what it will take to produce your product.  I think Bloc can help you there.  If you are trying to break ground in the industry and land your first job or internship, then yes, I think Bloc is for you.  If you need the extra hand holding while learning the basics, then yes I think you will get value from the Bloc program.</p>

<p>I do want to end with a note about the mentorship, and you may have read into my words at the end of the last paragraph.  If you are seeking what I consider advance knowledge and/or assistance, you may be dissapointed.  While I found the mentorship to be very helpful at the beginning and middle of my training, I was dissapointed at the end when it came to my capstone project.  Fortunately for me, about 8 weeks in to my Bloc training, I met a guy, Shaun, who became my &lsquo;external-mentor.&rsquo;  If not for him, I would not have been able to complete some of the Bloc assignments the way I wanted &ndash; via TDD.  Sure I could have completed them, but I want to develop by writing tests first.  Shaun has also helped me with my personal project and taken it so much farther than I could have done on my own.  What I&rsquo;m trying to end with is this &ndash; no matter if you take the training at Bloc or else where, find a mentor who will spend the time with you to help you learn.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enter the 4th Block]]></title>
    <link href="http://hogihung.github.io/blog/2014/05/11/enter-the-4th-block/"/>
    <updated>2014-05-11T18:05:24-04:00</updated>
    <id>http://hogihung.github.io/blog/2014/05/11/enter-the-4th-block</id>
    <content type="html"><![CDATA[<p>Picking up from where I left off with my block experience (see previous post, Week 2 and a half at Bloc,) a lot of good things, and some bad things, have occurred.  I had finished, what was called at the time, the third block, which included lessons on RSpec, Testing Users and both creating and destroying using Ajax.</p>

<p>The end of Block Three took me a bit longer to complete compared to how I progressed through the first two blocks.  The material in the third block was new to me.  It was during the end of this block, and creeping into the beginning of block four that I began to have issues with my mentor.  In the first two blocks, since I didn&rsquo;t need much help, I didn&rsquo;t mind that our sessions tended to be brief.  Usually they ran up to 10 minutes.  But our sessions are booked for 30 minutes.</p>

<p>My mentor during this time had missed a some meetings and had asked me to reschedule a few times.  I&rsquo;m flexible so I didn&rsquo;t see an issue.  But there was one time that I needed to reschedule and the mentor wouldn&rsquo;t work with me to make up the time.  Time much needed as I was having trouble with the project I had selected in Block Four &ndash; Saas Wiki Collaboration Tool.  I was getting very frustrated.</p>

<p>I reached out to student coordinator at Bloc, Karen, and discussed the issues I was having.  I explained that in the beggining I had gotten ahead, but now with all the problems I was encountering with this mentor, I was getting behind.  And I felt it very disrepectful that I was asked on several occasions to modify my schedule for him, but the one time I needed a re-schedule, he didn&rsquo;t care.</p>

<p>Karen helped me out and let me pick out a new mentor.  She said that they would add a week to my enrollment to help make up for some of the lost time.  (Think I need to check on that because it doesn&rsquo;t look like they added a week.)  The new mentor, Charlie, was a huge improvment.  Never did I feel like he was trying to get me off the phone.  In fact, on several calls we went over the scheduled 30 minutes.</p>

<p>While working with the new mentor, Charlie, has been a much better experience, I feel that there is something missing from the program.  Although it is said that students will do pair programming and testing, I don&rsquo;t find either to come near what I was expecting.  It may be that my expectations are set to high from what the folks at Bloc had planned to offer.  I can understand that they have a range of differently skilled students.  I don&rsquo;t think I&rsquo;m far off in saying that most newbies to this program probably don&rsquo;t care as much about testing as I do.</p>

<p>I find this mediocre approach to testing to transcend into the help one would get in the Office Hours Chat room.  I&rsquo;ll provide a brief example.  I was stuck on how to write a test that would make sure that any user, other than a logged in user, would not be able to access the ability to upgrade a users account by direct url navigation.  When I posed my question the answer I got was that I should use Pundit&rsquo;s policies and don&rsquo;t display the upgrade button unless the user is logged in and allowed to upgrade.</p>

<p>I had explained that I had already written tests for that, and the code to make the tests green, but I wanted to ensure that a malicous user would not be able to access the url for an upgrade directly.  The short answer I got was &ldquo;&hellip;well the users shouldn&rsquo;t do that.&rdquo;  Yeah, well credit card thieves should not steal peoples credit card info and identies either, but I&rsquo;m sure the credit card companies do whatever they can to protect against those thieves.</p>

<p>I really don&rsquo;t think the program was meant to take testing as seriously as I am.  It seems the program gives one just enough to say, &ldquo;&hellip; yeah I know how to test with RSpec.&rdquo;  Although I&rsquo;m happy with my mentor Charlie, I felt a bit frustrated on our calls when trying to work through testing issues.  So frustrated in fact that I stopped testing the proper way and just worked on trying to complete the assignment.</p>

<p>Bloc changed the student dashboard and I got really worried.  I was reviewing where I was in the program and the dashboard was telling me that I was behind.  The dashboard lists 5 projects, including the one I was working on, Saas Wiki Collaboration.  The sixth project is for our capstone.  Seeing that I had only four weeks left, and still hadn&rsquo;t finished this Wiki project, I got a bit frazzled.  It is not like I haven&rsquo;t been putting in the time!</p>

<p>On my mentoring call with Charlie last Friday I asked what the deal was.  There was no way I could finish all those projects and have time for my capstone.  My previous mentor had said that I only needed to pick one if I wanted to spend more time on the capstone project.  Luckily, Charlie confirmed that the dashboard was a bit confusing.  Students have the option to do more than one project before their capstone, but it is not required.</p>

<p>That made me feel a bit better, but I still needed to wrap up this Wiki project.  The main reason I took this course was to work on my capstone and have help when/where I needed via the mentorship and Office Hours Chat room.  Please don&rsquo;t get me wrong, I have learned a lot via the program, but my main goal is to work on my personal project.</p>

<p>With some &lsquo;external&rsquo; help, I was able to wrap up this Wiki project.  At least I believe it to be done according to the original requirements.  I even was able to get the Stripe intergration to work, with tests!  I&rsquo;ll have another blog post regarding the external help &ndash; stay tuned!</p>

<p>I have another mentoring call on Monday &ndash; 05/12/14.  We should be able to discuss my capstone project and get an idea of how to get started.  The nice thing about the Saas Wiki project is that there are a lot of components of that app which will apply to my capstone project.</p>

<p>Stay tuned for more information regarding my experience at <a href="http://www.bloc.io">Bloc.io</a>  I will be publishing an overview of the program at the conclusion of enrollment.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Noobs at Lillys]]></title>
    <link href="http://hogihung.github.io/blog/2014/04/17/3-noobs-at-lillys/"/>
    <updated>2014-04-17T22:10:08-04:00</updated>
    <id>http://hogihung.github.io/blog/2014/04/17/3-noobs-at-lillys</id>
    <content type="html"><![CDATA[<p>This evening I attended the RubyJax OpenHacks event at Lilly&rsquo;s Cafe out at the beach.  I believe the normal schedule has the OpenHacks event on the third Thursday of each month.  I like to get to th event a bit early as parking in that area can be a royal pain.</p>

<p>Shortly after I settled in, another new guy to the group, Jesse, joined me.  I had met Jesse a previous week at one of the Code &amp; Coffee events.  We got to talk a little bit about ourselves and what we were trying to accomplish in our quest of learning.</p>

<p>Enter the third n00b, Josh.  I was starting wonder if Micah has set the three of us in a fun game of snipe hunting.  Get all the new people together and laugh at them from a distance.  :)  The three of chatter a bit back and forth for a while, sharing some of our experiences.</p>

<p>One can learn from others that are new to Ruby, or anything for that matter.  For example, Jesse shared a neat tool he was using with me called Dash (<a href="http://kapeli.com/dash">http://kapeli.com/dash</a>).  This is a neat little app that sources the documentation of too many to count languages and frameworks.  I downloaded the app while he was demonstrating, and was excited to see all of the reference material available for the subjects I was interested in.  And then some!</p>

<p>I shared my current experience with Bloc.io and demonstrated their website, including a sample of some of the lessons I had completed and the one I had just started &ndash; my big project.  About this time Michah had showed up and I know that at least I felt at ease.  Micah had helped me before with some learning and I was hoping to pick his brain again.</p>

<p>Before we get to that though, Josh took a turn at sharing some resources.  The one that really stuck out to me was this website:  <a href="http://gitimmersion.com/">http://gitimmersion.com/</a>  I found this site to be a great resource, for the beginner, in learning how to use git.  So far I&rsquo;ve made it up to lab 14.  What I find really useful about this site is that I will be able to use the lessons on the site to help educate my fellow team workers at my day job.  Trying hard to get us all to use version control.</p>

<p>Just at I was getting ready to ask Micah a question, we had another join our group.  I was surprised, but very please to see Paolo Perrota join our group.  I think it is safe to say that all of use new guys were very happy to be hanging with two Ruby Gurus.</p>

<p>Rounding out the evening I reached out for some help with a coding issue I was having.  For the OOB Web app that I&rsquo;ve been developing for the day job, I need to support an older app.  This app uses the same data that I&rsquo;m migrating to the web app.  But the data in the files that support the app need to be delimited with a : and contain fields that we no longer need.  I had been able to figure out how to build that information as a : delimited export via the browser, but what I really needed was a rake task that could build two text files.</p>

<p>Working with Micah, he showed me where I was doing things correctly, and where I was making some mis-steps.  Using his guidance I was able to finish writing my second rake job &ndash; exporting the data.  I don&rsquo;t recall if I have mentioned it before, but Micah also helped me construct my first rake job &ndash; importing the data.</p>

<p>The time at Lilly&rsquo;s flew by, but I&rsquo;m confident in saying that all of us newbies learned something useful.  Looking forward to the next Code &amp; Coffee and OpenHacks events.</p>

<p><em>Learn Something New Every Day</em></p>
]]></content>
  </entry>
  
</feed>
